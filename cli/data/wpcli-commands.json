{"name":"wp","description":"Manage WordPress through the command-line.","longdesc":"\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n  Run 'wp help <command>' to get more information on a specific command.\n\n","subcommands":[{"name":"cache","description":"Adds, removes, fetches, and flushes the WP Object Cache object.","longdesc":"By default, the WP Object Cache exists in PHP memory for the length of the\nrequest (and is emptied at the end). Use a persistent object cache drop-in\nto persist the object cache between requests.\n\n[Read the codex article](https:\/\/codex.wordpress.org\/Class_Reference\/WP_Object_Cache)\nfor more detail.\n\n## EXAMPLES\n\n    # Set cache.\n    $ wp cache set my_key my_value my_group 300\n    Success: Set object 'my_key' in group 'my_group'.\n\n    # Get cache.\n    $ wp cache get my_key my_group\n    my_value\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Adds a value to the object cache.","longdesc":"Errors if a value already exists for the key, which means the value can't\nbe added.\n\n## OPTIONS\n\n<key>\n: Cache key.\n\n<value>\n: Value to add to the key.\n\n[<group>]\n: Method for grouping data within the cache which allows the same key to be used across groups.\n---\ndefault: default\n---\n\n[<expiration>]\n: Define how long to keep the value, in seconds. `0` means as long as possible.\n---\ndefault: 0\n---\n\n## EXAMPLES\n\n    # Add cache.\n    $ wp cache add my_key my_group my_value 300\n    Success: Added object 'my_key' in group 'my_value'.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> <value> [<group>] [<expiration>]"},{"name":"decr","description":"Decrements a value in the object cache.","longdesc":"Errors if the value can't be decremented.\n\n## OPTIONS\n\n<key>\n: Cache key.\n\n[<offset>]\n: The amount by which to decrement the item's value.\n---\ndefault: 1\n---\n\n[<group>]\n: Method for grouping data within the cache which allows the same key to be used across groups.\n---\ndefault: default\n---\n\n## EXAMPLES\n\n    # Decrease cache value.\n    $ wp cache decr my_key 2 my_group\n    48\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [<offset>] [<group>]"},{"name":"delete","description":"Removes a value from the object cache.","longdesc":"Errors if the value can't be deleted.\n\n## OPTIONS\n\n<key>\n: Cache key.\n\n[<group>]\n: Method for grouping data within the cache which allows the same key to be used across groups.\n---\ndefault: default\n---\n\n## EXAMPLES\n\n    # Delete cache.\n    $ wp cache delete my_key my_group\n    Success: Object deleted.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [<group>]"},{"name":"flush","description":"Flushes the object cache.","longdesc":"For WordPress multisite instances using a persistent object cache,\nflushing the object cache will typically flush the cache for all sites.\nBeware of the performance impact when flushing the object cache in\nproduction.\n\nErrors if the object cache can't be flushed.\n\n## EXAMPLES\n\n    # Flush cache.\n    $ wp cache flush\n    Success: The cache was flushed.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""},{"name":"get","description":"Gets a value from the object cache.","longdesc":"Errors if the value doesn't exist.\n\n## OPTIONS\n\n<key>\n: Cache key.\n\n[<group>]\n: Method for grouping data within the cache which allows the same key to be used across groups.\n---\ndefault: default\n---\n\n## EXAMPLES\n\n    # Get cache.\n    $ wp cache get my_key my_group\n    my_value\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [<group>]"},{"name":"incr","description":"Increments a value in the object cache.","longdesc":"Errors if the value can't be incremented.\n\n## OPTIONS\n\n<key>\n: Cache key.\n\n[<offset>]\n: The amount by which to increment the item's value.\n---\ndefault: 1\n---\n\n[<group>]\n: Method for grouping data within the cache which allows the same key to be used across groups.\n---\ndefault: default\n---\n\n## EXAMPLES\n\n    # Increase cache value.\n    $ wp cache incr my_key 2 my_group\n    50\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [<offset>] [<group>]"},{"name":"replace","description":"Replaces a value in the object cache, if the value already exists.","longdesc":"Errors if the value can't be replaced.\n\n## OPTIONS\n\n<key>\n: Cache key.\n\n<value>\n: Value to replace.\n\n[<group>]\n: Method for grouping data within the cache which allows the same key to be used across groups.\n---\ndefault: default\n---\n\n[<expiration>]\n: Define how long to keep the value, in seconds. `0` means as long as possible.\n---\ndefault: 0\n---\n\n## EXAMPLES\n\n    # Replace cache.\n    $ wp cache replace my_key new_value my_group\n    Success: Replaced object 'my_key' in group 'my_group'.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> <value> [<group>] [<expiration>]"},{"name":"set","description":"Sets a value to the object cache, regardless of whether it already exists.","longdesc":"Errors if the value can't be set.\n\n## OPTIONS\n\n<key>\n: Cache key.\n\n<value>\n: Value to set on the key.\n\n[<group>]\n: Method for grouping data within the cache which allows the same key to be used across groups.\n---\ndefault: default\n---\n\n[<expiration>]\n: Define how long to keep the value, in seconds. `0` means as long as possible.\n---\ndefault: 0\n---\n\n## EXAMPLES\n\n    # Set cache.\n    $ wp cache set my_key my_value my_group 300\n    Success: Set object 'my_key' in group 'my_group'.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> <value> [<group>] [<expiration>]"},{"name":"type","description":"Attempts to determine which object cache is being used.","longdesc":"Note that the guesses made by this function are based on the\nWP_Object_Cache classes that define the 3rd party object cache extension.\nChanges to those classes could render problems with this function's\nability to determine which object cache is being used.\n\n## EXAMPLES\n\n    # Check cache type.\n    $ wp cache type\n    Default\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""}]},{"name":"cap","description":"Adds, removes, and lists capabilities of a user role.","longdesc":"See references for [Roles and Capabilities](https:\/\/codex.wordpress.org\/Roles_and_Capabilities) and [WP User class](https:\/\/codex.wordpress.org\/Class_Reference\/WP_User).\n\n## EXAMPLES\n\n    # Add 'spectate' capability to 'author' role.\n    $ wp cap add 'author' 'spectate'\n    Success: Added 1 capability to 'author' role.\n\n    # Add all caps from 'editor' role to 'author' role.\n    $ wp cap list 'editor' | xargs wp cap add 'author'\n    Success: Added 24 capabilities to 'author' role.\n\n    # Remove all caps from 'editor' role that also appear in 'author' role.\n    $ wp cap list 'author' | xargs wp cap remove 'editor'\n    Success: Removed 34 capabilities from 'editor' role.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Adds capabilities to a given role.","longdesc":"## OPTIONS\n\n<role>\n: Key for the role.\n\n<cap>...\n: One or more capabilities to add.\n\n[--grant]\n: Adds the capability as an explicit boolean value, instead of implicitly defaulting to `true`.\n---\ndefault: true\noptions:\n  - true\n  - false\n---\n\n## EXAMPLES\n\n    # Add 'spectate' capability to 'author' role.\n    $ wp cap add author spectate\n    Success: Added 1 capability to 'author' role.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<role> <cap>... [--grant]"},{"name":"list","description":"Lists capabilities for a given role.","longdesc":"## OPTIONS\n\n<role>\n: Key for the role.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: list\noptions:\n  - list\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n[--show-grant]\n: Display all capabilities defined for a role including grant.\n---\ndefault: false\n---\n\n## EXAMPLES\n\n    # Display alphabetical list of Contributor capabilities.\n    $ wp cap list 'contributor' | sort\n    delete_posts\n    edit_posts\n    level_0\n    level_1\n    read\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<role> [--format=<format>] [--show-grant]"},{"name":"remove","description":"Removes capabilities from a given role.","longdesc":"## OPTIONS\n\n<role>\n: Key for the role.\n\n<cap>...\n: One or more capabilities to remove.\n\n## EXAMPLES\n\n    # Remove 'spectate' capability from 'author' role.\n    $ wp cap remove author spectate\n    Success: Removed 1 capability from 'author' role.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<role> <cap>..."}]},{"name":"cli","description":"Reviews current WP-CLI info, checks for updates, or views defined aliases.","longdesc":"## EXAMPLES\n\n    # Display the version currently installed.\n    $ wp cli version\n    WP-CLI 0.24.1\n\n    # Check for updates to WP-CLI.\n    $ wp cli check-update\n    Success: WP-CLI is at the latest version.\n\n    # Update WP-CLI to the latest stable release.\n    $ wp cli update\n    You have version 0.24.0. Would you like to update to 0.24.1? [y\/n] y\n    Downloading from https:\/\/github.com\/wp-cli\/wp-cli\/releases\/download\/v0.24.1\/wp-cli-0.24.1.phar...\n    New version works. Proceeding to replace.\n    Success: Updated WP-CLI to 0.24.1.\n\n    # Clear the internal WP-CLI cache.\n    $ wp cli cache clear\n    Success: Cache cleared.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"alias","description":"Retrieves, sets and updates aliases for WordPress Installations.","longdesc":"Aliases are shorthand references to WordPress installs. For instance,\n`@dev` could refer to a development install and `@prod` could refer to a production install.\nThis command gives you and option to add, update and delete, the registered aliases you have available.\n\n## EXAMPLES\n\n    # List alias information.\n    $ wp cli alias list\n    list\n    ---\n    @all: Run command against every registered alias.\n    @local:\n      user: wpcli\n      path: \/Users\/wpcli\/sites\/testsite\n\n    # Get alias information.\n    $ wp cli alias get @dev\n    ssh: dev@somedeve.env:12345\/home\/dev\/\n\n    # Add alias.\n    $ wp cli alias add @prod --set-ssh=login@host --set-path=\/path\/to\/wordpress\/install\/ --set-user=wpcli\n    Success: Added '@prod' alias.\n\n    # Update alias.\n    $ wp cli alias update @prod --set-user=newuser --set-path=\/new\/path\/to\/wordpress\/install\/\n    Success: Updated 'prod' alias.\n\n    # Delete alias.\n    $ wp cli alias delete @prod\n    Success: Deleted '@prod' alias.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Creates an alias.","longdesc":"## OPTIONS\n\n<key>\n: Key for the alias.\n\n[--set-user=<user>]\n: Set user for alias.\n\n[--set-url=<url>]\n: Set url for alias.\n\n[--set-path=<path>]\n: Set path for alias.\n\n[--set-ssh=<ssh>]\n: Set ssh for alias.\n\n[--set-http=<http>]\n: Set http for alias.\n\n[--grouping=<grouping>]\n: For grouping multiple aliases.\n\n[--config=<config>]\n: Config file to be considered for operations.\n---\ndefault: global\noptions:\n  - global\n  - project\n---\n\n## EXAMPLES\n\n    # Add alias to global config.\n    $ wp cli alias add @prod  --set-ssh=login@host --set-path=\/path\/to\/wordpress\/install\/ --set-user=wpcli\n    Success: Added '@prod' alias.\n\n    # Add alias to project config.\n    $ wp cli alias add @prod --set-ssh=login@host --set-path=\/path\/to\/wordpress\/install\/ --set-user=wpcli --config=project\n    Success: Added '@prod' alias.\n\n    # Add group of aliases.\n    $ wp cli alias add @multiservers --grouping=servera,serverb\n    Success: Added '@multiservers' alias.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [--set-user=<user>] [--set-url=<url>] [--set-path=<path>] [--set-ssh=<ssh>] [--set-http=<http>] [--grouping=<grouping>] [--config=<config>]"},{"name":"delete","description":"Deletes an alias.","longdesc":"## OPTIONS\n\n<key>\n: Key for the alias.\n\n[--config=<config>]\n: Config file to be considered for operations.\n---\noptions:\n  - global\n  - project\n---\n\n## EXAMPLES\n\n    # Delete alias.\n    $ wp cli alias delete @prod\n    Success: Deleted '@prod' alias.\n\n    # Delete project alias.\n    $ wp cli alias delete @prod --config=project\n    Success: Deleted '@prod' alias.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [--config=<config>]"},{"name":"get","description":"Gets the value for an alias.","longdesc":"## OPTIONS\n\n<key>\n: Key for the alias.\n\n## EXAMPLES\n\n    # Get alias.\n    $ wp cli alias get @prod\n    ssh: dev@somedeve.env:12345\/home\/dev\/\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key>"},{"name":"list","description":"Lists available WP-CLI aliases.","longdesc":"## OPTIONS\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: yaml\noptions:\n  - yaml\n  - json\n  - var_export\n---\n\n## EXAMPLES\n\n    # List all available aliases.\n    $ wp cli alias list\n    ---\n    @all: Run command against every registered alias.\n    @prod:\n      ssh: runcommand@runcommand.io~\/webapps\/production\n    @dev:\n      ssh: vagrant@192.168.50.10\/srv\/www\/runcommand.dev\n    @both:\n      - @prod\n      - @dev\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--format=<format>]"},{"name":"update","description":"Updates an alias.","longdesc":"## OPTIONS\n\n<key>\n: Key for the alias.\n\n[--set-user=<user>]\n: Set user for alias.\n\n[--set-url=<url>]\n: Set url for alias.\n\n[--set-path=<path>]\n: Set path for alias.\n\n[--set-ssh=<ssh>]\n: Set ssh for alias.\n\n[--set-http=<http>]\n: Set http for alias.\n\n[--grouping=<grouping>]\n: For grouping multiple aliases.\n\n[--config=<config>]\n: Config file to be considered for operations.\n---\noptions:\n  - global\n  - project\n---\n\n## EXAMPLES\n\n    # Update alias.\n    $ wp cli alias update @prod --set-user=newuser --set-path=\/new\/path\/to\/wordpress\/install\/\n    Success: Updated 'prod' alias.\n\n    # Update project alias.\n    $ wp cli alias update @prod --set-user=newuser --set-path=\/new\/path\/to\/wordpress\/install\/ --config=project\n    Success: Updated 'prod' alias.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [--set-user=<user>] [--set-url=<url>] [--set-path=<path>] [--set-ssh=<ssh>] [--set-http=<http>] [--grouping=<grouping>] [--config=<config>]"}]},{"name":"cache","description":"Manages the internal WP-CLI cache,.","longdesc":"## EXAMPLES\n\n    # Remove all cached files.\n    $ wp cli cache clear\n    Success: Cache cleared.\n\n    # Remove all cached files except for the newest version of each one.\n    $ wp cli cache prune\n    Success: Cache pruned.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"clear","description":"Clears the internal cache.","longdesc":"## EXAMPLES\n\n    $ wp cli cache clear\n    Success: Cache cleared.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""},{"name":"prune","description":"Prunes the internal cache.","longdesc":"Removes all cached files except for the newest version of each one.\n\n## EXAMPLES\n\n    $ wp cli cache prune\n    Success: Cache pruned.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""}]},{"name":"check-update","description":"Checks to see if there is a newer version of WP-CLI available.","longdesc":"Queries the Github releases API. Returns available versions if there are\nupdates available, or success message if using the latest release.\n\n## OPTIONS\n\n[--patch]\n: Only list patch updates.\n\n[--minor]\n: Only list minor updates.\n\n[--major]\n: Only list major updates.\n\n[--field=<field>]\n: Prints the value of a single field for each update.\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to version,update_type,package_url.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n## EXAMPLES\n\n    # Check for update.\n    $ wp cli check-update\n    Success: WP-CLI is at the latest version.\n\n    # Check for update and new version is available.\n    $ wp cli check-update\n    +---------+-------------+-------------------------------------------------------------------------------+\n    | version | update_type | package_url                                                                   |\n    +---------+-------------+-------------------------------------------------------------------------------+\n    | 0.24.1  | patch       | https:\/\/github.com\/wp-cli\/wp-cli\/releases\/download\/v0.24.1\/wp-cli-0.24.1.phar |\n    +---------+-------------+-------------------------------------------------------------------------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--patch] [--minor] [--major] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"cmd-dump","description":"Dumps the list of installed commands, as JSON.","longdesc":"## EXAMPLES\n\n    # Dump the list of installed commands.\n    $ wp cli cmd-dump\n    {\"name\":\"wp\",\"description\":\"Manage WordPress through the command-line.\",\"longdesc\":\"\\n\\n## GLOBAL PARAMETERS\\n\\n  --path=<path>\\n      Path to the WordPress files.\\n\\n  --ssh=<ssh>\\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\" or \"docker-compose\").\\n\\n  --url=<url>\\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified. \\n\\n  --user=<id|login|email>\\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""},{"name":"completions","description":"Generates tab completion strings.","longdesc":"## OPTIONS\n\n--line=<line>\n: The current command line to be executed.\n\n--point=<point>\n: The index to the current cursor position relative to the beginning of the command.\n\n## EXAMPLES\n\n    # Generate tab completion strings.\n    $ wp cli completions --line='wp eva' --point=100\n    eval\n    eval-file\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"--line=<line> --point=<point>"},{"name":"has-command","description":"Detects if a command exists","longdesc":"This commands checks if a command is registered with WP-CLI.\nIf the command is found then it returns with exit status 0.\nIf the command doesn't exist, then it will exit with status 1.\n\n## OPTIONS\n<command_name>...\n: The command\n\n## EXAMPLES\n\n    # The \"site delete\" command is registered.\n    $ wp cli has-command \"site delete\"\n    $ echo $?\n    0\n\n    # The \"foo bar\" command is not registered.\n    $ wp cli has-command \"foo bar\"\n    $ echo $?\n    1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<command_name>..."},{"name":"info","description":"Prints various details about the WP-CLI environment.","longdesc":"Helpful for diagnostic purposes, this command shares:\n\n* OS information.\n* Shell information.\n* PHP binary used.\n* PHP binary version.\n* php.ini configuration file used (which is typically different than web).\n* WP-CLI root dir: where WP-CLI is installed (if non-Phar install).\n* WP-CLI global config: where the global config YAML file is located.\n* WP-CLI project config: where the project config YAML file is located.\n* WP-CLI version: currently installed version.\n\nSee [config docs](https:\/\/wp-cli.org\/config\/) for more details on global\nand project config YAML files.\n\n## OPTIONS\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: list\noptions:\n  - list\n  - json\n---\n\n## EXAMPLES\n\n    # Display various data about the CLI environment.\n    $ wp cli info\n    OS:  Linux 4.10.0-42-generic #46~16.04.1-Ubuntu SMP Mon Dec 4 15:57:59 UTC 2017 x86_64\n    Shell:   \/usr\/bin\/zsh\n    PHP binary:  \/usr\/bin\/php\n    PHP version: 7.1.12-1+ubuntu16.04.1+deb.sury.org+1\n    php.ini used:    \/etc\/php\/7.1\/cli\/php.ini\n    WP-CLI root dir:    phar:\/\/wp-cli.phar\n    WP-CLI packages dir:    \/home\/person\/.wp-cli\/packages\/\n    WP-CLI global config:\n    WP-CLI project config:\n    WP-CLI version: 1.5.0\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--format=<format>]"},{"name":"param-dump","description":"Dumps the list of global parameters, as JSON or in var_export format.","longdesc":"## OPTIONS\n\n[--with-values]\n: Display current values also.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: json\noptions:\n  - var_export\n  - json\n---\n\n## EXAMPLES\n\n    # Dump the list of global parameters.\n    $ wp cli param-dump --format=var_export\n    array (\n      'path' =>\n      array (\n        'runtime' => '=<path>',\n        'file' => '<path>',\n        'synopsis' => '',\n        'default' => NULL,\n        'multiple' => false,\n        'desc' => 'Path to the WordPress files.',\n      ),\n      'url' =>\n      array (\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--with-values] [--format=<format>]"},{"name":"update","description":"Updates WP-CLI to the latest release.","longdesc":"Default behavior is to check the releases API for the newest stable\nversion, and prompt if one is available.\n\nUse `--stable` to install or reinstall the latest stable version.\n\nUse `--nightly` to install the latest built version of the master branch.\nWhile not recommended for production, nightly contains the latest and\ngreatest, and should be stable enough for development and staging\nenvironments.\n\nOnly works for the Phar installation mechanism.\n\n## OPTIONS\n\n[--patch]\n: Only perform patch updates.\n\n[--minor]\n: Only perform minor updates.\n\n[--major]\n: Only perform major updates.\n\n[--stable]\n: Update to the latest stable release. Skips update check.\n\n[--nightly]\n: Update to the latest built version of the master branch. Potentially unstable.\n\n[--yes]\n: Do not prompt for confirmation.\n\n[--insecure]\n: Retry without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    # Update CLI.\n    $ wp cli update\n    You have version 0.24.0. Would you like to update to 0.24.1? [y\/n] y\n    Downloading from https:\/\/github.com\/wp-cli\/wp-cli\/releases\/download\/v0.24.1\/wp-cli-0.24.1.phar...\n    New version works. Proceeding to replace.\n    Success: Updated WP-CLI to 0.24.1.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--patch] [--minor] [--major] [--stable] [--nightly] [--yes] [--insecure]"},{"name":"version","description":"Prints WP-CLI version.","longdesc":"## EXAMPLES\n\n    # Display CLI version.\n    $ wp cli version\n    WP-CLI 0.24.1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""}]},{"name":"comment","description":"Creates, updates, deletes, and moderates comments.","longdesc":"## EXAMPLES\n\n    # Create a new comment.\n    $ wp comment create --comment_post_ID=15 --comment_content=\"hello blog\" --comment_author=\"wp-cli\"\n    Success: Created comment 932.\n\n    # Update an existing comment.\n    $ wp comment update 123 --comment_author='That Guy'\n    Success: Updated comment 123.\n\n    # Delete an existing comment.\n    $ wp comment delete 1337 --force\n    Success: Deleted comment 1337.\n\n    # Delete all spam comments.\n    $ wp comment delete $(wp comment list --status=spam --format=ids)\n    Success: Deleted comment 264.\n    Success: Deleted comment 262.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"approve","description":"Approves a comment.","longdesc":"## OPTIONS\n\n<id>...\n: The IDs of the comments to approve.\n\n## EXAMPLES\n\n    # Approve comment.\n    $ wp comment approve 1337\n    Success: Approved comment 1337.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"count","description":"Counts comments, on whole blog or on a given post.","longdesc":"## OPTIONS\n\n[<post-id>]\n: The ID of the post to count comments in.\n\n## EXAMPLES\n\n    # Count comments on whole blog.\n    $ wp comment count\n    approved:        33\n    spam:            3\n    trash:           1\n    post-trashed:    0\n    all:             34\n    moderated:       1\n    total_comments:  37\n\n    # Count comments in a post.\n    $ wp comment count 42\n    approved:        19\n    spam:            0\n    trash:           0\n    post-trashed:    0\n    all:             19\n    moderated:       0\n    total_comments:  19\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<post-id>]"},{"name":"create","description":"Creates a new comment.","longdesc":"## OPTIONS\n\n[--<field>=<value>]\n: Associative args for the new comment. See wp_insert_comment().\n\n[--porcelain]\n: Output just the new comment id.\n\n## EXAMPLES\n\n    # Create comment.\n    $ wp comment create --comment_post_ID=15 --comment_content=\"hello blog\" --comment_author=\"wp-cli\"\n    Success: Created comment 932.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--<field>=<value>] [--porcelain]"},{"name":"delete","description":"Deletes a comment.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of comments to delete.\n\n[--force]\n: Skip the trash bin.\n\n## EXAMPLES\n\n    # Delete comment.\n    $ wp comment delete 1337 --force\n    Success: Deleted comment 1337.\n\n    # Delete multiple comments.\n    $ wp comment delete 1337 2341 --force\n    Success: Deleted comment 1337.\n    Success: Deleted comment 2341.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>... [--force]"},{"name":"exists","description":"Verifies whether a comment exists.","longdesc":"Displays a success message if the comment does exist.\n\n## OPTIONS\n\n<id>\n: The ID of the comment to check.\n\n## EXAMPLES\n\n    # Check whether comment exists.\n    $ wp comment exists 1337\n    Success: Comment with ID 1337 exists.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>"},{"name":"generate","description":"Generates some number of new dummy comments.","longdesc":"Creates a specified number of new comments with dummy data.\n\n## OPTIONS\n\n[--count=<number>]\n: How many comments to generate?\n---\ndefault: 100\n---\n\n[--post_id=<post-id>]\n: Assign comments to a specific post.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: progress\noptions:\n  - progress\n  - ids\n---\n\n## EXAMPLES\n\n    # Generate comments for the given post.\n    $ wp comment generate --format=ids --count=3 --post_id=123\n    138 139 140\n\n    # Add meta to every generated comment.\n    $ wp comment generate --format=ids --count=3 | xargs -d ' ' -I % wp comment meta add % foo bar\n    Success: Added custom field.\n    Success: Added custom field.\n    Success: Added custom field.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--count=<number>] [--post_id=<post-id>] [--format=<format>]"},{"name":"get","description":"Gets the data of a single comment.","longdesc":"## OPTIONS\n\n<id>\n: The comment to get.\n\n[--field=<field>]\n: Instead of returning the whole comment, returns the value of a single field.\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to all fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    # Get comment.\n    $ wp comment get 21 --field=content\n    Thanks for all the comments, everyone!\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"list","description":"Gets a list of comments.","longdesc":"Display comments based on all arguments supported by\n[WP_Comment_Query()](https:\/\/developer.wordpress.org\/reference\/classes\/WP_Comment_Query\/__construct\/).\n\n## OPTIONS\n\n[--<field>=<value>]\n: One or more args to pass to WP_Comment_Query.\n\n[--field=<field>]\n: Prints the value of a single field for each comment.\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - ids\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each comment:\n\n* comment_ID\n* comment_post_ID\n* comment_date\n* comment_approved\n* comment_author\n* comment_author_email\n\nThese fields are optionally available:\n\n* comment_author_url\n* comment_author_IP\n* comment_date_gmt\n* comment_content\n* comment_karma\n* comment_agent\n* comment_type\n* comment_parent\n* user_id\n* url\n\n## EXAMPLES\n\n    # List comment IDs.\n    $ wp comment list --field=ID\n    22\n    23\n    24\n\n    # List comments of a post.\n    $ wp comment list --post_id=1 --fields=ID,comment_date,comment_author\n    +------------+---------------------+----------------+\n    | comment_ID | comment_date        | comment_author |\n    +------------+---------------------+----------------+\n    | 1          | 2015-06-20 09:00:10 | Mr WordPress   |\n    +------------+---------------------+----------------+\n\n    # List approved comments.\n    $ wp comment list --number=3 --status=approve --fields=ID,comment_date,comment_author\n    +------------+---------------------+----------------+\n    | comment_ID | comment_date        | comment_author |\n    +------------+---------------------+----------------+\n    | 1          | 2015-06-20 09:00:10 | Mr WordPress   |\n    | 30         | 2013-03-14 12:35:07 | John Doe       |\n    | 29         | 2013-03-14 11:56:08 | Jane Doe       |\n    +------------+---------------------+----------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"meta","description":"Adds, updates, deletes, and lists comment custom fields.","longdesc":"## EXAMPLES\n\n    # Set comment meta\n    $ wp comment meta set 123 description \"Mary is a WordPress developer.\"\n    Success: Updated custom field 'description'.\n\n    # Get comment meta\n    $ wp comment meta get 123 description\n    Mary is a WordPress developer.\n\n    # Update comment meta\n    $ wp comment meta update 123 description \"Mary is an awesome WordPress developer.\"\n    Success: Updated custom field 'description'.\n\n    # Delete comment meta\n    $ wp comment meta delete 123 description\n    Success: Deleted custom field.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Add a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to create.\n\n[<value>]\n: The value of the meta field. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [<value>] [--format=<format>]"},{"name":"delete","description":"Delete a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n[<key>]\n: The name of the meta field to delete.\n\n[<value>]\n: The value to delete. If omitted, all rows with key will deleted.\n\n[--all]\n: Delete all meta for the object.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [<key>] [<value>] [--all]"},{"name":"get","description":"Get meta field value.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to get.\n\n[--format=<format>]\n: Get value in a particular format.\n---\ndefault: var_export\noptions:\n  - var_export\n  - json\n  - yaml\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [--format=<format>]"},{"name":"list","description":"List all metadata associated with an object.","longdesc":"## OPTIONS\n\n<id>\n: ID for the object.\n\n[--keys=<keys>]\n: Limit output to metadata of specific keys.\n\n[--fields=<fields>]\n: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n  - count\n---\n\n[--orderby=<fields>]\n: Set orderby which field.\n---\ndefault: id\noptions:\n - id\n - meta_key\n - meta_value\n---\n\n[--order=<order>]\n: Set ascending or descending order.\n---\ndefault: asc\noptions:\n - asc\n - desc\n---\n\n[--unserialize]\n: Unserialize meta_value output.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"},{"name":"patch","description":"Update a nested value for a meta field.","longdesc":"## OPTIONS\n\n<action>\n: Patch action to perform.\n---\noptions:\n  - insert\n  - update\n  - delete\n---\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to patch.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<action> <id> <key> <key-path>... [<value>] [--format=<format>]"},{"name":"pluck","description":"Get a nested value from a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to get.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to pluck.\n\n[--format=<format>]\n: The output format of the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n  - yaml\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> <key-path>... [--format=<format>]"},{"name":"update","description":"Update a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [<value>] [--format=<format>]"}]},{"name":"recount","description":"Recalculates the comment_count value for one or more posts.","longdesc":"## OPTIONS\n\n<id>...\n: IDs for one or more posts to update.\n\n## EXAMPLES\n\n    # Recount comment for the post.\n    $ wp comment recount 123\n    Updated post 123 comment count to 67.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"spam","description":"Marks a comment as spam.","longdesc":"## OPTIONS\n\n<id>...\n: The IDs of the comments to mark as spam.\n\n## EXAMPLES\n\n    # Spam comment.\n    $ wp comment spam 1337\n    Success: Marked as spam comment 1337.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"status","description":"Gets the status of a comment.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the comment to check.\n\n## EXAMPLES\n\n    # Get status of comment.\n    $ wp comment status 1337\n    approved\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>"},{"name":"trash","description":"Trashes a comment.","longdesc":"## OPTIONS\n\n<id>...\n: The IDs of the comments to trash.\n\n## EXAMPLES\n\n    # Trash comment.\n    $ wp comment trash 1337\n    Success: Trashed comment 1337.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"unapprove","description":"Unapproves a comment.","longdesc":"## OPTIONS\n\n<id>...\n: The IDs of the comments to unapprove.\n\n## EXAMPLES\n\n    # Unapprove comment.\n    $ wp comment unapprove 1337\n    Success: Unapproved comment 1337.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"unspam","description":"Unmarks a comment as spam.","longdesc":"## OPTIONS\n\n<id>...\n: The IDs of the comments to unmark as spam.\n\n## EXAMPLES\n\n    # Unspam comment.\n    $ wp comment unspam 1337\n    Success: Unspammed comment 1337.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"untrash","description":"Untrashes a comment.","longdesc":"## OPTIONS\n\n<id>...\n: The IDs of the comments to untrash.\n\n## EXAMPLES\n\n    # Untrash comment.\n    $ wp comment untrash 1337\n    Success: Untrashed comment 1337.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"update","description":"Updates one or more comments.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of comments to update.\n\n--<field>=<value>\n: One or more fields to update. See wp_update_comment().\n\n## EXAMPLES\n\n    # Update comment.\n    $ wp comment update 123 --comment_author='That Guy'\n    Success: Updated comment 123.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>... --<field>=<value>"}]},{"name":"config","description":"Generates and reads the wp-config.php file.","longdesc":"\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"create","description":"Generates a wp-config.php file.","longdesc":"Creates a new wp-config.php with database constants, and verifies that\nthe database constants are correct.\n\n## OPTIONS\n\n--dbname=<dbname>\n: Set the database name.\n\n--dbuser=<dbuser>\n: Set the database user.\n\n[--dbpass=<dbpass>]\n: Set the database user password.\n\n[--dbhost=<dbhost>]\n: Set the database host.\n---\ndefault: localhost\n---\n\n[--dbprefix=<dbprefix>]\n: Set the database table prefix.\n---\ndefault: wp_\n---\n\n[--dbcharset=<dbcharset>]\n: Set the database charset.\n---\ndefault: utf8\n---\n\n[--dbcollate=<dbcollate>]\n: Set the database collation.\n---\ndefault:\n---\n\n[--locale=<locale>]\n: Set the WPLANG constant. Defaults to $wp_local_package variable.\n\n[--extra-php]\n: If set, the command copies additional PHP code into wp-config.php from STDIN.\n\n[--skip-salts]\n: If set, keys and salts won't be generated, but should instead be passed via `--extra-php`.\n\n[--skip-check]\n: If set, the database connection is not checked.\n\n[--force]\n: Overwrites existing files, if present.\n\n[--config-file=<path>]\n: Specify the file path to the config file to be created. Defaults to the root of the\nWordPress installation and the filename \"wp-config.php\".\n\n[--insecure]\n: Retry API download without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    # Standard wp-config.php file\n    $ wp config create --dbname=testing --dbuser=wp --dbpass=securepswd --locale=ro_RO\n    Success: Generated 'wp-config.php' file.\n\n    # Enable WP_DEBUG and WP_DEBUG_LOG\n    $ wp config create --dbname=testing --dbuser=wp --dbpass=securepswd --extra-php <<PHP\n    define( 'WP_DEBUG', true );\n    define( 'WP_DEBUG_LOG', true );\n    PHP\n    Success: Generated 'wp-config.php' file.\n\n    # Avoid disclosing password to bash history by reading from password.txt\n    # Using --prompt=dbpass will prompt for the 'dbpass' argument\n    $ wp config create --dbname=testing --dbuser=wp --prompt=dbpass < password.txt\n    Success: Generated 'wp-config.php' file.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"--dbname=<dbname> --dbuser=<dbuser> [--dbpass=<dbpass>] [--dbhost=<dbhost>] [--dbprefix=<dbprefix>] [--dbcharset=<dbcharset>] [--dbcollate=<dbcollate>] [--locale=<locale>] [--extra-php] [--skip-salts] [--skip-check] [--force] [--config-file=<path>] [--insecure]"},{"name":"delete","description":"Deletes a specific constant or variable from the wp-config.php file.","longdesc":"## OPTIONS\n\n<name>\n: Name of the wp-config.php constant or variable.\n\n[--type=<type>]\n: Type of the config value to delete. Defaults to 'all'.\n---\ndefault: all\noptions:\n  - constant\n  - variable\n  - all\n---\n\n[--config-file=<path>]\n: Specify the file path to the config file to be modified. Defaults to the root of the\nWordPress installation and the filename \"wp-config.php\".\n\n## EXAMPLES\n\n    # Delete the COOKIE_DOMAIN constant from the wp-config.php file.\n    $ wp config delete COOKIE_DOMAIN\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<name> [--type=<type>] [--config-file=<path>]"},{"name":"edit","description":"Launches system editor to edit the wp-config.php file.","longdesc":"## OPTIONS\n\n[--config-file=<path>]\n: Specify the file path to the config file to be edited. Defaults to the root of the\nWordPress installation and the filename \"wp-config.php\".\n\n## EXAMPLES\n\n    # Launch system editor to edit wp-config.php file\n    $ wp config edit\n\n    # Edit wp-config.php file in a specific editor\n    $ EDITOR=vim wp config edit\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--config-file=<path>]"},{"name":"get","description":"Gets the value of a specific constant or variable defined in wp-config.php file.","longdesc":"## OPTIONS\n\n<name>\n: Name of the wp-config.php constant or variable.\n\n[--type=<type>]\n: Type of config value to retrieve. Defaults to 'all'.\n---\ndefault: all\noptions:\n  - constant\n  - variable\n  - all\n---\n\n[--format=<format>]\n: Get value in a particular format.\nDotenv is limited to non-object values.\n---\ndefault: var_export\noptions:\n  - var_export\n  - json\n  - yaml\n  - dotenv\n---\n\n[--config-file=<path>]\n: Specify the file path to the config file to be read. Defaults to the root of the\nWordPress installation and the filename \"wp-config.php\".\n\n## EXAMPLES\n\n    # Get the table_prefix as defined in wp-config.php file.\n    $ wp config get table_prefix\n    wp_\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<name> [--type=<type>] [--format=<format>] [--config-file=<path>]"},{"name":"has","description":"Checks whether a specific constant or variable exists in the wp-config.php file.","longdesc":"## OPTIONS\n\n<name>\n: Name of the wp-config.php constant or variable.\n\n[--type=<type>]\n: Type of the config value to set. Defaults to 'all'.\n---\ndefault: all\noptions:\n  - constant\n  - variable\n  - all\n---\n\n[--config-file=<path>]\n: Specify the file path to the config file to be checked. Defaults to the root of the\nWordPress installation and the filename \"wp-config.php\".\n\n## EXAMPLES\n\n    # Check whether the DB_PASSWORD constant exists in the wp-config.php file.\n    $ wp config has DB_PASSWORD\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<name> [--type=<type>] [--config-file=<path>]"},{"name":"list","description":"Lists variables, constants, and file includes defined in wp-config.php file.","longdesc":"## OPTIONS\n\n[<filter>...]\n: Name or partial name to filter the list by.\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to all fields.\n\n[--format=<format>]\n: Render output in a particular format.\nDotenv is limited to non-object values.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n  - dotenv\n---\n\n[--strict]\n: Enforce strict matching when a filter is provided.\n\n[--config-file=<path>]\n: Specify the file path to the config file to be read. Defaults to the root of the\nWordPress installation and the filename \"wp-config.php\".\n\n## EXAMPLES\n\n    # List constants and variables defined in wp-config.php file.\n    $ wp config list\n    +------------------+------------------------------------------------------------------+----------+\n    | key              | value                                                            | type     |\n    +------------------+------------------------------------------------------------------+----------+\n    | table_prefix     | wp_                                                              | variable |\n    | DB_NAME          | wp_cli_test                                                      | constant |\n    | DB_USER          | root                                                             | constant |\n    | DB_PASSWORD      | root                                                             | constant |\n    | AUTH_KEY         | r6+@shP1yO&$)1gdu.hl[\/j;7Zrvmt~o;#WxSsa0mlQOi24j2cR,7i+QM\/#7S:o^ | constant |\n    | SECURE_AUTH_KEY  | iO-z!_m--YH$Tx2tf\/&V,YW*13Z_HiRLqi)d?$o-tMdY+82pK$`T.NYW~iTLW;xp | constant |\n    +------------------+------------------------------------------------------------------+----------+\n\n    # List only database user and password from wp-config.php file.\n    $ wp config list DB_USER DB_PASSWORD --strict\n    +------------------+-------+----------+\n    | key              | value | type     |\n    +------------------+-------+----------+\n    | DB_USER          | root  | constant |\n    | DB_PASSWORD      | root  | constant |\n    +------------------+-------+----------+\n\n    # List all salts from wp-config.php file.\n    $ wp config list _SALT\n    +------------------+------------------------------------------------------------------+----------+\n    | key              | value                                                            | type     |\n    +------------------+------------------------------------------------------------------+----------+\n    | AUTH_SALT        | n:]Xditk+_7>Qi=>BmtZHiH-6\/Ecrvl(V5ceeGP:{>?;BT^=[B3-0>,~F5z$(+Q$ | constant |\n    | SECURE_AUTH_SALT | ?Z\/p|XhDw3w}?c.z%|+BAr|(Iv*H%%U+Du&kKR y?cJOYyRVRBeB[2zF-`(>+LCC | constant |\n    | LOGGED_IN_SALT   | +$@(1{b~Z~s}Cs>8Y]6[m6~TnoCDpE>O%e75u}&6kUH!>q:7uM4lxbB6[1pa_X,q | constant |\n    | NONCE_SALT       | _x+F li|QL?0OSQns1_JZ{|Ix3Jleox-71km\/gifnyz8kmo=w-;@AE8W,(fP<N}2 | constant |\n    +------------------+------------------------------------------------------------------+----------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<filter>...] [--fields=<fields>] [--format=<format>] [--strict] [--config-file=<path>]"},{"name":"path","description":"Gets the path to wp-config.php file.","longdesc":"## EXAMPLES\n\n    # Get wp-config.php file path\n    $ wp config path\n    \/home\/person\/htdocs\/project\/wp-config.php\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""},{"name":"set","description":"Sets the value of a specific constant or variable defined in wp-config.php file.","longdesc":"## OPTIONS\n\n<name>\n: Name of the wp-config.php constant or variable.\n\n<value>\n: Value to set the wp-config.php constant or variable to.\n\n[--add]\n: Add the value if it doesn't exist yet.\nThis is the default behavior, override with --no-add.\n\n[--raw]\n: Place the value into the wp-config.php file as is, instead of as a quoted string.\n\n[--anchor=<anchor>]\n: Anchor string where additions of new values are anchored around.\nDefaults to \"\/* That's all, stop editing!\".\nThe special case \"EOF\" string uses the end of the file as the anchor.\n\n[--placement=<placement>]\n: Where to place the new values in relation to the anchor string.\n---\ndefault: 'before'\noptions:\n  - before\n  - after\n---\n\n[--separator=<separator>]\n: Separator string to put between an added value and its anchor string.\nThe following escape sequences will be recognized and properly interpreted: '\\n' => newline, '\\r' => carriage return, '\\t' => tab.\nDefaults to a single EOL (\"\\n\" on *nix and \"\\r\\n\" on Windows).\n\n[--type=<type>]\n: Type of the config value to set. Defaults to 'all'.\n---\ndefault: all\noptions:\n  - constant\n  - variable\n  - all\n---\n\n[--config-file=<path>]\n: Specify the file path to the config file to be modified. Defaults to the root of the\nWordPress installation and the filename \"wp-config.php\".\n\n## EXAMPLES\n\n    # Set the WP_DEBUG constant to true.\n    $ wp config set WP_DEBUG true --raw\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<name> <value> [--add] [--raw] [--anchor=<anchor>] [--placement=<placement>] [--separator=<separator>] [--type=<type>] [--config-file=<path>]"},{"name":"shuffle-salts","description":"Refreshes the salts defined in the wp-config.php file.","longdesc":"## OPTIONS\n\n[<keys>...]\n: One ore more keys to shuffle. If none are provided, this falls back to the default WordPress Core salt keys.\n\n[--force]\n: If an unknown key is requested to be shuffled, add it instead of throwing a warning.\n\n[--config-file=<path>]\n: Specify the file path to the config file to be modified. Defaults to the root of the\nWordPress installation and the filename \"wp-config.php\".\n\n[--insecure]\n: Retry API download without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    # Get new salts for your wp-config.php file\n    $ wp config shuffle-salts\n    Success: Shuffled the salt keys.\n\n    # Add a cache key salt to the wp-config.php file\n    $ wp config shuffle-salts WP_CACHE_KEY_SALT --force\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<keys>...] [--force] [--config-file=<path>] [--insecure]"}]},{"name":"core","description":"Downloads, installs, updates, and manages a WordPress installation.","longdesc":"## EXAMPLES\n\n    # Download WordPress core\n    $ wp core download --locale=nl_NL\n    Downloading WordPress 4.5.2 (nl_NL)...\n    md5 hash verified: c5366d05b521831dd0b29dfc386e56a5\n    Success: WordPress downloaded.\n\n    # Install WordPress\n    $ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_password=strongpassword --admin_email=info@example.com\n    Success: WordPress installed successfully.\n\n    # Display the WordPress version\n    $ wp core version\n    4.5.2\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"check-update","description":"Checks for WordPress updates via Version Check API.","longdesc":"Lists the most recent versions when there are updates available,\nor success message when up to date.\n\n## OPTIONS\n\n[--minor]\n: Compare only the first two parts of the version number.\n\n[--major]\n: Compare only the first part of the version number.\n\n[--field=<field>]\n: Prints the value of a single field for each update.\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to version,update_type,package_url.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - count\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    $ wp core check-update\n    +---------+-------------+-------------------------------------------------------------+\n    | version | update_type | package_url                                                 |\n    +---------+-------------+-------------------------------------------------------------+\n    | 4.5.2   | major       | https:\/\/downloads.wordpress.org\/release\/wordpress-4.5.2.zip |\n    +---------+-------------+-------------------------------------------------------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--minor] [--major] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"download","description":"Downloads core WordPress files.","longdesc":"Downloads and extracts WordPress core files to the specified path. Uses\ncurrent directory when no path is specified. Downloaded build is verified\nto have the correct md5 and then cached to the local filesytem.\nSubsequent uses of command will use the local cache if it still exists.\n\n## OPTIONS\n\n[<download-url>]\n: Download directly from a provided URL instead of fetching the URL from the wordpress.org servers.\n\n[--path=<path>]\n: Specify the path in which to install WordPress. Defaults to current\ndirectory.\n\n[--locale=<locale>]\n: Select which language you want to download.\n\n[--version=<version>]\n: Select which version you want to download. Accepts a version number, 'latest' or 'nightly'.\n\n[--skip-content]\n: Download WP without the default themes and plugins.\n\n[--force]\n: Overwrites existing files, if present.\n\n[--insecure]\n: Retry download without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n[--extract]\n: Whether to extract the downloaded file. Defaults to true.\n\n## EXAMPLES\n\n    $ wp core download --locale=nl_NL\n    Downloading WordPress 4.5.2 (nl_NL)...\n    md5 hash verified: c5366d05b521831dd0b29dfc386e56a5\n    Success: WordPress downloaded.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<download-url>] [--path=<path>] [--locale=<locale>] [--version=<version>] [--skip-content] [--force] [--insecure] [--extract]"},{"name":"install","description":"Runs the standard WordPress installation process.","longdesc":"Creates the WordPress tables in the database using the URL, title, and\ndefault admin user details provided. Performs the famous 5 minute install\nin seconds or less.\n\nNote: if you've installed WordPress in a subdirectory, then you'll need\nto `wp option update siteurl` after `wp core install`. For instance, if\nWordPress is installed in the `\/wp` directory and your domain is example.com,\nthen you'll need to run `wp option update siteurl http:\/\/example.com\/wp` for\nyour WordPress installation to function properly.\n\nNote: When using custom user tables (e.g. `CUSTOM_USER_TABLE`), the admin\nemail and password are ignored if the user_login already exists. If the\nuser_login doesn't exist, a new user will be created.\n\n## OPTIONS\n\n--url=<url>\n: The address of the new site.\n\n--title=<site-title>\n: The title of the new site.\n\n--admin_user=<username>\n: The name of the admin user.\n\n[--admin_password=<password>]\n: The password for the admin user. Defaults to randomly generated string.\n\n--admin_email=<email>\n: The email address for the admin user.\n\n[--locale=<locale>]\n: The locale\/language for the installation (e.g. `de_DE`). Default is `en_US`.\n\n[--skip-email]\n: Don't send an email notification to the new admin user.\n\n## EXAMPLES\n\n    # Install WordPress in 5 seconds\n    $ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_password=strongpassword --admin_email=info@example.com\n    Success: WordPress installed successfully.\n\n    # Install WordPress without disclosing admin_password to bash history\n    $ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_email=info@example.com --prompt=admin_password < admin_password.txt\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"--url=<url> --title=<site-title> --admin_user=<username> [--admin_password=<password>] --admin_email=<email> [--locale=<locale>] [--skip-email]"},{"name":"is-installed","description":"Checks if WordPress is installed.","longdesc":"Determines whether WordPress is installed by checking if the standard\ndatabase tables are installed. Doesn't produce output; uses exit codes\nto communicate whether WordPress is installed.\n\n[--network]\n: Check if this is a multisite installation.\n\n## EXAMPLES\n\n    # Check whether WordPress is installed; exit status 0 if installed, otherwise 1\n    $ wp core is-installed\n    $ echo $?\n    1\n\n    # Bash script for checking whether WordPress is installed or not\n    if ! wp core is-installed; then\n        wp core install\n    fi\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--network]"},{"name":"multisite-convert","description":"Transforms an existing single-site installation into a multisite installation.","longdesc":"Creates the multisite database tables, and adds the multisite constants\nto wp-config.php.\n\nFor those using WordPress with Apache, remember to update the `.htaccess`\nfile with the appropriate multisite rewrite rules.\n\n[Review the multisite documentation](https:\/\/wordpress.org\/support\/article\/create-a-network\/)\nfor more details about how multisite works.\n\n## OPTIONS\n\n[--title=<network-title>]\n: The title of the new network.\n\n[--base=<url-path>]\n: Base path after the domain name that each site url will start with.\n---\ndefault: \/\n---\n\n[--subdomains]\n: If passed, the network will use subdomains, instead of subdirectories. Doesn't work with 'localhost'.\n\n## EXAMPLES\n\n    $ wp core multisite-convert\n    Set up multisite database tables.\n    Added multisite constants to wp-config.php.\n    Success: Network installed. Don't forget to set up rewrite rules.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--title=<network-title>] [--base=<url-path>] [--subdomains]"},{"name":"multisite-install","description":"Installs WordPress multisite from scratch.","longdesc":"Creates the WordPress tables in the database using the URL, title, and\ndefault admin user details provided. Then, creates the multisite tables\nin the database and adds multisite constants to the wp-config.php.\n\nFor those using WordPress with Apache, remember to update the `.htaccess`\nfile with the appropriate multisite rewrite rules.\n\n## OPTIONS\n\n[--url=<url>]\n: The address of the new site.\n\n[--base=<url-path>]\n: Base path after the domain name that each site url in the network will start with.\n---\ndefault: \/\n---\n\n[--subdomains]\n: If passed, the network will use subdomains, instead of subdirectories. Doesn't work with 'localhost'.\n\n--title=<site-title>\n: The title of the new site.\n\n--admin_user=<username>\n: The name of the admin user.\n---\ndefault: admin\n---\n\n[--admin_password=<password>]\n: The password for the admin user. Defaults to randomly generated string.\n\n--admin_email=<email>\n: The email address for the admin user.\n\n[--skip-email]\n: Don't send an email notification to the new admin user.\n\n[--skip-config]\n: Don't add multisite constants to wp-config.php.\n\n## EXAMPLES\n\n    $ wp core multisite-install --title=\"Welcome to the WordPress\" \\\n    > --admin_user=\"admin\" --admin_password=\"password\" \\\n    > --admin_email=\"user@example.com\"\n    Single site database tables already present.\n    Set up multisite database tables.\n    Added multisite constants to wp-config.php.\n    Success: Network installed. Don't forget to set up rewrite rules.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--url=<url>] [--base=<url-path>] [--subdomains] --title=<site-title> --admin_user=<username> [--admin_password=<password>] --admin_email=<email> [--skip-email] [--skip-config]"},{"name":"update","description":"Updates WordPress to a newer version.","longdesc":"Defaults to updating WordPress to the latest version.\n\nIf you see \"Error: Another update is currently in progress.\", you may\nneed to run `wp option delete core_updater.lock` after verifying another\nupdate isn't actually running.\n\n## OPTIONS\n\n[<zip>]\n: Path to zip file to use, instead of downloading from wordpress.org.\n\n[--minor]\n: Only perform updates for minor releases (e.g. update from WP 4.3 to 4.3.3 instead of 4.4.2).\n\n[--version=<version>]\n: Update to a specific version, instead of to the latest version. Alternatively accepts 'nightly'.\n\n[--force]\n: Update even when installed WP version is greater than the requested version.\n\n[--locale=<locale>]\n: Select which language you want to download.\n\n[--insecure]\n: Retry download without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    # Update WordPress\n    $ wp core update\n    Updating to version 4.5.2 (en_US)...\n    Downloading update from https:\/\/downloads.wordpress.org\/release\/wordpress-4.5.2-no-content.zip...\n    Unpacking the update...\n    Cleaning up files...\n    No files found that need cleaning up\n    Success: WordPress updated successfully.\n\n    # Update WordPress to latest version of 3.8 release\n    $ wp core update --version=3.8 ..\/latest.zip\n    Updating to version 3.8 ()...\n    Unpacking the update...\n    Cleaning up files...\n    File removed: wp-admin\/js\/tags-box.js\n    ...\n    File removed: wp-admin\/js\/updates.min.\n    377 files cleaned up\n    Success: WordPress updated successfully.\n\n    # Update WordPress to 3.1 forcefully\n    $ wp core update --version=3.1 --force\n    Updating to version 3.1 (en_US)...\n    Downloading update from https:\/\/wordpress.org\/wordpress-3.1.zip...\n    Unpacking the update...\n    Warning: Checksums not available for WordPress 3.1\/en_US. Please cleanup files manually.\n    Success: WordPress updated successfully.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<zip>] [--minor] [--version=<version>] [--force] [--locale=<locale>] [--insecure]"},{"name":"update-db","description":"Runs the WordPress database update procedure.","longdesc":"[--network]\n: Update databases for all sites on a network\n\n[--dry-run]\n: Compare database versions without performing the update.\n\n## EXAMPLES\n\n    # Update the WordPress database\n    $ wp core update-db\n    Success: WordPress database upgraded successfully from db version 36686 to 35700.\n\n    # Update databases for all sites on a network\n    $ wp core update-db --network\n    WordPress database upgraded successfully from db version 35700 to 29630 on example.com\/\n    Success: WordPress database upgraded on 123\/123 sites\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--network] [--dry-run]"},{"name":"verify-checksums","description":"Verifies WordPress files against WordPress.org's checksums.","longdesc":"Downloads md5 checksums for the current version from WordPress.org, and\ncompares those checksums against the currently installed files.\n\nFor security, avoids loading WordPress when verifying checksums.\n\nIf you experience issues verifying from this command, ensure you are\npassing the relevant `--locale` and `--version` arguments according to\nthe values from the `Dashboard->Updates` menu in the admin area of the\nsite.\n\n## OPTIONS\n\n[--version=<version>]\n: Verify checksums against a specific version of WordPress.\n\n[--locale=<locale>]\n: Verify checksums against a specific locale of WordPress.\n\n[--insecure]\n: Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    # Verify checksums\n    $ wp core verify-checksums\n    Success: WordPress installation verifies against checksums.\n\n    # Verify checksums for given WordPress version\n    $ wp core verify-checksums --version=4.0\n    Success: WordPress installation verifies against checksums.\n\n    # Verify checksums for given locale\n    $ wp core verify-checksums --locale=en_US\n    Success: WordPress installation verifies against checksums.\n\n    # Verify checksums for given locale\n    $ wp core verify-checksums --locale=ja\n    Warning: File doesn't verify against checksum: wp-includes\/version.php\n    Warning: File doesn't verify against checksum: readme.html\n    Warning: File doesn't verify against checksum: wp-config-sample.php\n    Error: WordPress installation doesn't verify against checksums.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--version=<version>] [--locale=<locale>] [--insecure]"},{"name":"version","description":"Displays the WordPress version.","longdesc":"## OPTIONS\n\n[--extra]\n: Show extended version information.\n\n## EXAMPLES\n\n    # Display the WordPress version\n    $ wp core version\n    4.5.2\n\n    # Display WordPress version along with other information\n    $ wp core version --extra\n    WordPress version: 4.5.2\n    Database revision: 36686\n    TinyMCE version:   4.310 (4310-20160418)\n    Package language:  en_US\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--extra]"}]},{"name":"cron","description":"Tests, runs, and deletes WP-Cron events; manages WP-Cron schedules.","longdesc":"## EXAMPLES\n\n    # Test WP Cron spawning system\n    $ wp cron test\n    Success: WP-Cron spawning is working as expected.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"event","description":"Schedules, runs, and deletes WP-Cron events.","longdesc":"## EXAMPLES\n\n    # Schedule a new cron event\n    $ wp cron event schedule cron_test\n    Success: Scheduled event with hook 'cron_test' for 2016-05-31 10:19:16 GMT.\n\n    # Run all cron events due right now\n    $ wp cron event run --due-now\n    Success: Executed a total of 2 cron events.\n\n    # Delete all scheduled cron events for the given hook\n    $ wp cron event delete cron_test\n    Success: Deleted 2 instances of the cron event 'cron_test'.\n\n    # List scheduled cron events in JSON\n    $ wp cron event list --fields=hook,next_run --format=json\n    [{\"hook\":\"wp_version_check\",\"next_run\":\"2016-05-31 10:15:13\"},{\"hook\":\"wp_update_plugins\",\"next_run\":\"2016-05-31 10:15:13\"},{\"hook\":\"wp_update_themes\",\"next_run\":\"2016-05-31 10:15:14\"}]\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"delete","description":"Deletes all scheduled cron events for the given hook.","longdesc":"## OPTIONS\n\n<hook>\n: The hook name.\n\n## EXAMPLES\n\n    # Delete all scheduled cron events for the given hook\n    $ wp cron event delete cron_test\n    Success: Deleted 2 instances of the cron event 'cron_test'.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<hook>"},{"name":"list","description":"Lists scheduled cron events.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--<field>=<value>]\n: Filter by one or more fields.\n\n[--field=<field>]\n: Prints the value of a single field for each event.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - ids\n  - json\n  - count\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each cron event:\n* hook\n* next_run_gmt\n* next_run_relative\n* recurrence\n\nThese fields are optionally available:\n* time\n* sig\n* args\n* schedule\n* interval\n* next_run\n\n## EXAMPLES\n\n    # List scheduled cron events\n    $ wp cron event list\n    +-------------------+---------------------+---------------------+------------+\n    | hook              | next_run_gmt        | next_run_relative   | recurrence |\n    +-------------------+---------------------+---------------------+------------+\n    | wp_version_check  | 2016-05-31 22:15:13 | 11 hours 57 minutes | 12 hours   |\n    | wp_update_plugins | 2016-05-31 22:15:13 | 11 hours 57 minutes | 12 hours   |\n    | wp_update_themes  | 2016-05-31 22:15:14 | 11 hours 57 minutes | 12 hours   |\n    +-------------------+---------------------+---------------------+------------+\n\n    # List scheduled cron events in JSON\n    $ wp cron event list --fields=hook,next_run --format=json\n    [{\"hook\":\"wp_version_check\",\"next_run\":\"2016-05-31 10:15:13\"},{\"hook\":\"wp_update_plugins\",\"next_run\":\"2016-05-31 10:15:13\"},{\"hook\":\"wp_update_themes\",\"next_run\":\"2016-05-31 10:15:14\"}]\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--fields=<fields>] [--<field>=<value>] [--field=<field>] [--format=<format>]"},{"name":"run","description":"Runs the next scheduled cron event for the given hook.","longdesc":"## OPTIONS\n\n[<hook>...]\n: One or more hooks to run.\n\n[--due-now]\n: Run all hooks due right now.\n\n[--all]\n: Run all hooks.\n\n## EXAMPLES\n\n    # Run all cron events due right now\n    $ wp cron event run --due-now\n    Success: Executed a total of 2 cron events.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<hook>...] [--due-now] [--all]"},{"name":"schedule","description":"Schedules a new cron event.","longdesc":"## OPTIONS\n\n<hook>\n: The hook name.\n\n[<next-run>]\n: A Unix timestamp or an English textual datetime description compatible with `strtotime()`. Defaults to now.\n\n[<recurrence>]\n: How often the event should recur. See `wp cron schedule list` for available schedule names. Defaults to no recurrence.\n\n[--<field>=<value>]\n: Arguments to pass to the hook for the event. <field> should be a numeric key, not a string.\n\n## EXAMPLES\n\n    # Schedule a new cron event\n    $ wp cron event schedule cron_test\n    Success: Scheduled event with hook 'cron_test' for 2016-05-31 10:19:16 GMT.\n\n    # Schedule new cron event with hourly recurrence\n    $ wp cron event schedule cron_test now hourly\n    Success: Scheduled event with hook 'cron_test' for 2016-05-31 10:20:32 GMT.\n\n    # Schedule new cron event and pass arguments\n    $ wp cron event schedule cron_test '+1 hour' --0=first-argument --1=second-argument\n    Success: Scheduled event with hook 'cron_test' for 2016-05-31 11:21:35 GMT.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<hook> [<next-run>] [<recurrence>] [--<field>=<value>]"},{"name":"unschedule","description":"Unschedules all cron events for a given hook.","longdesc":"## OPTIONS\n\n<hook>\n: Name of the hook for which all events should be unscheduled.\n\n## EXAMPLES\n\n    # Unschedule a cron event on given hook.\n    $ wp cron event unschedule cron_test\n    Success: Unscheduled 2 events with hook 'cron_test'.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<hook>"}]},{"name":"schedule","description":"Gets WP-Cron schedules.","longdesc":"## EXAMPLES\n\n    # List available cron schedules\n    $ wp cron schedule list\n    +------------+-------------+----------+\n    | name       | display     | interval |\n    +------------+-------------+----------+\n    | hourly     | Once Hourly | 3600     |\n    | twicedaily | Twice Daily | 43200    |\n    | daily      | Once Daily  | 86400    |\n    +------------+-------------+----------+\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"list","description":"List available cron schedules.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--field=<field>]\n: Prints the value of a single field for each schedule.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - ids\n  - json\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each cron schedule:\n\n* name\n* display\n* interval\n\nThere are no additional fields.\n\n## EXAMPLES\n\n    # List available cron schedules\n    $ wp cron schedule list\n    +------------+-------------+----------+\n    | name       | display     | interval |\n    +------------+-------------+----------+\n    | hourly     | Once Hourly | 3600     |\n    | twicedaily | Twice Daily | 43200    |\n    | daily      | Once Daily  | 86400    |\n    +------------+-------------+----------+\n\n    # List id of available cron schedule\n    $ wp cron schedule list --fields=name --format=ids\n    hourly twicedaily daily\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--fields=<fields>] [--field=<field>] [--format=<format>]"}]},{"name":"test","description":"Tests the WP Cron spawning system and reports back its status.","longdesc":"This command tests the spawning system by performing the following steps:\n\n* Checks to see if the `DISABLE_WP_CRON` constant is set; errors if true\nbecause WP-Cron is disabled.\n* Checks to see if the `ALTERNATE_WP_CRON` constant is set; warns if true.\n* Attempts to spawn WP-Cron over HTTP; warns if non 200 response code is\nreturned.\n\n## EXAMPLES\n\n    # Cron test runs successfully.\n    $ wp cron test\n    Success: WP-Cron spawning is working as expected.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""}]},{"name":"db","description":"Performs basic database operations using credentials stored in wp-config.php.","longdesc":"## EXAMPLES\n\n    # Create a new database.\n    $ wp db create\n    Success: Database created.\n\n    # Drop an existing database.\n    $ wp db drop --yes\n    Success: Database dropped.\n\n    # Reset the current database.\n    $ wp db reset --yes\n    Success: Database reset.\n\n    # Execute a SQL query stored in a file.\n    $ wp db query < debug.sql\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"check","description":"Checks the current status of the database.","longdesc":"Runs `mysqlcheck` utility with `--check` using `DB_HOST`,\n`DB_NAME`, `DB_USER` and `DB_PASSWORD` database credentials\nspecified in wp-config.php.\n\n[See docs](http:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/check-table.html)\nfor more details on the `CHECK TABLE` statement.\n\n## OPTIONS\n\n[--dbuser=<value>]\n: Username to pass to mysqlcheck. Defaults to DB_USER.\n\n[--dbpass=<value>]\n: Password to pass to mysqlcheck. Defaults to DB_PASSWORD.\n\n[--<field>=<value>]\n: Extra arguments to pass to mysqlcheck. [Refer to mysqlcheck docs](https:\/\/dev.mysql.com\/doc\/en\/mysqlcheck.html).\n\n[--defaults]\n: Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.\n\n## EXAMPLES\n\n    $ wp db check\n    Success: Database checked.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--defaults]"},{"name":"clean","description":"Removes all tables with `$table_prefix` from the database.","longdesc":"Runs `DROP_TABLE` for each table that has a `$table_prefix` as specified\nin wp-config.php.\n\n## OPTIONS\n\n[--dbuser=<value>]\n: Username to pass to mysql. Defaults to DB_USER.\n\n[--dbpass=<value>]\n: Password to pass to mysql. Defaults to DB_PASSWORD.\n\n[--yes]\n: Answer yes to the confirmation message.\n\n[--defaults]\n: Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.\n\n## EXAMPLES\n\n    # Delete all tables that match the current site prefix.\n    $ wp db clean --yes\n    Success: Tables dropped.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--dbuser=<value>] [--dbpass=<value>] [--yes] [--defaults]"},{"name":"cli","description":"Opens a MySQL console using credentials from wp-config.php","longdesc":"## OPTIONS\n\n[--database=<database>]\n: Use a specific database. Defaults to DB_NAME.\n\n[--default-character-set=<character-set>]\n: Use a specific character set. Defaults to DB_CHARSET when defined.\n\n[--dbuser=<value>]\n: Username to pass to mysql. Defaults to DB_USER.\n\n[--dbpass=<value>]\n: Password to pass to mysql. Defaults to DB_PASSWORD.\n\n[--<field>=<value>]\n: Extra arguments to pass to mysql. [Refer to mysql docs](https:\/\/dev.mysql.com\/doc\/en\/mysql-command-options.html).\n\n[--defaults]\n: Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.\n\n## EXAMPLES\n\n    # Open MySQL console\n    $ wp db cli\n    mysql>\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--database=<database>] [--default-character-set=<character-set>] [--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--defaults]"},{"name":"columns","description":"Displays information about a given table.","longdesc":"## OPTIONS\n\n<table>\n: Name of the database table.\n\n[--format]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    $ wp db columns wp_posts\n    +-----------------------+---------------------+------+-----+---------------------+----------------+\n    |         Field         |        Type         | Null | Key |       Default       |     Extra      |\n    +-----------------------+---------------------+------+-----+---------------------+----------------+\n    | ID                    | bigint(20) unsigned | NO   | PRI |                     | auto_increment |\n    | post_author           | bigint(20) unsigned | NO   | MUL | 0                   |                |\n    | post_date             | datetime            | NO   |     | 0000-00-00 00:00:00 |                |\n    | post_date_gmt         | datetime            | NO   |     | 0000-00-00 00:00:00 |                |\n    | post_content          | longtext            | NO   |     |                     |                |\n    | post_title            | text                | NO   |     |                     |                |\n    | post_excerpt          | text                | NO   |     |                     |                |\n    | post_status           | varchar(20)         | NO   |     | publish             |                |\n    | comment_status        | varchar(20)         | NO   |     | open                |                |\n    | ping_status           | varchar(20)         | NO   |     | open                |                |\n    | post_password         | varchar(255)        | NO   |     |                     |                |\n    | post_name             | varchar(200)        | NO   | MUL |                     |                |\n    | to_ping               | text                | NO   |     |                     |                |\n    | pinged                | text                | NO   |     |                     |                |\n    | post_modified         | datetime            | NO   |     | 0000-00-00 00:00:00 |                |\n    | post_modified_gmt     | datetime            | NO   |     | 0000-00-00 00:00:00 |                |\n    | post_content_filtered | longtext            | NO   |     |                     |                |\n    | post_parent           | bigint(20) unsigned | NO   | MUL | 0                   |                |\n    | guid                  | varchar(255)        | NO   |     |                     |                |\n    | menu_order            | int(11)             | NO   |     | 0                   |                |\n    | post_type             | varchar(20)         | NO   | MUL | post                |                |\n    | post_mime_type        | varchar(100)        | NO   |     |                     |                |\n    | comment_count         | bigint(20)          | NO   |     | 0                   |                |\n    +-----------------------+---------------------+------+-----+---------------------+----------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<table> [--format]"},{"name":"create","description":"Creates a new database.","longdesc":"Runs `CREATE_DATABASE` SQL statement using `DB_HOST`, `DB_NAME`,\n`DB_USER` and `DB_PASSWORD` database credentials specified in\nwp-config.php.\n\n## OPTIONS\n\n[--dbuser=<value>]\n: Username to pass to mysql. Defaults to DB_USER.\n\n[--dbpass=<value>]\n: Password to pass to mysql. Defaults to DB_PASSWORD.\n\n[--defaults]\n: Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.\n\n## EXAMPLES\n\n    $ wp db create\n    Success: Database created.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--dbuser=<value>] [--dbpass=<value>] [--defaults]"},{"name":"drop","description":"Deletes the existing database.","longdesc":"Runs `DROP_DATABASE` SQL statement using `DB_HOST`, `DB_NAME`,\n`DB_USER` and `DB_PASSWORD` database credentials specified in\nwp-config.php.\n\n## OPTIONS\n\n[--dbuser=<value>]\n: Username to pass to mysql. Defaults to DB_USER.\n\n[--dbpass=<value>]\n: Password to pass to mysql. Defaults to DB_PASSWORD.\n\n[--yes]\n: Answer yes to the confirmation message.\n\n[--defaults]\n: Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.\n\n## EXAMPLES\n\n    $ wp db drop --yes\n    Success: Database dropped.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--dbuser=<value>] [--dbpass=<value>] [--yes] [--defaults]"},{"name":"export","description":"Exports the database to a file or to STDOUT.","longdesc":"Runs `mysqldump` utility using `DB_HOST`, `DB_NAME`, `DB_USER` and\n`DB_PASSWORD` database credentials specified in wp-config.php. Accepts any valid `mysqldump` flags.\n\n## OPTIONS\n\n[<file>]\n: The name of the SQL file to export. If '-', then outputs to STDOUT. If\nomitted, it will be '{dbname}-{Y-m-d}-{random-hash}.sql'.\n\n[--dbuser=<value>]\n: Username to pass to mysqldump. Defaults to DB_USER.\n\n[--dbpass=<value>]\n: Password to pass to mysqldump. Defaults to DB_PASSWORD.\n\n[--<field>=<value>]\n: Extra arguments to pass to mysqldump. [Refer to mysqldump docs](https:\/\/dev.mysql.com\/doc\/en\/mysqldump.html#mysqldump-option-summary).\n\n[--tables=<tables>]\n: The comma separated list of specific tables to export. Excluding this parameter will export all tables in the database.\n\n[--exclude_tables=<tables>]\n: The comma separated list of specific tables that should be skipped from exporting. Excluding this parameter will export all tables in the database.\n\n[--include-tablespaces]\n: Skips adding the default --no-tablespaces option to mysqldump.\n\n[--porcelain]\n: Output filename for the exported database.\n\n[--defaults]\n: Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.\n\n## EXAMPLES\n\n    # Export database with drop query included\n    $ wp db export --add-drop-table\n    Success: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n    # Export certain tables\n    $ wp db export --tables=wp_options,wp_users\n    Success: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n    # Export all tables matching a wildcard\n    $ wp db export --tables=$(wp db tables 'wp_user*' --format=csv)\n    Success: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n    # Export all tables matching prefix\n    $ wp db export --tables=$(wp db tables --all-tables-with-prefix --format=csv)\n    Success: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n    # Export certain posts without create table statements\n    $ wp db export --no-create-info=true --tables=wp_posts --where=\"ID in (100,101,102)\"\n    Success: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n    # Export relating meta for certain posts without create table statements\n    $ wp db export --no-create-info=true --tables=wp_postmeta --where=\"post_id in (100,101,102)\"\n    Success: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n    # Skip certain tables from the exported database\n    $ wp db export --exclude_tables=wp_options,wp_users\n    Success: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n    # Skip all tables matching a wildcard from the exported database\n    $ wp db export --exclude_tables=$(wp db tables 'wp_user*' --format=csv)\n    Success: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n    # Skip all tables matching prefix from the exported database\n    $ wp db export --exclude_tables=$(wp db tables --all-tables-with-prefix --format=csv)\n    Success: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n    # Export database to STDOUT.\n    $ wp db export -\n    -- MySQL dump 10.13  Distrib 5.7.19, for osx10.12 (x86_64)\n    --\n    -- Host: localhost    Database: wpdev\n    -- ------------------------------------------------------\n    -- Server version    5.7.19\n    ...\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<file>] [--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--tables=<tables>] [--exclude_tables=<tables>] [--include-tablespaces] [--porcelain] [--defaults]"},{"name":"import","description":"Imports a database from a file or from STDIN.","longdesc":"Runs SQL queries using `DB_HOST`, `DB_NAME`, `DB_USER` and\n`DB_PASSWORD` database credentials specified in wp-config.php. This\ndoes not create database by itself and only performs whatever tasks are\ndefined in the SQL.\n\n## OPTIONS\n\n[<file>]\n: The name of the SQL file to import. If '-', then reads from STDIN. If omitted, it will look for '{dbname}.sql'.\n\n[--dbuser=<value>]\n: Username to pass to mysql. Defaults to DB_USER.\n\n[--dbpass=<value>]\n: Password to pass to mysql. Defaults to DB_PASSWORD.\n\n[--<field>=<value>]\n: Extra arguments to pass to mysql. [Refer to mysql binary docs](https:\/\/dev.mysql.com\/doc\/refman\/8.0\/en\/mysql-command-options.html).\n\n[--skip-optimization]\n: When using an SQL file, do not include speed optimization such as disabling auto-commit and key checks.\n\n[--defaults]\n: Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.\n\n## EXAMPLES\n\n    # Import MySQL from a file.\n    $ wp db import wordpress_dbase.sql\n    Success: Imported from 'wordpress_dbase.sql'.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<file>] [--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--skip-optimization] [--defaults]"},{"name":"optimize","description":"Optimizes the database.","longdesc":"Runs `mysqlcheck` utility with `--optimize=true` using `DB_HOST`,\n`DB_NAME`, `DB_USER` and `DB_PASSWORD` database credentials\nspecified in wp-config.php.\n\n[See docs](http:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/optimize-table.html)\nfor more details on the `OPTIMIZE TABLE` statement.\n\n## OPTIONS\n\n[--dbuser=<value>]\n: Username to pass to mysqlcheck. Defaults to DB_USER.\n\n[--dbpass=<value>]\n: Password to pass to mysqlcheck. Defaults to DB_PASSWORD.\n\n[--<field>=<value>]\n: Extra arguments to pass to mysqlcheck. [Refer to mysqlcheck docs](https:\/\/dev.mysql.com\/doc\/en\/mysqlcheck.html).\n\n[--defaults]\n: Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.\n\n## EXAMPLES\n\n    $ wp db optimize\n    Success: Database optimized.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--defaults]"},{"name":"prefix","description":"Displays the database table prefix.","longdesc":"Display the database table prefix, as defined by the database handler's interpretation of the current site.\n\n## EXAMPLES\n\n    $ wp db prefix\n    wp_\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""},{"name":"query","description":"Executes a SQL query against the database.","longdesc":"Executes an arbitrary SQL query using `DB_HOST`, `DB_NAME`, `DB_USER`\n and `DB_PASSWORD` database credentials specified in wp-config.php.\n\n## OPTIONS\n\n[<sql>]\n: A SQL query. If not passed, will try to read from STDIN.\n\n[--dbuser=<value>]\n: Username to pass to mysql. Defaults to DB_USER.\n\n[--dbpass=<value>]\n: Password to pass to mysql. Defaults to DB_PASSWORD.\n\n[--<field>=<value>]\n: Extra arguments to pass to mysql. [Refer to mysql docs](https:\/\/dev.mysql.com\/doc\/en\/mysql-command-options.html).\n\n[--defaults]\n: Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.\n\n## EXAMPLES\n\n    # Execute a query stored in a file\n    $ wp db query < debug.sql\n\n    # Check all tables in the database\n    $ wp db query \"CHECK TABLE $(wp db tables | paste -s -d, -);\"\n    +---------------------------------------+-------+----------+----------+\n    | Table                                 | Op    | Msg_type | Msg_text |\n    +---------------------------------------+-------+----------+----------+\n    | wordpress_dbase.wp_users              | check | status   | OK       |\n    | wordpress_dbase.wp_usermeta           | check | status   | OK       |\n    | wordpress_dbase.wp_posts              | check | status   | OK       |\n    | wordpress_dbase.wp_comments           | check | status   | OK       |\n    | wordpress_dbase.wp_links              | check | status   | OK       |\n    | wordpress_dbase.wp_options            | check | status   | OK       |\n    | wordpress_dbase.wp_postmeta           | check | status   | OK       |\n    | wordpress_dbase.wp_terms              | check | status   | OK       |\n    | wordpress_dbase.wp_term_taxonomy      | check | status   | OK       |\n    | wordpress_dbase.wp_term_relationships | check | status   | OK       |\n    | wordpress_dbase.wp_termmeta           | check | status   | OK       |\n    | wordpress_dbase.wp_commentmeta        | check | status   | OK       |\n    +---------------------------------------+-------+----------+----------+\n\n    # Pass extra arguments through to MySQL\n    $ wp db query 'SELECT * FROM wp_options WHERE option_name=\"home\"' --skip-column-names\n    +---+------+------------------------------+-----+\n    | 2 | home | http:\/\/wordpress-develop.dev | yes |\n    +---+------+------------------------------+-----+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<sql>] [--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--defaults]"},{"name":"repair","description":"Repairs the database.","longdesc":"Runs `mysqlcheck` utility with `--repair=true` using `DB_HOST`,\n`DB_NAME`, `DB_USER` and `DB_PASSWORD` database credentials\nspecified in wp-config.php.\n\n[See docs](http:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/repair-table.html) for\nmore details on the `REPAIR TABLE` statement.\n\n## OPTIONS\n\n[--dbuser=<value>]\n: Username to pass to mysqlcheck. Defaults to DB_USER.\n\n[--dbpass=<value>]\n: Password to pass to mysqlcheck. Defaults to DB_PASSWORD.\n\n[--<field>=<value>]\n: Extra arguments to pass to mysqlcheck. [Refer to mysqlcheck docs](https:\/\/dev.mysql.com\/doc\/en\/mysqlcheck.html).\n\n[--defaults]\n: Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.\n\n## EXAMPLES\n\n    $ wp db repair\n    Success: Database repaired.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--defaults]"},{"name":"reset","description":"Removes all tables from the database.","longdesc":"Runs `DROP_DATABASE` and `CREATE_DATABASE` SQL statements using\n`DB_HOST`, `DB_NAME`, `DB_USER` and `DB_PASSWORD` database credentials\nspecified in wp-config.php.\n\n## OPTIONS\n\n[--dbuser=<value>]\n: Username to pass to mysql. Defaults to DB_USER.\n\n[--dbpass=<value>]\n: Password to pass to mysql. Defaults to DB_PASSWORD.\n\n[--yes]\n: Answer yes to the confirmation message.\n\n[--defaults]\n: Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.\n\n## EXAMPLES\n\n    $ wp db reset --yes\n    Success: Database reset.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--dbuser=<value>] [--dbpass=<value>] [--yes] [--defaults]"},{"name":"search","description":"Finds a string in the database.","longdesc":"Searches through all of the text columns in a selection of database tables for a given string, Outputs colorized references to the string.\n\nDefaults to searching through all tables registered to $wpdb. On multisite, this default is limited to the tables for the current site.\n\n## OPTIONS\n\n<search>\n: String to search for. The search is case-insensitive by default.\n\n[<tables>...]\n: One or more tables to search through for the string.\n\n[--network]\n: Search through all the tables registered to $wpdb in a multisite install.\n\n[--all-tables-with-prefix]\n: Search through all tables that match the registered table prefix, even if not registered on $wpdb. On one hand, sometimes plugins use tables without registering them to $wpdb. On another hand, this could return tables you don't expect. Overrides --network.\n\n[--all-tables]\n: Search through ALL tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides --network and --all-tables-with-prefix.\n\n[--before_context=<num>]\n: Number of characters to display before the match.\n---\ndefault: 40\n---\n\n[--after_context=<num>]\n: Number of characters to display after the match.\n---\ndefault: 40\n---\n\n[--regex]\n: Runs the search as a regular expression (without delimiters). The search becomes case-sensitive (i.e. no PCRE flags are added). Delimiters must be escaped if they occur in the expression. Because the search is run on individual columns, you can use the `^` and `$` tokens to mark the start and end of a match, respectively.\n\n[--regex-flags=<regex-flags>]\n: Pass PCRE modifiers to the regex search (e.g. 'i' for case-insensitivity).\n\n[--regex-delimiter=<regex-delimiter>]\n: The delimiter to use for the regex. It must be escaped if it appears in the search string. The default value is the result of `chr(1)`.\n\n[--table_column_once]\n: Output the 'table:column' line once before all matching row lines in the table column rather than before each matching row.\n\n[--one_line]\n: Place the 'table:column' output on the same line as the row id and match ('table:column:id:match'). Overrides --table_column_once.\n\n[--matches_only]\n: Only output the string matches (including context). No 'table:column's or row ids are outputted.\n\n[--stats]\n: Output stats on the number of matches found, time taken, tables\/columns\/rows searched, tables skipped.\n\n[--table_column_color=<color_code>]\n: Percent color code to use for the 'table:column' output. For a list of available percent color codes, see below. Default '%G' (bright green).\n\n[--id_color=<color_code>]\n: Percent color code to use for the row id output. For a list of available percent color codes, see below. Default '%Y' (bright yellow).\n\n[--match_color=<color_code>]\n: Percent color code to use for the match (unless both before and after context are 0, when no color code is used). For a list of available percent color codes, see below. Default '%3%k' (black on a mustard background).\n\nThe percent color codes available are:\n\n| Code | Color\n| ---- | -----\n|  %y  | Yellow (dark) (mustard)\n|  %g  | Green (dark)\n|  %b  | Blue (dark)\n|  %r  | Red (dark)\n|  %m  | Magenta (dark)\n|  %c  | Cyan (dark)\n|  %w  | White (dark) (light gray)\n|  %k  | Black\n|  %Y  | Yellow (bright)\n|  %G  | Green (bright)\n|  %B  | Blue (bright)\n|  %R  | Red (bright)\n|  %M  | Magenta (bright)\n|  %C  | Cyan (bright)\n|  %W  | White\n|  %K  | Black (bright) (dark gray)\n|  %3  | Yellow background (dark) (mustard)\n|  %2  | Green background (dark)\n|  %4  | Blue background (dark)\n|  %1  | Red background (dark)\n|  %5  | Magenta background (dark)\n|  %6  | Cyan background (dark)\n|  %7  | White background (dark) (light gray)\n|  %0  | Black background\n|  %8  | Reverse\n|  %U  | Underline\n|  %F  | Blink (unlikely to work)\n\nThey can be concatenated. For instance, the default match color of black on a mustard (dark yellow) background `%3%k` can be made black on a bright yellow background with `%Y%0%8`.\n\n## EXAMPLES\n\n    # Search through the database for the 'wordpress-develop' string\n    $ wp db search wordpress-develop\n    wp_options:option_value\n    1:http:\/\/wordpress-develop.dev\n    wp_options:option_value\n    1:https:\/\/example.com\/foo\n        ...\n\n    # Search through a multisite database on the subsite 'foo' for the 'example.com' string\n    $ wp db search example.com --url=example.com\/foo\n    wp_2_comments:comment_author_url\n    1:https:\/\/example.com\/\n    wp_2_options:option_value\n        ...\n\n    # Search through the database for the 'https?:\/\/' regular expression, printing stats.\n    $ wp db search 'https?:\/\/' --regex --stats\n    wp_comments:comment_author_url\n    1:https:\/\/wordpress.org\/\n        ...\n    Success: Found 99146 matches in 10.752s (10.559s searching). Searched 12 tables, 53 columns, 1358907 rows. 1 table skipped: wp_term_relationships.\n\n    # SQL search database table 'wp_options' where 'option_name' match 'foo'\n    wp db query 'SELECT * FROM wp_options WHERE option_name like \"%foo%\"' --skip-column-names\n    +----+--------------+--------------------------------+-----+\n    | 98 | foo_options  | a:1:{s:12:\"_multiwidget\";i:1;} | yes |\n    | 99 | foo_settings | a:0:{}                         | yes |\n    +----+--------------+--------------------------------+-----+\n\n    # SQL search and delete records from database table 'wp_options' where 'option_name' match 'foo'\n    wp db query \"DELETE from wp_options where option_id in ($(wp db query \"SELECT GROUP_CONCAT(option_id SEPARATOR ',') from wp_options where option_name like '%foo%';\" --silent --skip-column-names))\"\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<search> [<tables>...] [--network] [--all-tables-with-prefix] [--all-tables] [--before_context=<num>] [--after_context=<num>] [--regex] [--regex-flags=<regex-flags>] [--regex-delimiter=<regex-delimiter>] [--table_column_once] [--one_line] [--matches_only] [--stats] [--table_column_color=<color_code>] [--id_color=<color_code>] [--match_color=<color_code>]"},{"name":"size","description":"Displays the database name and size.","longdesc":"Display the database name and size for `DB_NAME` specified in wp-config.php.\nThe size defaults to a human-readable number.\n\nAvailable size formats include:\n* b (bytes)\n* kb (kilobytes)\n* mb (megabytes)\n* gb (gigabytes)\n* tb (terabytes)\n* B   (ISO Byte setting, with no conversion)\n* KB  (ISO Kilobyte setting, with 1 KB  = 1,000 B)\n* KiB (ISO Kibibyte setting, with 1 KiB = 1,024 B)\n* MB  (ISO Megabyte setting, with 1 MB  = 1,000 KB)\n* MiB (ISO Mebibyte setting, with 1 MiB = 1,024 KiB)\n* GB  (ISO Gigabyte setting, with 1 GB  = 1,000 MB)\n* GiB (ISO Gibibyte setting, with 1 GiB = 1,024 MiB)\n* TB  (ISO Terabyte setting, with 1 TB  = 1,000 GB)\n* TiB (ISO Tebibyte setting, with 1 TiB = 1,024 GiB)\n\n## OPTIONS\n\n[--size_format=<format>]\n: Display the database size only, as a bare number.\n---\noptions:\n  - b\n  - kb\n  - mb\n  - gb\n  - tb\n  - B\n  - KB\n  - KiB\n  - MB\n  - MiB\n  - GB\n  - GiB\n  - TB\n  - TiB\n---\n\n[--tables]\n: Display each table name and size instead of the database size.\n\n[--human-readable]\n: Display database sizes in human readable formats.\n\n[--format=<format>]\n: Render output in a particular format.\n---\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n[--scope=<scope>]\n: Can be all, global, ms_global, blog, or old tables. Defaults to all.\n\n[--network]\n: List all the tables in a multisite install.\n\n[--decimals=<decimals>]\n: Number of digits after decimal point. Defaults to 0.\n\n[--all-tables-with-prefix]\n: List all tables that match the table prefix even if not registered on $wpdb. Overrides --network.\n\n[--all-tables]\n: List all tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides --all-tables-with-prefix.\n\n[--order=<order>]\n: Ascending or Descending order.\n---\ndefault: asc\noptions:\n  - asc\n  - desc\n---\n\n[--orderby=<orderby>]\n: Order by fields.\n---\ndefault: name\noptions:\n  - name\n  - size\n---\n\n## EXAMPLES\n\n    $ wp db size\n    +-------------------+------+\n    | Name              | Size |\n    +-------------------+------+\n    | wordpress_default | 6 MB |\n    +-------------------+------+\n\n    $ wp db size --tables\n    +-----------------------+-------+\n    | Name                  | Size  |\n    +-----------------------+-------+\n    | wp_users              | 64 KB |\n    | wp_usermeta           | 48 KB |\n    | wp_posts              | 80 KB |\n    | wp_comments           | 96 KB |\n    | wp_links              | 32 KB |\n    | wp_options            | 32 KB |\n    | wp_postmeta           | 48 KB |\n    | wp_terms              | 48 KB |\n    | wp_term_taxonomy      | 48 KB |\n    | wp_term_relationships | 32 KB |\n    | wp_termmeta           | 48 KB |\n    | wp_commentmeta        | 48 KB |\n    +-----------------------+-------+\n\n    $ wp db size --size_format=b\n    5865472\n\n    $ wp db size --size_format=kb\n    5728\n\n    $ wp db size --size_format=mb\n    6\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--size_format=<format>] [--tables] [--human-readable] [--format=<format>] [--scope=<scope>] [--network] [--decimals=<decimals>] [--all-tables-with-prefix] [--all-tables] [--order=<order>] [--orderby=<orderby>]"},{"name":"tables","description":"Lists the database tables.","longdesc":"Defaults to all tables registered to the $wpdb database handler.\n\n## OPTIONS\n\n[<table>...]\n: List tables based on wildcard search, e.g. 'wp_*_options' or 'wp_post?'.\n\n[--scope=<scope>]\n: Can be all, global, ms_global, blog, or old tables. Defaults to all.\n\n[--network]\n: List all the tables in a multisite install.\n\n[--all-tables-with-prefix]\n: List all tables that match the table prefix even if not registered on $wpdb. Overrides --network.\n\n[--all-tables]\n: List all tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides --all-tables-with-prefix.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: list\noptions:\n  - list\n  - csv\n---\n\n## EXAMPLES\n\n    # List tables for a single site, without shared tables like 'wp_users'\n    $ wp db tables --scope=blog --url=sub.example.com\n    wp_3_posts\n    wp_3_comments\n    wp_3_options\n    wp_3_postmeta\n    wp_3_terms\n    wp_3_term_taxonomy\n    wp_3_term_relationships\n    wp_3_termmeta\n    wp_3_commentmeta\n\n    # Export only tables for a single site\n    $ wp db export --tables=$(wp db tables --url=sub.example.com --format=csv)\n    Success: Exported to wordpress_dbase.sql\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<table>...] [--scope=<scope>] [--network] [--all-tables-with-prefix] [--all-tables] [--format=<format>]"}]},{"name":"embed","description":"Inspects oEmbed providers, clears embed cache, and more.","longdesc":"\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"cache","description":"Finds, triggers, and deletes oEmbed caches.","longdesc":"\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"clear","description":"Deletes all oEmbed caches for a given post.","longdesc":"oEmbed caches for a post are stored in the post's metadata.\n\n## OPTIONS\n\n<post_id>\n: ID of the post to clear the cache for.\n\n## EXAMPLES\n\n    # Clear cache for a post\n    $ wp embed cache clear 123\n    Success: Cleared oEmbed cache.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<post_id>"},{"name":"find","description":"Finds an oEmbed cache post ID for a given URL.","longdesc":"Starting with WordPress 4.9, embeds that aren't associated with a specific post will be cached in\na new oembed_cache post type. There can be more than one such entry for a url depending on attributes and context.\n\nNot to be confused with oEmbed caches for a given post which are stored in the post's metadata.\n\n## OPTIONS\n\n<url>\n: URL to retrieve oEmbed data for.\n\n[--width=<width>]\n: Width of the embed in pixels. Part of cache key so must match. Defaults to `content_width` if set else 500px, so is theme and context dependent.\n\n[--height=<height>]\n: Height of the embed in pixels. Part of cache key so must match. Defaults to 1.5 * default width (`content_width` or 500px), to a maximum of 1000px.\n\n[--discover]\n: Whether to search with the discover attribute set or not. Part of cache key so must match. If not given, will search with attribute: unset, '1', '0', returning first.\n\n## EXAMPLES\n\n    # Find cache post ID for a given URL.\n    $ wp embed cache find https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ --width=500\n    123\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<url> [--width=<width>] [--height=<height>] [--discover]"},{"name":"trigger","description":"Triggers the caching of all oEmbed results for a given post.","longdesc":"oEmbed caches for a post are stored in the post's metadata.\n\n## OPTIONS\n\n<post_id>\n: ID of the post to do the caching for.\n\n## EXAMPLES\n\n    # Triggers cache for a post\n    $ wp embed cache trigger 456\n    Success: Caching triggered!\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<post_id>"}]},{"name":"fetch","description":"Attempts to convert a URL into embed HTML.","longdesc":"In non-raw mode, starts by checking the URL against the regex of the registered embed handlers.\nIf none of the regex matches and it's enabled, then the URL will be given to the WP_oEmbed class.\n\nIn raw mode, checks the providers directly and returns the data.\n\n## OPTIONS\n\n<url>\n: URL to retrieve oEmbed data for.\n\n[--width=<width>]\n: Width of the embed in pixels.\n\n[--height=<height>]\n: Height of the embed in pixels.\n\n[--post-id=<id>]\n: Cache oEmbed response for a given post.\n\n[--discover]\n: Enable oEmbed discovery. Defaults to true.\n\n[--skip-cache]\n: Ignore already cached oEmbed responses. Has no effect if using the 'raw' option, which doesn't use the cache.\n\n[--skip-sanitization]\n: Remove the filter that WordPress from 4.4 onwards uses to sanitize oEmbed responses. Has no effect if using the 'raw' option, which by-passes sanitization.\n\n[--do-shortcode]\n: If the URL is handled by a registered embed handler and returns a shortcode, do shortcode and return result. Has no effect if using the 'raw' option, which by-passes handlers.\n\n[--limit-response-size=<size>]\n: Limit the size of the resulting HTML when using discovery. Default 150 KB (the standard WordPress limit). Not compatible with 'no-discover'.\n\n[--raw]\n: Return the raw oEmbed response instead of the resulting HTML. Ignores the cache and does not sanitize responses or use registered embed handlers.\n\n[--raw-format=<json|xml>]\n: Render raw oEmbed data in a particular format. Defaults to json. Can only be specified in conjunction with the 'raw' option.\n---\noptions:\n  - json\n  - xml\n---\n\n## EXAMPLES\n\n    # Get embed HTML for a given URL.\n    $ wp embed fetch https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\n    <iframe width=\"525\" height=\"295\" src=\"https:\/\/www.youtube.com\/embed\/dQw4w9WgXcQ?feature=oembed\" ...\n\n    # Get raw oEmbed data for a given URL.\n    $ wp embed fetch https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ --raw\n    {\"author_url\":\"https:\\\/\\\/www.youtube.com\\\/user\\\/RickAstleyVEVO\",\"width\":525,\"version\":\"1.0\", ...\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<url> [--width=<width>] [--height=<height>] [--post-id=<id>] [--discover] [--skip-cache] [--skip-sanitization] [--do-shortcode] [--limit-response-size=<size>] [--raw] [--raw-format=<json|xml>]"},{"name":"handler","description":"Retrieves embed handlers.","longdesc":"\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"list","description":"Lists all available embed handlers.","longdesc":"## OPTIONS\n\n[--field=<field>]\n: Display the value of a single field\n\n[--fields=<fields>]\n: Limit the output to specific fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each handler:\n\n* id\n* regex\n\nThese fields are optionally available:\n\n* callback\n* priority\n\n## EXAMPLES\n\n    # List id,regex,priority fields of available handlers.\n    $ wp embed handler list --fields=priority,id\n    +----------+-------------------+\n    | priority | id                |\n    +----------+-------------------+\n    | 10       | youtube_embed_url |\n    | 9999     | audio             |\n    | 9999     | video             |\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--field=<field>] [--fields=<fields>] [--format=<format>]"}]},{"name":"provider","description":"Retrieves oEmbed providers.","longdesc":"\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"list","description":"Lists all available oEmbed providers.","longdesc":"## OPTIONS\n\n[--field=<field>]\n: Display the value of a single field\n\n[--fields=<fields>]\n: Limit the output to specific fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n---\n\n[--force-regex]\n: Turn the asterisk-type provider URLs into regexes.\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each provider:\n\n* format\n* endpoint\n\nThis field is optionally available:\n\n* regex\n\n## EXAMPLES\n\n    # List format,endpoint fields of available providers.\n    $ wp embed provider list --fields=format,endpoint\n    +------------------------------+-----------------------------------------+\n    | format                       | endpoint                                |\n    +------------------------------+-----------------------------------------+\n    | #https?:\/\/youtu\\.be\/.*#i     | https:\/\/www.youtube.com\/oembed          |\n    | #https?:\/\/flic\\.kr\/.*#i      | https:\/\/www.flickr.com\/services\/oembed\/ |\n    | #https?:\/\/wordpress\\.tv\/.*#i | https:\/\/wordpress.tv\/oembed\/            |\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--field=<field>] [--fields=<fields>] [--format=<format>] [--force-regex]"},{"name":"match","description":"Gets the matching provider for a given URL.","longdesc":"## OPTIONS\n\n<url>\n: URL to retrieve provider for.\n\n[--discover]\n: Whether to use oEmbed discovery or not. Defaults to true.\n\n[--limit-response-size=<size>]\n: Limit the size of the resulting HTML when using discovery. Default 150 KB (the standard WordPress limit). Not compatible with 'no-discover'.\n\n[--link-type=<json|xml>]\n: Whether to accept only a certain link type when using discovery. Defaults to any (json or xml), preferring json. Not compatible with 'no-discover'.\n---\noptions:\n  - json\n  - xml\n---\n\n## EXAMPLES\n\n    # Get the matching provider for the URL.\n    $ wp embed provider match https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\n    https:\/\/www.youtube.com\/oembed\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<url> [--discover] [--limit-response-size=<size>] [--link-type=<json|xml>]"}]}]},{"name":"eval","description":"Executes arbitrary PHP code.","longdesc":"Note: because code is executed within a method, global variables need\nto be explicitly globalized.\n\n## OPTIONS\n\n<php-code>\n: The code to execute, as a string.\n\n[--skip-wordpress]\n: Execute code without loading WordPress.\n\n## EXAMPLES\n\n    # Display WordPress content directory.\n    $ wp eval 'echo WP_CONTENT_DIR;'\n    \/var\/www\/wordpress\/wp-content\n\n    # Generate a random number.\n    $ wp eval 'echo rand();' --skip-wordpress\n    479620423\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<php-code> [--skip-wordpress]"},{"name":"eval-file","description":"Loads and executes a PHP file.","longdesc":"Note: because code is executed within a method, global variables need\nto be explicitly globalized.\n\n## OPTIONS\n\n<file>\n: The path to the PHP file to execute.  Use '-' to run code from STDIN.\n\n[<arg>...]\n: One or more arguments to pass to the file. They are placed in the $args variable.\n\n[--skip-wordpress]\n: Load and execute file without loading WordPress.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<file> [<arg>...] [--skip-wordpress]"},{"name":"export","description":"Exports WordPress content to a WXR file.","longdesc":"Generates one or more WXR files containing authors, terms, posts,\ncomments, and attachments. WXR files do not include site configuration\n(options) or the attachment files themselves.\n\n## OPTIONS\n\n[--dir=<dirname>]\n: Full path to directory where WXR export files should be stored. Defaults\nto current working directory.\n\n[--stdout]\n: Output the whole XML using standard output (incompatible with --dir=)\n\n[--skip_comments]\n: Don't include comments in the WXR export file.\n\n[--max_file_size=<MB>]\n: A single export file should have this many megabytes. -1 for unlimited.\n---\ndefault: 15\n---\n\n## FILTERS\n\n[--start_date=<date>]\n: Export only posts published after this date, in format YYYY-MM-DD.\n\n[--end_date=<date>]\n: Export only posts published before this date, in format YYYY-MM-DD.\n\n[--post_type=<post-type>]\n: Export only posts with this post_type. Separate multiple post types with a\ncomma.\n---\ndefault: any\n---\n\n[--post_type__not_in=<post-type>]\n: Export all post types except those identified. Separate multiple post types\nwith a comma. Defaults to none.\n\n[--post__in=<pid>]\n: Export all posts specified as a comma- or space-separated list of IDs.\nPost's attachments won't be exported unless --with_attachments is specified.\n\n[--with_attachments]\n: Force including attachments in case --post__in has been specified.\n\n[--start_id=<pid>]\n: Export only posts with IDs greater than or equal to this post ID.\n\n[--max_num_posts=<num>]\n: Export no more than <num> posts (excluding attachments).\n\n[--author=<author>]\n: Export only posts by this author. Can be either user login or user ID.\n\n[--category=<name|id>]\n: Export only posts in this category.\n\n[--post_status=<status>]\n: Export only posts with this status.\n\n[--filename_format=<format>]\n: Use a custom format for export filenames. Defaults to '{site}.wordpress.{date}.{n}.xml'.\n\n## EXAMPLES\n\n    # Export posts published by the user between given start and end date\n    $ wp export --dir=\/tmp\/ --user=admin --post_type=post --start_date=2011-01-01 --end_date=2011-12-31\n    Starting export process...\n    Writing to file \/tmp\/staging.wordpress.2016-05-24.000.xml\n    Success: All done with export.\n\n    # Export posts by IDs\n    $ wp export --dir=\/tmp\/ --post__in=123,124,125\n    Starting export process...\n    Writing to file \/tmp\/staging.wordpress.2016-05-24.000.xml\n    Success: All done with export.\n\n    # Export a random subset of content\n    $ wp export --post__in=\"$(wp post list --post_type=post --orderby=rand --posts_per_page=8 --format=ids)\"\n    Starting export process...\n    Writing to file \/var\/www\/example.com\/public_html\/staging.wordpress.2016-05-24.000.xml\n    Success: All done with export.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--dir=<dirname>] [--stdout] [--skip_comments] [--max_file_size=<MB>] [--start_date=<date>] [--end_date=<date>] [--post_type=<post-type>] [--post_type__not_in=<post-type>] [--post__in=<pid>] [--with_attachments] [--start_id=<pid>] [--max_num_posts=<num>] [--author=<author>] [--category=<name|id>] [--post_status=<status>] [--filename_format=<format>]"},{"name":"help","description":"Gets help on WP-CLI, or on a specific command.","longdesc":"## OPTIONS\n\n[<command>...]\n: Get help on a specific command.\n\n## EXAMPLES\n\n    # get help for `core` command\n    wp help core\n\n    # get help for `core download` subcommand\n    wp help core download\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<command>...]"},{"name":"i18n","description":"Provides internationalization tools for WordPress projects.","longdesc":"## EXAMPLES\n\n    # Create a POT file for the WordPress plugin\/theme in the current directory\n    $ wp i18n make-pot . languages\/my-plugin.pot\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"make-json","description":"Extract JavaScript strings from PO files and add them to individual JSON files.","longdesc":"For JavaScript internationalization purposes, WordPress requires translations to be split up into\none Jed-formatted JSON file per JavaScript source file.\n\nSee https:\/\/make.wordpress.org\/core\/2018\/11\/09\/new-javascript-i18n-support-in-wordpress\/ to learn more\nabout WordPress JavaScript internationalization.\n\n## OPTIONS\n\n<source>\n: Path to an existing PO file or a directory containing multiple PO files.\n\n[<destination>]\n: Path to the destination directory for the resulting JSON files. Defaults to the source directory.\n\n[--purge]\n: Whether to purge the strings that were extracted from the original source file. Defaults to true, use `--no-purge` to skip the removal.\n\n[--update-mo-files]\n: Whether MO files should be updated as well after updating PO files.\nOnly has an effect when used in combination with `--purge`.\n\n[--pretty-print]\n: Pretty-print resulting JSON files.\n\n[--use-map=<paths_or_maps>]\n: Whether to use a mapping file for the strings, as a JSON value, array to specify multiple.\nEach element can either be a string (file path) or object (map).\n\n## EXAMPLES\n\n    # Create JSON files for all PO files in the languages directory\n    $ wp i18n make-json languages\n\n    # Create JSON files for my-plugin-de_DE.po and leave the PO file untouched.\n    $ wp i18n make-json my-plugin-de_DE.po \/tmp --no-purge\n\n    # Create JSON files with mapping\n    $ wp i18n make-json languages --use-map=build\/map.json\n\n    # Create JSON files with multiple mappings\n    $ wp i18n make-json languages '--use-map=[\"build\/map.json\",\"build\/map2.json\"]'\n\n    # Create JSON files with object mapping\n    $ wp i18n make-json languages '--use-map={\"source\/index.js\":\"build\/index.js\"}'\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<source> [<destination>] [--purge] [--update-mo-files] [--pretty-print] [--use-map=<paths_or_maps>]"},{"name":"make-mo","description":"Create MO files from PO files.","longdesc":"## OPTIONS\n\n<source>\n: Path to an existing PO file or a directory containing multiple PO files.\n\n[<destination>]\n: Path to the destination directory for the resulting MO files. Defaults to the source directory.\n\n## EXAMPLES\n\n    # Create MO files for all PO files in the current directory.\n    $ wp i18n make-mo .\n\n    # Create a MO file from a single PO file in a specific directory.\n    $ wp i18n make-mo example-plugin-de_DE.po languages\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<source> [<destination>]"},{"name":"make-pot","description":"Create a POT file for a WordPress project.","longdesc":"Scans PHP, Blade-PHP and JavaScript files for translatable strings, as well as theme stylesheets and plugin files\nif the source directory is detected as either a plugin or theme.\n\n## OPTIONS\n\n<source>\n: Directory to scan for string extraction.\n\n[<destination>]\n: Name of the resulting POT file.\n\n[--slug=<slug>]\n: Plugin or theme slug. Defaults to the source directory's basename.\n\n[--domain=<domain>]\n: Text domain to look for in the source code, unless the `--ignore-domain` option is used.\nBy default, the \"Text Domain\" header of the plugin or theme is used.\nIf none is provided, it falls back to the project slug.\n\n[--ignore-domain]\n: Ignore the text domain completely and extract strings with any text domain.\n\n[--merge[=<paths>]]\n: Comma-separated list of POT files whose contents should be merged with the extracted strings.\nIf left empty, defaults to the destination POT file. POT file headers will be ignored.\n\n[--subtract=<paths>]\n: Comma-separated list of POT files whose contents should act as some sort of denylist for string extraction.\nAny string which is found on that denylist will not be extracted.\nThis can be useful when you want to create multiple POT files from the same source directory with slightly\ndifferent content and no duplicate strings between them.\n\n[--subtract-and-merge]\n: Whether source code references and comments from the generated POT file should be instead added to the POT file\nused for subtraction. Warning: this modifies the files passed to `--subtract`!\n\n[--include=<paths>]\n: Comma-separated list of files and paths that should be used for string extraction.\nIf provided, only these files and folders will be taken into account for string extraction.\nFor example, `--include=\"src,my-file.php` will ignore anything besides `my-file.php` and files in the `src`\ndirectory. Simple glob patterns can be used, i.e. `--include=foo-*.php` includes any PHP file with the `foo-`\nprefix. Leading and trailing slashes are ignored, i.e. `\/my\/directory\/` is the same as `my\/directory`.\n\n[--exclude=<paths>]\n: Comma-separated list of files and paths that should be skipped for string extraction.\nFor example, `--exclude=\".github,myfile.php` would ignore any strings found within `myfile.php` or the `.github`\nfolder. Simple glob patterns can be used, i.e. `--exclude=foo-*.php` excludes any PHP file with the `foo-`\nprefix. Leading and trailing slashes are ignored, i.e. `\/my\/directory\/` is the same as `my\/directory`. The\nfollowing files and folders are always excluded: node_modules, .git, .svn, .CVS, .hg, vendor, *.min.js.\n\n[--headers=<headers>]\n: Array in JSON format of custom headers which will be added to the POT file. Defaults to empty array.\n\n[--location]\n: Whether to write `#: filename:line` lines.\nDefaults to true, use `--no-location` to skip the removal.\nNote that disabling this option makes it harder for technically skilled translators to understand each message\u2019s context.\n\n[--skip-js]\n: Skips JavaScript string extraction. Useful when this is done in another build step, e.g. through Babel.\n\n[--skip-php]\n: Skips PHP string extraction.\n\n[--skip-blade]\n: Skips Blade-PHP string extraction.\n\n[--skip-block-json]\n: Skips string extraction from block.json files.\n\n[--skip-theme-json]\n: Skips string extraction from theme.json files.\n\n[--skip-audit]\n: Skips string audit where it tries to find possible mistakes in translatable strings. Useful when running in an\nautomated environment.\n\n[--file-comment=<file-comment>]\n: String that should be added as a comment to the top of the resulting POT file.\nBy default, a copyright comment is added for WordPress plugins and themes in the following manner:\n\n     ```\n     Copyright (C) 2018 Example Plugin Author\n     This file is distributed under the same license as the Example Plugin package.\n     ```\n\n     If a plugin or theme specifies a license in their main plugin file or stylesheet, the comment looks like\n     this:\n\n     ```\n     Copyright (C) 2018 Example Plugin Author\n     This file is distributed under the GPLv2.\n     ```\n\n[--package-name=<name>]\n: Name to use for package name in the resulting POT file's `Project-Id-Version` header.\nOverrides plugin or theme name, if applicable.\n\n## EXAMPLES\n\n    # Create a POT file for the WordPress plugin\/theme in the current directory\n    $ wp i18n make-pot . languages\/my-plugin.pot\n\n    # Create a POT file for the continents and cities list in WordPress core.\n    $ wp i18n make-pot . continents-and-cities.pot --include=\"wp-admin\/includes\/continents-cities.php\"\n    --ignore-domain\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<source> [<destination>] [--slug=<slug>] [--domain=<domain>] [--ignore-domain] [--merge[=<paths>]] [--subtract=<paths>] [--subtract-and-merge] [--include=<paths>] [--exclude=<paths>] [--headers=<headers>] [--location] [--skip-js] [--skip-php] [--skip-blade] [--skip-block-json] [--skip-theme-json] [--skip-audit] [--file-comment=<file-comment>] [--package-name=<name>]"},{"name":"update-po","description":"Update PO files from a POT file.","longdesc":"This behaves similarly to the [msgmerge](https:\/\/www.gnu.org\/software\/gettext\/manual\/html_node\/msgmerge-Invocation.html) command.\n\n## OPTIONS\n\n<source>\n: Path to an existing POT file to use for updating\n\n[<destination>]\n: PO file to update or a directory containing multiple PO files.\n  Defaults to all PO files in the source directory.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<source> [<destination>]"}]},{"name":"import","description":"Imports content from a given WXR file.","longdesc":"Provides a command line interface to the WordPress Importer plugin, for\nperforming data migrations.\n\n## OPTIONS\n\n<file>...\n: Path to one or more valid WXR files for importing. Directories are also accepted.\n\n--authors=<authors>\n: How the author mapping should be handled. Options are 'create', 'mapping.csv', or 'skip'. The first will create any non-existent users from the WXR file. The second will read author mapping associations from a CSV, or create a CSV for editing if the file path doesn't exist. The CSV requires two columns, and a header row like \"old_user_login,new_user_login\". The last option will skip any author mapping.\n\n[--skip=<data-type>]\n: Skip importing specific data. Supported options are: 'attachment' and 'image_resize' (skip time-consuming thumbnail generation).\n\n## EXAMPLES\n\n    # Import content from a WXR file\n    $ wp import example.wordpress.2016-06-21.xml --authors=create\n    Starting the import process...\n    Processing post #1 (\"Hello world!\") (post_type: post)\n    -- 1 of 1\n    -- Tue, 21 Jun 2016 05:31:12 +0000\n    -- Imported post as post_id #1\n    Success: Finished importing from 'example.wordpress.2016-06-21.xml' file.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<file>... --authors=<authors> [--skip=<data-type>]"},{"name":"language","description":"Installs, activates, and manages language packs.","longdesc":"## EXAMPLES\n\n    # Install the Dutch core language pack.\n    $ wp language core install nl_NL\n    Success: Language installed.\n\n    # Activate the Dutch core language pack.\n    $ wp language core activate nl_NL\n    Success: Language activated.\n\n    # Install the Dutch language pack for Twenty Seventeen.\n    $ wp language theme install twentyseventeen nl_NL\n    Success: Language installed.\n\n    # Install the Dutch language pack for Akismet.\n    $ wp language plugin install akismet nl_NL\n    Success: Language installed.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"core","description":"Installs, activates, and manages core language packs.","longdesc":"## EXAMPLES\n\n    # Install the Dutch core language pack.\n    $ wp language core install nl_NL\n    Success: Language installed.\n\n    # Activate the Dutch core language pack.\n    $ wp language core activate nl_NL\n    Success: Language activated.\n\n    # Uninstall the Dutch core language pack.\n    $ wp language core uninstall nl_NL\n    Success: Language uninstalled.\n\n    # List installed core language packages.\n    $ wp language core list --status=installed\n    +----------+--------------+-------------+-----------+-----------+---------------------+\n    | language | english_name | native_name | status    | update    | updated             |\n    +----------+--------------+-------------+-----------+-----------+---------------------+\n    | nl_NL    | Dutch        | Nederlands  | installed | available | 2016-05-13 08:12:50 |\n    +----------+--------------+-------------+-----------+-----------+---------------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"activate","description":"Activates a given language.","longdesc":"## OPTIONS\n\n<language>\n: Language code to activate.\n\n## EXAMPLES\n\n    $ wp language core activate ja\n    Success: Language activated.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<language>"},{"name":"install","description":"Installs a given language.","longdesc":"Downloads the language pack from WordPress.org.\n\n## OPTIONS\n\n<language>...\n: Language code to install.\n\n[--activate]\n: If set, the language will be activated immediately after install.\n\n## EXAMPLES\n\n    # Install the Japanese language.\n    $ wp language core install ja\n    Downloading translation from https:\/\/downloads.wordpress.org\/translation\/core\/4.9.8\/ja.zip...\n    Unpacking the update...\n    Installing the latest version...\n    Translation updated successfully.\n    Language 'ja' installed.\n    Success: Installed 1 of 1 languages.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<language>... [--activate]"},{"name":"is-installed","description":"Checks if a given language is installed.","longdesc":"Returns exit code 0 when installed, 1 when uninstalled.\n\n## OPTIONS\n\n<language>\n: The language code to check.\n\n## EXAMPLES\n\n    # Check whether the German language is installed; exit status 0 if installed, otherwise 1.\n    $ wp language core is-installed de_DE\n    $ echo $?\n    1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<language>"},{"name":"list","description":"Lists all available languages.","longdesc":"## OPTIONS\n\n[--field=<field>]\n: Display the value of a single field\n\n[--<field>=<value>]\n: Filter results by key=value pairs.\n\n[--fields=<fields>]\n: Limit the output to specific fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each translation:\n\n* language\n* english_name\n* native_name\n* status\n* update\n* updated\n\n## EXAMPLES\n\n    # List language,english_name,status fields of available languages.\n    $ wp language core list --fields=language,english_name,status\n    +----------------+-------------------------+-------------+\n    | language       | english_name            | status      |\n    +----------------+-------------------------+-------------+\n    | ar             | Arabic                  | uninstalled |\n    | ary            | Moroccan Arabic         | uninstalled |\n    | az             | Azerbaijani             | uninstalled |\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--field=<field>] [--<field>=<value>] [--fields=<fields>] [--format=<format>]"},{"name":"uninstall","description":"Uninstalls a given language.","longdesc":"## OPTIONS\n\n<language>...\n: Language code to uninstall.\n\n## EXAMPLES\n\n    $ wp language core uninstall ja\n    Success: Language uninstalled.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<language>..."},{"name":"update","description":"Updates installed languages for core.","longdesc":"## OPTIONS\n\n[--dry-run]\n: Preview which translations would be updated.\n\n## EXAMPLES\n\n    $ wp language core update\n    Updating 'Japanese' translation for WordPress 4.9.2...\n    Downloading translation from https:\/\/downloads.wordpress.org\/translation\/core\/4.9.2\/ja.zip...\n    Translation updated successfully.\n    Success: Updated 1\/1 translation.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--dry-run]"}]},{"name":"plugin","description":"Installs, activates, and manages plugin language packs.","longdesc":"## EXAMPLES\n\n    # Install the Dutch plugin language pack.\n    $ wp language plugin install hello-dolly nl_NL\n    Success: Language installed.\n\n    # Uninstall the Dutch plugin language pack.\n    $ wp language plugin uninstall hello-dolly nl_NL\n    Success: Language uninstalled.\n\n    # List installed plugin language packages.\n    $ wp language plugin list --status=installed\n    +----------+--------------+-------------+-----------+-----------+---------------------+\n    | language | english_name | native_name | status    | update    | updated             |\n    +----------+--------------+-------------+-----------+-----------+---------------------+\n    | nl_NL    | Dutch        | Nederlands  | installed | available | 2016-05-13 08:12:50 |\n    +----------+--------------+-------------+-----------+-----------+---------------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"install","description":"Installs a given language for a plugin.","longdesc":"Downloads the language pack from WordPress.org.\n\n## OPTIONS\n\n[<plugin>]\n: Plugin to install language for.\n\n[--all]\n: If set, languages for all plugins will be installed.\n\n<language>...\n: Language code to install.\n\n[--format=<format>]\n: Render output in a particular format. Used when installing languages for all plugins.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - summary\n---\n\n## EXAMPLES\n\n    # Install the Japanese language for Akismet.\n    $ wp language plugin install akismet ja\n    Downloading translation from https:\/\/downloads.wordpress.org\/translation\/plugin\/akismet\/4.0.3\/ja.zip...\n    Unpacking the update...\n    Installing the latest version...\n    Translation updated successfully.\n    Language 'ja' installed.\n    Success: Installed 1 of 1 languages.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>] [--all] <language>... [--format=<format>]"},{"name":"is-installed","description":"Checks if a given language is installed.","longdesc":"Returns exit code 0 when installed, 1 when uninstalled.\n\n## OPTIONS\n\n<plugin>\n: Plugin to check for.\n\n<language>...\n: The language code to check.\n\n## EXAMPLES\n\n    # Check whether the German language is installed for Akismet; exit status 0 if installed, otherwise 1.\n    $ wp language plugin is-installed akismet de_DE\n    $ echo $?\n    1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<plugin> <language>..."},{"name":"list","description":"Lists all available languages for one or more plugins.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to list languages for.\n\n[--all]\n: If set, available languages for all plugins will be listed.\n\n[--field=<field>]\n: Display the value of a single field.\n\n[--<field>=<value>]\n: Filter results by key=value pairs.\n\n[--fields=<fields>]\n: Limit the output to specific fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each translation:\n\n* plugin\n* language\n* english_name\n* native_name\n* status\n* update\n* updated\n\n## EXAMPLES\n\n    # List language,english_name,status fields of available languages.\n    $ wp language plugin list --fields=language,english_name,status\n    +----------------+-------------------------+-------------+\n    | language       | english_name            | status      |\n    +----------------+-------------------------+-------------+\n    | ar             | Arabic                  | uninstalled |\n    | ary            | Moroccan Arabic         | uninstalled |\n    | az             | Azerbaijani             | uninstalled |\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>...] [--all] [--field=<field>] [--<field>=<value>] [--fields=<fields>] [--format=<format>]"},{"name":"uninstall","description":"Uninstalls a given language for a plugin.","longdesc":"## OPTIONS\n\n<plugin>\n: Plugin to uninstall language for.\n\n<language>...\n: Language code to uninstall.\n\n## EXAMPLES\n\n    $ wp language plugin uninstall hello-dolly ja\n    Success: Language uninstalled.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<plugin> <language>..."},{"name":"update","description":"Updates installed languages for one or more plugins.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to update languages for.\n\n[--all]\n: If set, languages for all plugins will be updated.\n\n[--dry-run]\n: Preview which translations would be updated.\n\n## EXAMPLES\n\n    $ wp language plugin update --all\n    Updating 'Japanese' translation for Akismet 3.1.11...\n    Downloading translation from https:\/\/downloads.wordpress.org\/translation\/plugin\/akismet\/3.1.11\/ja.zip...\n    Translation updated successfully.\n    Success: Updated 1\/1 translation.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>...] [--all] [--dry-run]"}]},{"name":"theme","description":"Installs, activates, and manages theme language packs.","longdesc":"## EXAMPLES\n\n    # Install the Dutch theme language pack.\n    $ wp language theme install twentyten nl_NL\n    Success: Language installed.\n\n    # Uninstall the Dutch theme language pack.\n    $ wp language theme uninstall twentyten nl_NL\n    Success: Language uninstalled.\n\n    # List installed theme language packages.\n    $ wp language theme list --status=installed\n    +----------+--------------+-------------+-----------+-----------+---------------------+\n    | language | english_name | native_name | status    | update    | updated             |\n    +----------+--------------+-------------+-----------+-----------+---------------------+\n    | nl_NL    | Dutch        | Nederlands  | installed | available | 2016-05-13 08:12:50 |\n    +----------+--------------+-------------+-----------+-----------+---------------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"install","description":"Installs a given language for a theme.","longdesc":"Downloads the language pack from WordPress.org.\n\n## OPTIONS\n\n[<theme>]\n: Theme to install language for.\n\n[--all]\n: If set, languages for all themes will be installed.\n\n<language>...\n: Language code to install.\n\n[--format=<format>]\n: Render output in a particular format. Used when installing languages for all themes.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - summary\n---\n\n## EXAMPLES\n\n    # Install the Japanese language for Twenty Seventeen.\n    $ wp language theme install twentyseventeen ja\n    Downloading translation from https:\/\/downloads.wordpress.org\/translation\/theme\/twentyseventeen\/1.3\/ja.zip...\n    Unpacking the update...\n    Installing the latest version...\n    Translation updated successfully.\n    Language 'ja' installed.\n    Success: Installed 1 of 1 languages.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<theme>] [--all] <language>... [--format=<format>]"},{"name":"is-installed","description":"Checks if a given language is installed.","longdesc":"Returns exit code 0 when installed, 1 when uninstalled.\n\n## OPTIONS\n\n<theme>\n: Theme to check for.\n\n<language>...\n: The language code to check.\n\n## EXAMPLES\n\n    # Check whether the German language is installed for Twenty Seventeen; exit status 0 if installed, otherwise 1.\n    $ wp language theme is-installed twentyseventeen de_DE\n    $ echo $?\n    1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<theme> <language>..."},{"name":"list","description":"Lists all available languages for one or more themes.","longdesc":"## OPTIONS\n\n[<theme>...]\n: One or more themes to list languages for.\n\n[--all]\n: If set, available languages for all themes will be listed.\n\n[--field=<field>]\n: Display the value of a single field.\n\n[--<field>=<value>]\n: Filter results by key=value pairs.\n\n[--fields=<fields>]\n: Limit the output to specific fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each translation:\n\n* theme\n* language\n* english_name\n* native_name\n* status\n* update\n* updated\n\n## EXAMPLES\n\n    # List language,english_name,status fields of available languages.\n    $ wp language theme list --fields=language,english_name,status\n    +----------------+-------------------------+-------------+\n    | language       | english_name            | status      |\n    +----------------+-------------------------+-------------+\n    | ar             | Arabic                  | uninstalled |\n    | ary            | Moroccan Arabic         | uninstalled |\n    | az             | Azerbaijani             | uninstalled |\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<theme>...] [--all] [--field=<field>] [--<field>=<value>] [--fields=<fields>] [--format=<format>]"},{"name":"uninstall","description":"Uninstalls a given language for a theme.","longdesc":"## OPTIONS\n\n<theme>\n: Theme to uninstall language for.\n\n<language>...\n: Language code to uninstall.\n\n## EXAMPLES\n\n    $ wp language theme uninstall twentyten ja\n    Success: Language uninstalled.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<theme> <language>..."},{"name":"update","description":"Updates installed languages for one or more themes.","longdesc":"## OPTIONS\n\n[<theme>...]\n: One or more themes to update languages for.\n\n[--all]\n: If set, languages for all themes will be updated.\n\n[--dry-run]\n: Preview which translations would be updated.\n\n## EXAMPLES\n\n    $ wp language theme update --all\n    Updating 'Japanese' translation for Twenty Fifteen 1.5...\n    Downloading translation from https:\/\/downloads.wordpress.org\/translation\/theme\/twentyfifteen\/1.5\/ja.zip...\n    Translation updated successfully.\n    Success: Updated 1\/1 translation.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<theme>...] [--all] [--dry-run]"}]}]},{"name":"maintenance-mode","description":"Activates, deactivates or checks the status of the maintenance mode of a site.","longdesc":"## EXAMPLES\n\n    # Activate Maintenance mode.\n    $ wp maintenance-mode activate\n    Enabling Maintenance mode...\n    Success: Activated Maintenance mode.\n\n    # Deactivate Maintenance mode.\n    $ wp maintenance-mode deactivate\n    Disabling Maintenance mode...\n    Success: Deactivated Maintenance mode.\n\n    # Display Maintenance mode status.\n    $ wp maintenance-mode status\n    Maintenance mode is active.\n\n    # Get Maintenance mode status for scripting purpose.\n    $ wp maintenance-mode is-active\n    $ echo $?\n    1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"activate","description":"Activates maintenance mode.","longdesc":"[--force]\n: Force maintenance mode activation operation.\n\n## EXAMPLES\n\n    $ wp maintenance-mode activate\n    Enabling Maintenance mode...\n    Success: Activated Maintenance mode.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--force]"},{"name":"deactivate","description":"Deactivates maintenance mode.","longdesc":"## EXAMPLES\n\n    $ wp maintenance-mode deactivate\n    Disabling Maintenance mode...\n    Success: Deactivated Maintenance mode.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""},{"name":"is-active","description":"Detects maintenance mode status.","longdesc":"## EXAMPLES\n\n    $ wp maintenance-mode is-active\n    $ echo $?\n    1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""},{"name":"status","description":"Displays maintenance mode status.","longdesc":"## EXAMPLES\n\n    $ wp maintenance-mode status\n    Maintenance mode is active.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""}]},{"name":"media","description":"Imports files as attachments, regenerates thumbnails, or lists registered image sizes.","longdesc":"## EXAMPLES\n\n    # Re-generate all thumbnails, without confirmation.\n    $ wp media regenerate --yes\n    Found 3 images to regenerate.\n    1\/3 Regenerated thumbnails for \"Sydney Harbor Bridge\" (ID 760).\n    2\/3 Regenerated thumbnails for \"Boardwalk\" (ID 757).\n    3\/3 Regenerated thumbnails for \"Sunburst Over River\" (ID 756).\n    Success: Regenerated 3 of 3 images.\n\n    # Import a local image and set it to be the featured image for a post.\n    $ wp media import ~\/Downloads\/image.png --post_id=123 --title=\"A downloaded picture\" --featured_image\n    Success: Imported file '\/home\/person\/Downloads\/image.png' as attachment ID 1753 and attached to post 123 as featured image.\n\n    # List all registered image sizes\n    $ wp media image-size\n    +---------------------------+-------+--------+-------+\n    | name                      | width | height | crop  |\n    +---------------------------+-------+--------+-------+\n    | full                      |       |        | N\/A   |\n    | twentyfourteen-full-width | 1038  | 576    | hard  |\n    | large                     | 1024  | 1024   | soft  |\n    | medium_large              | 768   | 0      | soft  |\n    | medium                    | 300   | 300    | soft  |\n    | thumbnail                 | 150   | 150    | hard  |\n    +---------------------------+-------+--------+-------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"fix-orientation","description":"Fix image orientation for one or more attachments.","longdesc":"## OPTIONS\n\n[<attachment-id>...]\n: One or more IDs of the attachments to regenerate.\n\n[--dry-run]\n: Check images needing orientation without performing the operation.\n\n## EXAMPLES\n\n    # Fix orientation for all images.\n    $ wp media fix-orientation\n    1\/3 Fixing orientation for \"Landscape_4\" (ID 62).\n    2\/3 Fixing orientation for \"Landscape_3\" (ID 61).\n    3\/3 Fixing orientation for \"Landscape_2\" (ID 60).\n    Success: Fixed 3 of 3 images.\n\n    # Fix orientation dry run.\n    $ wp media fix-orientation 63 -dry run\n    1\/1 \"Portrait_6\" (ID 63) will be affected.\n    Success: 1 of 1 image will be affected.\n\n    # Fix orientation for specific images.\n    $ wp media fix-orientation 63\n    1\/1 Fixing orientation for \"Portrait_6\" (ID 63).\n    Success: Fixed 1 of 1 images.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<attachment-id>...] [--dry-run]"},{"name":"image-size","description":"Lists image sizes registered with WordPress.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to all fields.\n\n[--format=<format>]\n: Render output in a specific format\n---\ndefault: table\noptions:\n  - table\n  - json\n  - csv\n  - yaml\n  - count\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each image size:\n* name\n* width\n* height\n* crop\n* ratio\n\n## EXAMPLES\n\n    # List all registered image sizes\n    $ wp media image-size\n    +---------------------------+-------+--------+-------+-------+\n    | name                      | width | height | crop  | ratio |\n    +---------------------------+-------+--------+-------+-------+\n    | full                      |       |        | N\/A   | N\/A   |\n    | twentyfourteen-full-width | 1038  | 576    | hard  | 173:96|\n    | large                     | 1024  | 1024   | soft  | N\/A   |\n    | medium_large              | 768   | 0      | soft  | N\/A   |\n    | medium                    | 300   | 300    | soft  | N\/A   |\n    | thumbnail                 | 150   | 150    | hard  | 1:1   |\n    +---------------------------+-------+--------+-------+-------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--fields=<fields>] [--format=<format>]"},{"name":"import","description":"Creates attachments from local files or URLs.","longdesc":"## OPTIONS\n\n<file>...\n: Path to file or files to be imported. Supports the glob(3) capabilities of the current shell.\n    If file is recognized as a URL (for example, with a scheme of http or ftp), the file will be\n    downloaded to a temp file before being sideloaded.\n\n[--post_id=<post_id>]\n: ID of the post to attach the imported files to.\n\n[--title=<title>]\n: Attachment title (post title field).\n\n[--caption=<caption>]\n: Caption for attachment (post excerpt field).\n\n[--alt=<alt_text>]\n: Alt text for image (saved as post meta).\n\n[--desc=<description>]\n: \"Description\" field (post content) of attachment post.\n\n[--skip-copy]\n: If set, media files (local only) are imported to the library but not moved on disk.\nFile names will not be run through wp_unique_filename() with this set.\n\n[--preserve-filetime]\n: Use the file modified time as the post published & modified dates.\nRemote files will always use the current time.\n\n[--featured_image]\n: If set, set the imported image as the Featured Image of the post its attached to.\n\n[--porcelain]\n: Output just the new attachment ID.\n\n## EXAMPLES\n\n    # Import all jpgs in the current user's \"Pictures\" directory, not attached to any post.\n    $ wp media import ~\/Pictures\/**\\\/*.jpg\n    Imported file '\/home\/person\/Pictures\/landscape-photo.jpg' as attachment ID 1751.\n    Imported file '\/home\/person\/Pictures\/fashion-icon.jpg' as attachment ID 1752.\n    Success: Imported 2 of 2 items.\n\n    # Import a local image and set it to be the post thumbnail for a post.\n    $ wp media import ~\/Downloads\/image.png --post_id=123 --title=\"A downloaded picture\" --featured_image\n    Imported file '\/home\/person\/Downloads\/image.png' as attachment ID 1753 and attached to post 123 as featured image.\n    Success: Imported 1 of 1 images.\n\n    # Import a local image, but set it as the featured image for all posts.\n    # 1. Import the image and get its attachment ID.\n    # 2. Assign the attachment ID as the featured image for all posts.\n    $ ATTACHMENT_ID=\"$(wp media import ~\/Downloads\/image.png --porcelain)\"\n    $ wp post list --post_type=post --format=ids | xargs -d ' ' -I % wp post meta add % _thumbnail_id $ATTACHMENT_ID\n    Success: Added custom field.\n    Success: Added custom field.\n\n    # Import an image from the web.\n    $ wp media import http:\/\/s.wordpress.org\/style\/images\/wp-header-logo.png --title='The WordPress logo' --alt=\"Semantic personal publishing\"\n    Imported file 'http:\/\/s.wordpress.org\/style\/images\/wp-header-logo.png' as attachment ID 1755.\n    Success: Imported 1 of 1 images.\n\n    # Get the URL for an attachment after import.\n    $ wp media import http:\/\/s.wordpress.org\/style\/images\/wp-header-logo.png --porcelain | xargs -I {} wp post list --post__in={} --field=url --post_type=attachment\n    http:\/\/wordpress-develop.dev\/wp-header-logo\/\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<file>... [--post_id=<post_id>] [--title=<title>] [--caption=<caption>] [--alt=<alt_text>] [--desc=<description>] [--skip-copy] [--preserve-filetime] [--featured_image] [--porcelain]"},{"name":"regenerate","description":"Regenerates thumbnails for one or more attachments.","longdesc":"## OPTIONS\n\n[<attachment-id>...]\n: One or more IDs of the attachments to regenerate.\n\n[--image_size=<image_size>]\n: Name of the image size to regenerate. Only thumbnails of this image size will be regenerated, thumbnails of other image sizes will not.\n\n[--skip-delete]\n: Skip deletion of the original thumbnails. If your thumbnails are linked from sources outside your control, it's likely best to leave them around. Defaults to false.\n\n[--only-missing]\n: Only generate thumbnails for images missing image sizes.\n\n[--yes]\n: Answer yes to the confirmation message. Confirmation only shows when no IDs passed as arguments.\n\n## EXAMPLES\n\n    # Regenerate thumbnails for given attachment IDs.\n    $ wp media regenerate 123 124 125\n    Found 3 images to regenerate.\n    1\/3 Regenerated thumbnails for \"Vertical Image\" (ID 123).\n    2\/3 Regenerated thumbnails for \"Horizontal Image\" (ID 124).\n    3\/3 Regenerated thumbnails for \"Beautiful Picture\" (ID 125).\n    Success: Regenerated 3 of 3 images.\n\n    # Regenerate all thumbnails, without confirmation.\n    $ wp media regenerate --yes\n    Found 3 images to regenerate.\n    1\/3 Regenerated thumbnails for \"Sydney Harbor Bridge\" (ID 760).\n    2\/3 Regenerated thumbnails for \"Boardwalk\" (ID 757).\n    3\/3 Regenerated thumbnails for \"Sunburst Over River\" (ID 756).\n    Success: Regenerated 3 of 3 images.\n\n    # Re-generate all thumbnails that have IDs between 1000 and 2000.\n    $ seq 1000 2000 | xargs wp media regenerate\n    Found 4 images to regenerate.\n    1\/4 Regenerated thumbnails for \"Vertical Featured Image\" (ID 1027).\n    2\/4 Regenerated thumbnails for \"Horizontal Featured Image\" (ID 1022).\n    3\/4 Regenerated thumbnails for \"Unicorn Wallpaper\" (ID 1045).\n    4\/4 Regenerated thumbnails for \"I Am Worth Loving Wallpaper\" (ID 1023).\n    Success: Regenerated 4 of 4 images.\n\n    # Re-generate only the thumbnails of \"large\" image size for all images.\n    $ wp media regenerate --image_size=large\n    Do you really want to regenerate the \"large\" image size for all images? [y\/n] y\n    Found 3 images to regenerate.\n    1\/3 Regenerated \"large\" thumbnail for \"Sydney Harbor Bridge\" (ID 760).\n    2\/3 No \"large\" thumbnail regeneration needed for \"Boardwalk\" (ID 757).\n    3\/3 Regenerated \"large\" thumbnail for \"Sunburst Over River\" (ID 756).\n    Success: Regenerated 3 of 3 images.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<attachment-id>...] [--image_size=<image_size>] [--skip-delete] [--only-missing] [--yes]"}]},{"name":"menu","description":"Lists, creates, assigns, and deletes the active theme's navigation menus.","longdesc":"See the [Navigation Menus](https:\/\/developer.wordpress.org\/themes\/functionality\/navigation-menus\/) reference in the Theme Handbook.\n\n## EXAMPLES\n\n    # Create a new menu\n    $ wp menu create \"My Menu\"\n    Success: Created menu 200.\n\n    # List existing menus\n    $ wp menu list\n    +---------+----------+----------+-----------+-------+\n    | term_id | name     | slug     | locations | count |\n    +---------+----------+----------+-----------+-------+\n    | 200     | My Menu  | my-menu  |           | 0     |\n    | 177     | Top Menu | top-menu | primary   | 7     |\n    +---------+----------+----------+-----------+-------+\n\n    # Create a new menu link item\n    $ wp menu item add-custom my-menu Apple http:\/\/apple.com --porcelain\n    1922\n\n    # Assign the 'my-menu' menu to the 'primary' location\n    $ wp menu location assign my-menu primary\n    Success: Assigned location to menu.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"create","description":"Creates a new menu.","longdesc":"## OPTIONS\n\n<menu-name>\n: A descriptive name for the menu.\n\n[--porcelain]\n: Output just the new menu id.\n\n## EXAMPLES\n\n    $ wp menu create \"My Menu\"\n    Success: Created menu 200.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<menu-name> [--porcelain]"},{"name":"delete","description":"Deletes one or more menus.","longdesc":"## OPTIONS\n\n<menu>...\n: The name, slug, or term ID for the menu(s).\n\n## EXAMPLES\n\n    $ wp menu delete \"My Menu\"\n    Success: 1 menu deleted.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<menu>..."},{"name":"item","description":"List, add, and delete items associated with a menu.","longdesc":"## EXAMPLES\n\n    # Add an existing post to an existing menu\n    $ wp menu item add-post sidebar-menu 33 --title=\"Custom Test Post\"\n    Success: Menu item added.\n\n    # Create a new menu link item\n    $ wp menu item add-custom sidebar-menu Apple http:\/\/apple.com\n    Success: Menu item added.\n\n    # Delete menu item\n    $ wp menu item delete 45\n    Success: 1 menu item deleted.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add-custom","description":"Adds a custom menu item.","longdesc":"## OPTIONS\n\n<menu>\n: The name, slug, or term ID for the menu.\n\n<title>\n: Title for the link.\n\n<link>\n: Target URL for the link.\n\n[--description=<description>]\n: Set a custom description for the menu item.\n\n[--attr-title=<attr-title>]\n: Set a custom title attribute for the menu item.\n\n[--target=<target>]\n: Set a custom link target for the menu item.\n\n[--classes=<classes>]\n: Set a custom link classes for the menu item.\n\n[--position=<position>]\n: Specify the position of this menu item.\n\n[--parent-id=<parent-id>]\n: Make this menu item a child of another menu item.\n\n[--porcelain]\n: Output just the new menu item id.\n\n## EXAMPLES\n\n    $ wp menu item add-custom sidebar-menu Apple http:\/\/apple.com\n    Success: Menu item added.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<menu> <title> <link> [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>] [--porcelain]"},{"name":"add-post","description":"Adds a post as a menu item.","longdesc":"## OPTIONS\n\n<menu>\n: The name, slug, or term ID for the menu.\n\n<post-id>\n: Post ID to add to the menu.\n\n[--title=<title>]\n: Set a custom title for the menu item.\n\n[--link=<link>]\n: Set a custom url for the menu item.\n\n[--description=<description>]\n: Set a custom description for the menu item.\n\n[--attr-title=<attr-title>]\n: Set a custom title attribute for the menu item.\n\n[--target=<target>]\n: Set a custom link target for the menu item.\n\n[--classes=<classes>]\n: Set a custom link classes for the menu item.\n\n[--position=<position>]\n: Specify the position of this menu item.\n\n[--parent-id=<parent-id>]\n: Make this menu item a child of another menu item.\n\n[--porcelain]\n: Output just the new menu item id.\n\n## EXAMPLES\n\n    $ wp menu item add-post sidebar-menu 33 --title=\"Custom Test Post\"\n    Success: Menu item added.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<menu> <post-id> [--title=<title>] [--link=<link>] [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>] [--porcelain]"},{"name":"add-term","description":"Adds a taxonomy term as a menu item.","longdesc":"## OPTIONS\n\n<menu>\n: The name, slug, or term ID for the menu.\n\n<taxonomy>\n: Taxonomy of the term to be added.\n\n<term-id>\n: Term ID of the term to be added.\n\n[--title=<title>]\n: Set a custom title for the menu item.\n\n[--link=<link>]\n: Set a custom url for the menu item.\n\n[--description=<description>]\n: Set a custom description for the menu item.\n\n[--attr-title=<attr-title>]\n: Set a custom title attribute for the menu item.\n\n[--target=<target>]\n: Set a custom link target for the menu item.\n\n[--classes=<classes>]\n: Set a custom link classes for the menu item.\n\n[--position=<position>]\n: Specify the position of this menu item.\n\n[--parent-id=<parent-id>]\n: Make this menu item a child of another menu item.\n\n[--porcelain]\n: Output just the new menu item id.\n\n## EXAMPLES\n\n    $ wp menu item add-term sidebar-menu post_tag 24\n    Success: Menu item added.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<menu> <taxonomy> <term-id> [--title=<title>] [--link=<link>] [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>] [--porcelain]"},{"name":"delete","description":"Deletes one or more items from a menu.","longdesc":"## OPTIONS\n\n<db-id>...\n: Database ID for the menu item(s).\n\n## EXAMPLES\n\n    $ wp menu item delete 45\n    Success: 1 menu item deleted.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<db-id>..."},{"name":"list","description":"Gets a list of items associated with a menu.","longdesc":"## OPTIONS\n\n<menu>\n: The name, slug, or term ID for the menu.\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - ids\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each menu item:\n\n* db_id\n* type\n* title\n* link\n* position\n\nThese fields are optionally available:\n\n* menu_item_parent\n* object_id\n* object\n* type\n* type_label\n* target\n* attr_title\n* description\n* classes\n* xfn\n\n## EXAMPLES\n\n    $ wp menu item list main-menu\n    +-------+-----------+-------------+---------------------------------+----------+\n    | db_id | type      | title       | link                            | position |\n    +-------+-----------+-------------+---------------------------------+----------+\n    | 5     | custom    | Home        | http:\/\/example.com              | 1        |\n    | 6     | post_type | Sample Page | http:\/\/example.com\/sample-page\/ | 2        |\n    +-------+-----------+-------------+---------------------------------+----------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<menu> [--fields=<fields>] [--format=<format>]"},{"name":"update","description":"Updates a menu item.","longdesc":"## OPTIONS\n\n<db-id>\n: Database ID for the menu item.\n\n[--title=<title>]\n: Set a custom title for the menu item.\n\n[--link=<link>]\n: Set a custom url for the menu item.\n\n[--description=<description>]\n: Set a custom description for the menu item.\n\n[--attr-title=<attr-title>]\n: Set a custom title attribute for the menu item.\n\n[--target=<target>]\n: Set a custom link target for the menu item.\n\n[--classes=<classes>]\n: Set a custom link classes for the menu item.\n\n[--position=<position>]\n: Specify the position of this menu item.\n\n[--parent-id=<parent-id>]\n: Make this menu item a child of another menu item.\n\n## EXAMPLES\n\n    $ wp menu item update 45 --title=WordPress --link='http:\/\/wordpress.org' --target=_blank --position=2\n    Success: Menu item updated.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<db-id> [--title=<title>] [--link=<link>] [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>]"}]},{"name":"list","description":"Gets a list of menus.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - ids\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each menu:\n\n* term_id\n* name\n* slug\n* count\n\nThese fields are optionally available:\n\n* term_group\n* term_taxonomy_id\n* taxonomy\n* description\n* parent\n* locations\n\n## EXAMPLES\n\n    $ wp menu list\n    +---------+----------+----------+-----------+-------+\n    | term_id | name     | slug     | locations | count |\n    +---------+----------+----------+-----------+-------+\n    | 200     | My Menu  | my-menu  |           | 0     |\n    | 177     | Top Menu | top-menu | primary   | 7     |\n    +---------+----------+----------+-----------+-------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--fields=<fields>] [--format=<format>]"},{"name":"location","description":"Assigns, removes, and lists a menu's locations.","longdesc":"## EXAMPLES\n\n    # List available menu locations\n    $ wp menu location list\n    +----------+-------------------+\n    | location | description       |\n    +----------+-------------------+\n    | primary  | Primary Menu      |\n    | social   | Social Links Menu |\n    +----------+-------------------+\n\n    # Assign the 'primary-menu' menu to the 'primary' location\n    $ wp menu location assign primary-menu primary\n    Success: Assigned location to menu.\n\n    # Remove the 'primary-menu' menu from the 'primary' location\n    $ wp menu location remove primary-menu primary\n    Success: Removed location from menu.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"assign","description":"Assigns a location to a menu.","longdesc":"## OPTIONS\n\n<menu>\n: The name, slug, or term ID for the menu.\n\n<location>\n: Location's slug.\n\n## EXAMPLES\n\n    $ wp menu location assign primary-menu primary\n    Success: Assigned location primary to menu primary-menu.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<menu> <location>"},{"name":"list","description":"Lists locations for the current theme.","longdesc":"## OPTIONS\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n  - ids\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each location:\n\n* name\n* description\n\n## EXAMPLES\n\n    $ wp menu location list\n    +----------+-------------------+\n    | location | description       |\n    +----------+-------------------+\n    | primary  | Primary Menu      |\n    | social   | Social Links Menu |\n    +----------+-------------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--format=<format>]"},{"name":"remove","description":"Removes a location from a menu.","longdesc":"## OPTIONS\n\n<menu>\n: The name, slug, or term ID for the menu.\n\n<location>\n: Location's slug.\n\n## EXAMPLES\n\n    $ wp menu location remove primary-menu primary\n    Success: Removed location from menu.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<menu> <location>"}]}]},{"name":"network","description":"Perform network-wide operations.","longdesc":"## EXAMPLES\n\n    # Get a list of super-admins\n    $ wp network meta get 1 site_admins\n    array (\n      0 => 'supervisor',\n    )\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"meta","description":"Gets, adds, updates, deletes, and lists network custom fields.","longdesc":"## EXAMPLES\n\n    # Get a list of super-admins\n    $ wp network meta get 1 site_admins\n    array (\n      0 => 'supervisor',\n    )\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Add a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to create.\n\n[<value>]\n: The value of the meta field. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [<value>] [--format=<format>]"},{"name":"delete","description":"Delete a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n[<key>]\n: The name of the meta field to delete.\n\n[<value>]\n: The value to delete. If omitted, all rows with key will deleted.\n\n[--all]\n: Delete all meta for the object.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [<key>] [<value>] [--all]"},{"name":"get","description":"Get meta field value.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to get.\n\n[--format=<format>]\n: Get value in a particular format.\n---\ndefault: var_export\noptions:\n  - var_export\n  - json\n  - yaml\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [--format=<format>]"},{"name":"list","description":"List all metadata associated with an object.","longdesc":"## OPTIONS\n\n<id>\n: ID for the object.\n\n[--keys=<keys>]\n: Limit output to metadata of specific keys.\n\n[--fields=<fields>]\n: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n  - count\n---\n\n[--orderby=<fields>]\n: Set orderby which field.\n---\ndefault: id\noptions:\n - id\n - meta_key\n - meta_value\n---\n\n[--order=<order>]\n: Set ascending or descending order.\n---\ndefault: asc\noptions:\n - asc\n - desc\n---\n\n[--unserialize]\n: Unserialize meta_value output.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"},{"name":"patch","description":"Update a nested value for a meta field.","longdesc":"## OPTIONS\n\n<action>\n: Patch action to perform.\n---\noptions:\n  - insert\n  - update\n  - delete\n---\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to patch.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<action> <id> <key> <key-path>... [<value>] [--format=<format>]"},{"name":"pluck","description":"Get a nested value from a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to get.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to pluck.\n\n[--format=<format>]\n: The output format of the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n  - yaml\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> <key-path>... [--format=<format>]"},{"name":"update","description":"Update a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [<value>] [--format=<format>]"}]}]},{"name":"option","description":"Retrieves and sets site options, including plugin and WordPress settings.","longdesc":"See the [Plugin Settings API](https:\/\/developer.wordpress.org\/plugins\/settings\/settings-api\/) and the [Theme Options](https:\/\/developer.wordpress.org\/themes\/customize-api\/) for more information on adding customized options.\n\n## EXAMPLES\n\n    # Get site URL.\n    $ wp option get siteurl\n    http:\/\/example.com\n\n    # Add option.\n    $ wp option add my_option foobar\n    Success: Added 'my_option' option.\n\n    # Update option.\n    $ wp option update my_option '{\"foo\": \"bar\"}' --format=json\n    Success: Updated 'my_option' option.\n\n    # Delete option.\n    $ wp option delete my_option\n    Success: Deleted 'my_option' option.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Adds a new option value.","longdesc":"Errors if the option already exists.\n\n## OPTIONS\n\n<key>\n: The name of the option to add.\n\n[<value>]\n: The value of the option to add. If ommited, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n[--autoload=<autoload>]\n: Should this option be automatically loaded.\n---\noptions:\n  - 'yes'\n  - 'no'\n---\n\n## EXAMPLES\n\n    # Create an option by reading a JSON file.\n    $ wp option add my_option --format=json < config.json\n    Success: Added 'my_option' option.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [<value>] [--format=<format>] [--autoload=<autoload>]"},{"name":"delete","description":"Deletes an option.","longdesc":"## OPTIONS\n\n<key>...\n: Key for the option.\n\n## EXAMPLES\n\n    # Delete an option.\n    $ wp option delete my_option\n    Success: Deleted 'my_option' option.\n\n    # Delete multiple options.\n    $ wp option delete option_one option_two option_three\n    Success: Deleted 'option_one' option.\n    Success: Deleted 'option_two' option.\n    Warning: Could not delete 'option_three' option. Does it exist?\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key>..."},{"name":"get","description":"Gets the value for an option.","longdesc":"## OPTIONS\n\n<key>\n: Key for the option.\n\n[--format=<format>]\n: Get value in a particular format.\n---\ndefault: var_export\noptions:\n  - var_export\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    # Get option.\n    $ wp option get home\n    http:\/\/example.com\n\n    # Get blog description.\n    $ wp option get blogdescription\n    A random blog description\n\n    # Get blog name\n    $ wp option get blogname\n    A random blog name\n\n    # Get admin email.\n    $ wp option get admin_email\n    someone@example.com\n\n    # Get option in JSON format.\n    $ wp option get active_plugins --format=json\n    {\"0\":\"dynamically-dynamic-sidebar\\\/dynamically-dynamic-sidebar.php\",\"1\":\"monster-widget\\\/monster-widget.php\",\"2\":\"show-current-template\\\/show-current-template.php\",\"3\":\"theme-check\\\/theme-check.php\",\"5\":\"wordpress-importer\\\/wordpress-importer.php\"}\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [--format=<format>]"},{"name":"list","description":"Lists options and their values.","longdesc":"## OPTIONS\n\n[--search=<pattern>]\n: Use wildcards ( * and ? ) to match option name.\n\n[--exclude=<pattern>]\n: Pattern to exclude. Use wildcards ( * and ? ) to match option name.\n\n[--autoload=<value>]\n: Match only autoload options when value is on, and only not-autoload option when off.\n\n[--transients]\n: List only transients. Use `--no-transients` to ignore all transients.\n\n[--unserialize]\n: Unserialize option values in output.\n\n[--field=<field>]\n: Prints the value of a single field.\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: The serialization format for the value. total_bytes displays the total size of matching options in bytes.\n---\ndefault: table\noptions:\n  - table\n  - json\n  - csv\n  - count\n  - yaml\n  - total_bytes\n---\n\n[--orderby=<fields>]\n: Set orderby which field.\n---\ndefault: option_id\noptions:\n - option_id\n - option_name\n - option_value\n---\n\n[--order=<order>]\n: Set ascending or descending order.\n---\ndefault: asc\noptions:\n - asc\n - desc\n---\n\n## AVAILABLE FIELDS\n\nThis field will be displayed by default for each matching option:\n\n* option_name\n* option_value\n\nThese fields are optionally available:\n\n* autoload\n* size_bytes\n\n## EXAMPLES\n\n    # Get the total size of all autoload options.\n    $ wp option list --autoload=on --format=total_bytes\n    33198\n\n    # Find biggest transients.\n    $ wp option list --search=\"*_transient_*\" --fields=option_name,size_bytes | sort -n -k 2 | tail\n    option_name size_bytes\n    _site_transient_timeout_theme_roots 10\n    _site_transient_theme_roots 76\n    _site_transient_update_themes   181\n    _site_transient_update_core 808\n    _site_transient_update_plugins  6645\n\n    # List all options beginning with \"i2f_\".\n    $ wp option list --search=\"i2f_*\"\n    +-------------+--------------+\n    | option_name | option_value |\n    +-------------+--------------+\n    | i2f_version | 0.1.0        |\n    +-------------+--------------+\n\n    # Delete all options beginning with \"theme_mods_\".\n    $ wp option list --search=\"theme_mods_*\" --field=option_name | xargs -I % wp option delete %\n    Success: Deleted 'theme_mods_twentysixteen' option.\n    Success: Deleted 'theme_mods_twentyfifteen' option.\n    Success: Deleted 'theme_mods_twentyfourteen' option.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--search=<pattern>] [--exclude=<pattern>] [--autoload=<value>] [--transients] [--unserialize] [--field=<field>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>]"},{"name":"patch","description":"Updates a nested value in an option.","longdesc":"## OPTIONS\n\n<action>\n: Patch action to perform.\n---\noptions:\n  - insert\n  - update\n  - delete\n---\n\n<key>\n: The option name.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to patch.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## EXAMPLES\n\n    # Add 'bar' to the 'foo' key on an option with name 'option_name'\n    $ wp option patch insert option_name foo bar\n    Success: Updated 'option_name' option.\n\n    # Update the value of 'foo' key to 'new' on an option with name 'option_name'\n    $ wp option patch update option_name foo new\n    Success: Updated 'option_name' option.\n\n    # Set nested value of 'bar' key to value we have in the patch file on an option with name 'option_name'.\n    $ wp option patch update option_name foo bar < patch\n    Success: Updated 'option_name' option.\n\n    # Update the value for the key 'not-a-key' which is not exist on an option with name 'option_name'.\n    $ wp option patch update option_name foo not-a-key new-value\n    Error: No data exists for key \"not-a-key\"\n\n    # Update the value for the key 'foo' without passing value on an option with name 'option_name'.\n    $ wp option patch update option_name foo\n    Error: Please provide value to update.\n\n    # Delete the nested key 'bar' under 'foo' key on an option with name 'option_name'.\n    $ wp option patch delete option_name foo bar\n    Success: Updated 'option_name' option.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<action> <key> <key-path>... [<value>] [--format=<format>]"},{"name":"pluck","description":"Gets a nested value from an option.","longdesc":"## OPTIONS\n\n<key>\n: The option name.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to pluck.\n\n[--format=<format>]\n: The output format of the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n  - yaml\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> <key-path>... [--format=<format>]"},{"name":"update","description":"Updates an option value.","longdesc":"## OPTIONS\n\n<key>\n: The name of the option to update.\n\n[<value>]\n: The new value. If ommited, the value is read from STDIN.\n\n[--autoload=<autoload>]\n: Requires WP 4.2. Should this option be automatically loaded.\n---\noptions:\n  - 'yes'\n  - 'no'\n---\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## EXAMPLES\n\n    # Update an option by reading from a file.\n    $ wp option update my_option < value.txt\n    Success: Updated 'my_option' option.\n\n    # Update one option on multiple sites using xargs.\n    $ wp site list --field=url | xargs -n1 -I {} sh -c 'wp --url={} option update my_option my_value'\n    Success: Updated 'my_option' option.\n    Success: Updated 'my_option' option.\n\n    # Update site blog name.\n    $ wp option update blogname \"Random blog name\"\n    Success: Updated 'blogname' option.\n\n    # Update site blog description.\n    $ wp option update blogdescription \"Some random blog description\"\n    Success: Updated 'blogdescription' option.\n\n    # Update admin email address.\n    $ wp option update admin_email someone@example.com\n    Success: Updated 'admin_email' option.\n\n    # Set the default role.\n    $ wp option update default_role author\n    Success: Updated 'default_role' option.\n\n    # Set the timezone string.\n    $ wp option update timezone_string \"America\/New_York\"\n    Success: Updated 'timezone_string' option.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [<value>] [--autoload=<autoload>] [--format=<format>]"}]},{"name":"package","description":"Lists, installs, and removes WP-CLI packages.","longdesc":"WP-CLI packages are community-maintained projects built on WP-CLI. They can\ncontain WP-CLI commands, but they can also just extend WP-CLI in some way.\n\nLearn how to create your own command from the\n[Commands Cookbook](https:\/\/make.wordpress.org\/cli\/handbook\/commands-cookbook\/)\n\n## EXAMPLES\n\n    # List installed packages\n    $ wp package list\n    +-----------------------+------------------------------------------+---------+----------+\n    | name                  | description                              | authors | version  |\n    +-----------------------+------------------------------------------+---------+----------+\n    | wp-cli\/server-command | Start a development server for WordPress |         | dev-main |\n    +-----------------------+------------------------------------------+---------+----------+\n\n    # Install the latest development version of the package\n    $ wp package install wp-cli\/server-command\n    Installing package wp-cli\/server-command (dev-main)\n    Updating \/home\/person\/.wp-cli\/packages\/composer.json to require the package...\n    Using Composer to install the package...\n    ---\n    Loading composer repositories with package information\n    Updating dependencies\n    Resolving dependencies through SAT\n    Dependency resolution completed in 0.005 seconds\n    Analyzed 732 packages to resolve dependencies\n    Analyzed 1034 rules to resolve dependencies\n     - Installing package\n    Writing lock file\n    Generating autoload files\n    ---\n    Success: Package installed.\n\n    # Uninstall package\n    $ wp package uninstall wp-cli\/server-command\n    Removing require statement from \/home\/person\/.wp-cli\/packages\/composer.json\n    Deleting package directory \/home\/person\/.wp-cli\/packages\/vendor\/wp-cli\/server-command\n    Regenerating Composer autoload.\n    Success: Uninstalled package.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"browse","description":"Browses WP-CLI packages available for installation.","longdesc":"Lists packages available for installation from the [Package Index](http:\/\/wp-cli.org\/package-index\/).\nAlthough the package index will remain in place for backward compatibility reasons, it has been\ndeprecated and will not be updated further. Please refer to https:\/\/github.com\/wp-cli\/ideas\/issues\/51\nto read about its potential replacement.\n\n## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to all fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - ids\n  - json\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each package:\n\n* name\n* description\n* authors\n* version\n\nThere are no optionally available fields.\n\n## EXAMPLES\n\n    $ wp package browse --format=yaml\n    ---\n    10up\/mu-migration:\n      name: 10up\/mu-migration\n      description: A set of WP-CLI commands to support the migration of single WordPress instances to multisite\n      authors: N\u00edcholas Andr\u00e9\n      version: dev-main, dev-develop\n    aaemnnosttv\/wp-cli-dotenv-command:\n      name: aaemnnosttv\/wp-cli-dotenv-command\n      description: Dotenv commands for WP-CLI\n      authors: Evan Mattson\n      version: v0.1, v0.1-beta.1, v0.2, dev-main, dev-dev, dev-develop, dev-tests\/behat\n    aaemnnosttv\/wp-cli-http-command:\n      name: aaemnnosttv\/wp-cli-http-command\n      description: WP-CLI command for using the WordPress HTTP API\n      authors: Evan Mattson\n      version: dev-main\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--fields=<fields>] [--format=<format>]"},{"name":"install","description":"Installs a WP-CLI package.","longdesc":"Packages are required to be a valid Composer package, and can be\nspecified as:\n\n* Package name from WP-CLI's package index.\n* Git URL accessible by the current shell user.\n* Path to a directory on the local machine.\n* Local or remote .zip file.\n\nPackages are installed to `~\/.wp-cli\/packages\/` by default. Use the\n`WP_CLI_PACKAGES_DIR` environment variable to provide a custom path.\n\nWhen installing a local directory, WP-CLI simply registers a\nreference to the directory. If you move or delete the directory, WP-CLI's\nreference breaks.\n\nWhen installing a .zip file, WP-CLI extracts the package to\n`~\/.wp-cli\/packages\/local\/<package-name>`.\n\n## OPTIONS\n\n<name|git|path|zip>\n: Name, git URL, directory path, or .zip file for the package to install.\nNames can optionally include a version constraint\n(e.g. wp-cli\/server-command:@stable).\n\n[--insecure]\n: Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    # Install a package hosted at a git URL.\n    $ wp package install runcommand\/hook\n\n    # Install the latest stable version.\n    $ wp package install wp-cli\/server-command:@stable\n\n    # Install a package hosted at a GitLab.com URL.\n    $ wp package install https:\/\/gitlab.com\/foo\/wp-cli-bar-command.git\n\n    # Install a package in a .zip file.\n    $ wp package install google-sitemap-generator-cli.zip\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<name|git|path|zip> [--insecure]"},{"name":"list","description":"Lists installed WP-CLI packages.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to all fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - ids\n  - json\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each package:\n\n* name\n* authors\n* version\n* update\n* update_version\n\nThese fields are optionally available:\n\n* description\n\n## EXAMPLES\n\n    $ wp package list\n    +-----------------------+------------------------------------------+---------+----------+\n    | name                  | description                              | authors | version  |\n    +-----------------------+------------------------------------------+---------+----------+\n    | wp-cli\/server-command | Start a development server for WordPress |         | dev-main |\n    +-----------------------+------------------------------------------+---------+----------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--fields=<fields>] [--format=<format>]"},{"name":"path","description":"Gets the path to an installed WP-CLI package, or the package directory.","longdesc":"If you want to contribute to a package, this is a great way to jump to it.\n\n## OPTIONS\n\n[<name>]\n: Name of the package to get the directory for.\n\n## EXAMPLES\n\n    # Get package path\n    $ wp package path\n    \/home\/person\/.wp-cli\/packages\/\n\n    # Change directory to package path\n    $ cd $(wp package path) && pwd\n    \/home\/vagrant\/.wp-cli\/packages\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<name>]"},{"name":"uninstall","description":"Uninstalls a WP-CLI package.","longdesc":"## OPTIONS\n\n<name>\n: Name of the package to uninstall.\n\n[--insecure]\n: Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    $ wp package uninstall wp-cli\/server-command\n    Removing require statement from \/home\/person\/.wp-cli\/packages\/composer.json\n    Deleting package directory \/home\/person\/.wp-cli\/packages\/vendor\/wp-cli\/server-command\n    Regenerating Composer autoload.\n    Success: Uninstalled package.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<name> [--insecure]"},{"name":"update","description":"Updates all installed WP-CLI packages to their latest version.","longdesc":"## EXAMPLES\n\n    $ wp package update\n    Using Composer to update packages...\n    ---\n    Loading composer repositories with package information\n    Updating dependencies\n    Resolving dependencies through SAT\n    Dependency resolution completed in 0.074 seconds\n    Analyzed 1062 packages to resolve dependencies\n    Analyzed 22383 rules to resolve dependencies\n    Writing lock file\n    Generating autoload files\n    ---\n    Success: Packages updated.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""}]},{"name":"plugin","description":"Manages plugins, including installs, activations, and updates.","longdesc":"See the WordPress [Plugin Handbook](https:\/\/developer.wordpress.org\/plugins\/) developer resource for more information on plugins.\n\n## EXAMPLES\n\n    # Activate plugin\n    $ wp plugin activate hello\n    Plugin 'hello' activated.\n    Success: Activated 1 of 1 plugins.\n\n    # Deactivate plugin\n    $ wp plugin deactivate hello\n    Plugin 'hello' deactivated.\n    Success: Deactivated 1 of 1 plugins.\n\n    # Delete plugin\n    $ wp plugin delete hello\n    Deleted 'hello' plugin.\n    Success: Deleted 1 of 1 plugins.\n\n    # Install the latest version from wordpress.org and activate\n    $ wp plugin install bbpress --activate\n    Installing bbPress (2.5.9)\n    Downloading install package from https:\/\/downloads.wordpress.org\/plugin\/bbpress.2.5.9.zip...\n    Using cached file '\/home\/vagrant\/.wp-cli\/cache\/plugin\/bbpress-2.5.9.zip'...\n    Unpacking the package...\n    Installing the plugin...\n    Plugin installed successfully.\n    Activating 'bbpress'...\n    Plugin 'bbpress' activated.\n    Success: Installed 1 of 1 plugins.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"activate","description":"Activates one or more plugins.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to activate.\n\n[--all]\n: If set, all plugins will be activated.\n\n[--exclude=<name>]\n: Comma separated list of plugin slugs to be excluded from activation.\n\n[--network]\n: If set, the plugin will be activated for the entire multisite network.\n\n## EXAMPLES\n\n    # Activate plugin\n    $ wp plugin activate hello\n    Plugin 'hello' activated.\n    Success: Activated 1 of 1 plugins.\n\n    # Activate plugin in entire multisite network\n    $ wp plugin activate hello --network\n    Plugin 'hello' network activated.\n    Success: Network activated 1 of 1 plugins.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>...] [--all] [--exclude=<name>] [--network]"},{"name":"auto-updates","description":"Manages plugin auto-updates.","longdesc":"## EXAMPLES\n\n    # Enable the auto-updates for a plugin\n    $ wp plugin auto-updates enable hello\n    Plugin auto-updates for 'hello' enabled.\n    Success: Enabled 1 of 1 plugin auto-updates.\n\n    # Disable the auto-updates for a plugin\n    $ wp plugin auto-updates disable hello\n    Plugin auto-updates for 'hello' disabled.\n    Success: Disabled 1 of 1 plugin auto-updates.\n\n    # Get the status of plugin auto-updates\n    $ wp plugin auto-updates status hello\n    Auto-updates for plugin 'hello' are disabled.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"disable","description":"Disables the auto-updates for a plugin.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to disable auto-updates for.\n\n[--all]\n: If set, auto-updates will be disabled for all plugins.\n\n[--enabled-only]\n: If set, filters list of plugins to only include the ones that have\nauto-updates enabled.\n\n## EXAMPLES\n\n    # Disable the auto-updates for a plugin\n    $ wp plugin auto-updates disable hello\n    Plugin auto-updates for 'hello' disabled.\n    Success: Disabled 1 of 1 plugin auto-updates.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>...] [--all] [--enabled-only]"},{"name":"enable","description":"Enables the auto-updates for a plugin.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to enable auto-updates for.\n\n[--all]\n: If set, auto-updates will be enabled for all plugins.\n\n[--disabled-only]\n: If set, filters list of plugins to only include the ones that have\nauto-updates disabled.\n\n## EXAMPLES\n\n    # Enable the auto-updates for a plugin\n    $ wp plugin auto-updates enable hello\n    Plugin auto-updates for 'hello' enabled.\n    Success: Enabled 1 of 1 plugin auto-updates.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>...] [--all] [--disabled-only]"},{"name":"status","description":"Shows the status of auto-updates for a plugin.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to show the status of the auto-updates of.\n\n[--all]\n: If set, the status of auto-updates for all plugins will be shown.\n\n[--enabled-only]\n: If set, filters list of plugins to only include the ones that have\nauto-updates enabled.\n\n[--disabled-only]\n: If set, filters list of plugins to only include the ones that have\nauto-updates disabled.\n\n[--field=<field>]\n: Only show the provided field.\n\n## EXAMPLES\n\n    # Get the status of plugin auto-updates\n    $ wp plugin auto-updates status hello\n    +-------+----------+\n    | name  | status   |\n    +-------+----------+\n    | hello | disabled |\n    +-------+----------+\n\n    # Get the list of plugins that have auto-updates enabled\n    $ wp plugin auto-updates status --all --enabled-only --field=name\n    akismet\n    duplicate-post\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>...] [--all] [--enabled-only] [--disabled-only] [--field=<field>]"}]},{"name":"deactivate","description":"Deactivates one or more plugins.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to deactivate.\n\n[--uninstall]\n: Uninstall the plugin after deactivation.\n\n[--all]\n: If set, all plugins will be deactivated.\n\n [--exclude=<name>]\n: Comma separated list of plugin slugs that should be excluded from deactivation.\n\n[--network]\n: If set, the plugin will be deactivated for the entire multisite network.\n\n## EXAMPLES\n\n    # Deactivate plugin\n    $ wp plugin deactivate hello\n    Plugin 'hello' deactivated.\n    Success: Deactivated 1 of 1 plugins.\n\n    # Deactivate all plugins with exclusion\n    $ wp plugin deactivate --all --exclude=hello,wordpress-seo\n    Plugin 'contact-form-7' deactivated.\n    Plugin 'ninja-forms' deactivated.\n    Success: Deactivated 2 of 2 plugins.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>...] [--uninstall] [--all]  [--exclude=<name>] [--network]"},{"name":"delete","description":"Deletes plugin files without deactivating or uninstalling.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to delete.\n\n[--all]\n: If set, all plugins will be deleted.\n\n[--exclude=<name>]\n: Comma separated list of plugin slugs to be excluded from deletion.\n\n## EXAMPLES\n\n    # Delete plugin\n    $ wp plugin delete hello\n    Deleted 'hello' plugin.\n    Success: Deleted 1 of 1 plugins.\n\n    # Delete inactive plugins\n    $ wp plugin delete $(wp plugin list --status=inactive --field=name)\n    Deleted 'tinymce-templates' plugin.\n    Success: Deleted 1 of 1 plugins.\n\n    # Delete all plugins excluding specified ones\n    $ wp plugin delete --all --exclude=hello-dolly,jetpack\n    Deleted 'akismet' plugin.\n    Deleted 'tinymce-templates' plugin.\n    Success: Deleted 2 of 2 plugins.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>...] [--all] [--exclude=<name>]"},{"name":"get","description":"Gets details about an installed plugin.","longdesc":"## OPTIONS\n\n<plugin>\n: The plugin to get.\n\n[--field=<field>]\n: Instead of returning the whole plugin, returns the value of a single field.\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to all fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    $ wp plugin get bbpress --format=json\n    {\"name\":\"bbpress\",\"title\":\"bbPress\",\"author\":\"The bbPress Contributors\",\"version\":\"2.6-alpha\",\"description\":\"bbPress is forum software with a twist from the creators of WordPress.\",\"status\":\"active\"}\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<plugin> [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"install","description":"Installs one or more plugins.","longdesc":"## OPTIONS\n\n<plugin|zip|url>...\n: One or more plugins to install. Accepts a plugin slug, the path to a local zip file, or a URL to a remote zip file.\n\n[--version=<version>]\n: If set, get that particular version from wordpress.org, instead of the\nstable version.\n\n[--force]\n: If set, the command will overwrite any installed version of the plugin, without prompting\nfor confirmation.\n\n[--activate]\n: If set, the plugin will be activated immediately after install.\n\n[--activate-network]\n: If set, the plugin will be network activated immediately after install\n\n[--insecure]\n: Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    # Install the latest version from wordpress.org and activate\n    $ wp plugin install bbpress --activate\n    Installing bbPress (2.5.9)\n    Downloading install package from https:\/\/downloads.wordpress.org\/plugin\/bbpress.2.5.9.zip...\n    Using cached file '\/home\/vagrant\/.wp-cli\/cache\/plugin\/bbpress-2.5.9.zip'...\n    Unpacking the package...\n    Installing the plugin...\n    Plugin installed successfully.\n    Activating 'bbpress'...\n    Plugin 'bbpress' activated.\n    Success: Installed 1 of 1 plugins.\n\n    # Install the development version from wordpress.org\n    $ wp plugin install bbpress --version=dev\n    Installing bbPress (Development Version)\n    Downloading install package from https:\/\/downloads.wordpress.org\/plugin\/bbpress.zip...\n    Unpacking the package...\n    Installing the plugin...\n    Plugin installed successfully.\n    Success: Installed 1 of 1 plugins.\n\n    # Install from a local zip file\n    $ wp plugin install ..\/my-plugin.zip\n    Unpacking the package...\n    Installing the plugin...\n    Plugin installed successfully.\n    Success: Installed 1 of 1 plugins.\n\n    # Install from a remote zip file\n    $ wp plugin install http:\/\/s3.amazonaws.com\/bucketname\/my-plugin.zip?AWSAccessKeyId=123&Expires=456&Signature=abcdef\n    Downloading install package from http:\/\/s3.amazonaws.com\/bucketname\/my-plugin.zip?AWSAccessKeyId=123&Expires=456&Signature=abcdef\n    Unpacking the package...\n    Installing the plugin...\n    Plugin installed successfully.\n    Success: Installed 1 of 1 plugins.\n\n    # Update from a remote zip file\n    $ wp plugin install https:\/\/github.com\/envato\/wp-envato-market\/archive\/master.zip --force\n    Downloading install package from https:\/\/github.com\/envato\/wp-envato-market\/archive\/master.zip\n    Unpacking the package...\n    Installing the plugin...\n    Renamed Github-based project from 'wp-envato-market-master' to 'wp-envato-market'.\n    Plugin updated successfully\n    Success: Installed 1 of 1 plugins.\n\n    # Forcefully re-install all installed plugins\n    $ wp plugin install $(wp plugin list --field=name) --force\n    Installing Akismet (3.1.11)\n    Downloading install package from https:\/\/downloads.wordpress.org\/plugin\/akismet.3.1.11.zip...\n    Unpacking the package...\n    Installing the plugin...\n    Removing the old version of the plugin...\n    Plugin updated successfully\n    Success: Installed 1 of 1 plugins.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<plugin|zip|url>... [--version=<version>] [--force] [--activate] [--activate-network] [--insecure]"},{"name":"is-active","description":"Checks if a given plugin is active.","longdesc":"Returns exit code 0 when active, 1 when not active.\n\n## OPTIONS\n\n<plugin>\n: The plugin to check.\n\n[--network]\n: If set, check if plugin is network-activated.\n\n## EXAMPLES\n\n    # Check whether plugin is Active; exit status 0 if active, otherwise 1\n    $ wp plugin is-active hello\n    $ echo $?\n    1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<plugin> [--network]"},{"name":"is-installed","description":"Checks if a given plugin is installed.","longdesc":"Returns exit code 0 when installed, 1 when uninstalled.\n\n## OPTIONS\n\n<plugin>\n: The plugin to check.\n\n## EXAMPLES\n\n    # Check whether plugin is installed; exit status 0 if installed, otherwise 1\n    $ wp plugin is-installed hello\n    $ echo $?\n    1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<plugin>"},{"name":"list","description":"Gets a list of plugins.","longdesc":"Displays a list of the plugins installed on the site with activation\nstatus, whether or not there's an update available, etc.\n\nUse `--status=dropin` to list installed dropins (e.g. `object-cache.php`).\n\n## OPTIONS\n\n[--<field>=<value>]\n: Filter results based on the value of a field.\n\n[--field=<field>]\n: Prints the value of a single field for each plugin.\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - count\n  - json\n  - yaml\n---\n\n[--status=<status>]\n: Filter the output by plugin status.\n---\noptions:\n  - active\n  - active-network\n  - dropin\n  - inactive\n  - must-use\n---\n\n[--skip-update-check]\n: If set, the plugin update check will be skipped.\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each plugin:\n\n* name\n* status\n* update\n* version\n\nThese fields are optionally available:\n\n* update_version\n* update_package\n* update_id\n* title\n* description\n* file\n\n## EXAMPLES\n\n    # List active plugins on the site.\n    $ wp plugin list --status=active --format=json\n    [{\"name\":\"dynamic-hostname\",\"status\":\"active\",\"update\":\"none\",\"version\":\"0.4.2\"},{\"name\":\"tinymce-templates\",\"status\":\"active\",\"update\":\"none\",\"version\":\"4.4.3\"},{\"name\":\"wp-multibyte-patch\",\"status\":\"active\",\"update\":\"none\",\"version\":\"2.4\"},{\"name\":\"wp-total-hacks\",\"status\":\"active\",\"update\":\"none\",\"version\":\"2.0.1\"}]\n\n    # List plugins on each site in a network.\n    $ wp site list --field=url | xargs -I % wp plugin list --url=%\n    +---------+----------------+--------+---------+\n    | name    | status         | update | version |\n    +---------+----------------+--------+---------+\n    | akismet | active-network | none   | 3.1.11  |\n    | hello   | inactive       | none   | 1.6     |\n    +---------+----------------+--------+---------+\n    +---------+----------------+--------+---------+\n    | name    | status         | update | version |\n    +---------+----------------+--------+---------+\n    | akismet | active-network | none   | 3.1.11  |\n    | hello   | inactive       | none   | 1.6     |\n    +---------+----------------+--------+---------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>] [--status=<status>] [--skip-update-check]"},{"name":"path","description":"Gets the path to a plugin or to the plugin directory.","longdesc":"## OPTIONS\n\n[<plugin>]\n: The plugin to get the path to. If not set, will return the path to the\nplugins directory.\n\n[--dir]\n: If set, get the path to the closest parent directory, instead of the\nplugin file.\n\n## EXAMPLES\n\n    $ cd $(wp plugin path) && pwd\n    \/var\/www\/wordpress\/wp-content\/plugins\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>] [--dir]"},{"name":"search","description":"Searches the WordPress.org plugin directory.","longdesc":"Displays plugins in the WordPress.org plugin directory matching a given\nsearch query.\n\n## OPTIONS\n\n<search>\n: The string to search for.\n\n[--page=<page>]\n: Optional page to display.\n---\ndefault: 1\n---\n\n[--per-page=<per-page>]\n: Optional number of results to display.\n---\ndefault: 10\n---\n\n[--field=<field>]\n: Prints the value of a single field for each plugin.\n\n[--fields=<fields>]\n: Ask for specific fields from the API. Defaults to name,slug,author_profile,rating. Acceptable values:\n\n    **name**: Plugin Name\n    **slug**: Plugin Slug\n    **version**: Current Version Number\n    **author**: Plugin Author\n    **author_profile**: Plugin Author Profile\n    **contributors**: Plugin Contributors\n    **requires**: Plugin Minimum Requirements\n    **tested**: Plugin Tested Up To\n    **compatibility**: Plugin Compatible With\n    **rating**: Plugin Rating in Percent and Total Number\n    **ratings**: Plugin Ratings for each star (1-5)\n    **num_ratings**: Number of Plugin Ratings\n    **homepage**: Plugin Author's Homepage\n    **description**: Plugin's Description\n    **short_description**: Plugin's Short Description\n    **sections**: Plugin Readme Sections: description, installation, FAQ, screenshots, other notes, and changelog\n    **downloaded**: Plugin Download Count\n    **last_updated**: Plugin's Last Update\n    **added**: Plugin's Date Added to wordpress.org Repository\n    **tags**: Plugin's Tags\n    **versions**: Plugin's Available Versions with D\/L Link\n    **donate_link**: Plugin's Donation Link\n    **banners**: Plugin's Banner Image Link\n    **icons**: Plugin's Icon Image Link\n    **active_installs**: Plugin's Number of Active Installs\n    **contributors**: Plugin's List of Contributors\n    **url**: Plugin's URL on wordpress.org\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - count\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    $ wp plugin search dsgnwrks --per-page=20 --format=json\n    Success: Showing 3 of 3 plugins.\n    [{\"name\":\"DsgnWrks Instagram Importer Debug\",\"slug\":\"dsgnwrks-instagram-importer-debug\",\"rating\":0},{\"name\":\"DsgnWrks Instagram Importer\",\"slug\":\"dsgnwrks-instagram-importer\",\"rating\":84},{\"name\":\"DsgnWrks Twitter Importer\",\"slug\":\"dsgnwrks-twitter-importer\",\"rating\":80}]\n\n    $ wp plugin search dsgnwrks --fields=name,version,slug,rating,num_ratings\n    Success: Showing 3 of 3 plugins.\n    +-----------------------------------+---------+-----------------------------------+--------+-------------+\n    | name                              | version | slug                              | rating | num_ratings |\n    +-----------------------------------+---------+-----------------------------------+--------+-------------+\n    | DsgnWrks Instagram Importer Debug | 0.1.6   | dsgnwrks-instagram-importer-debug | 0      | 0           |\n    | DsgnWrks Instagram Importer       | 1.3.7   | dsgnwrks-instagram-importer       | 84     | 23          |\n    | DsgnWrks Twitter Importer         | 1.1.1   | dsgnwrks-twitter-importer         | 80     | 1           |\n    +-----------------------------------+---------+-----------------------------------+--------+-------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<search> [--page=<page>] [--per-page=<per-page>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"status","description":"Reveals the status of one or all plugins.","longdesc":"## OPTIONS\n\n[<plugin>]\n: A particular plugin to show the status for.\n\n## EXAMPLES\n\n    # Displays status of all plugins\n    $ wp plugin status\n    5 installed plugins:\n      I akismet                3.1.11\n      I easy-digital-downloads 2.5.16\n      A theme-check            20160523.1\n      I wen-logo-slider        2.0.3\n      M ns-pack                1.0.0\n    Legend: I = Inactive, A = Active, M = Must Use\n\n    # Displays status of a plugin\n    $ wp plugin status theme-check\n    Plugin theme-check details:\n        Name: Theme Check\n        Status: Active\n        Version: 20160523.1\n        Author: Otto42, pross\n        Description: A simple and easy way to test your theme for all the latest WordPress standards and practices. A great theme development tool!\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>]"},{"name":"toggle","description":"Toggles a plugin's activation state.","longdesc":"If the plugin is active, then it will be deactivated. If the plugin is\ninactive, then it will be activated.\n\n## OPTIONS\n\n<plugin>...\n: One or more plugins to toggle.\n\n[--network]\n: If set, the plugin will be toggled for the entire multisite network.\n\n## EXAMPLES\n\n    # Akismet is currently activated\n    $ wp plugin toggle akismet\n    Plugin 'akismet' deactivated.\n    Success: Toggled 1 of 1 plugins.\n\n    # Akismet is currently deactivated\n    $ wp plugin toggle akismet\n    Plugin 'akismet' activated.\n    Success: Toggled 1 of 1 plugins.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<plugin>... [--network]"},{"name":"uninstall","description":"Uninstalls one or more plugins.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to uninstall.\n\n[--deactivate]\n: Deactivate the plugin before uninstalling. Default behavior is to warn and skip if the plugin is active.\n\n[--skip-delete]\n: If set, the plugin files will not be deleted. Only the uninstall procedure\nwill be run.\n\n[--all]\n: If set, all plugins will be uninstalled.\n\n[--exclude=<name>]\n: Comma separated list of plugin slugs to be excluded from uninstall.\n\n## EXAMPLES\n\n    $ wp plugin uninstall hello\n    Uninstalled and deleted 'hello' plugin.\n    Success: Uninstalled 1 of 1 plugins.\n\n    # Uninstall all plugins excluding specified ones\n    $ wp plugin uninstall --all --exclude=hello-dolly,jetpack\n    Uninstalled and deleted 'akismet' plugin.\n    Uninstalled and deleted 'tinymce-templates' plugin.\n    Success: Uninstalled 2 of 2 plugins.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>...] [--deactivate] [--skip-delete] [--all] [--exclude=<name>]"},{"name":"update","description":"Updates one or more plugins.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to update.\n\n[--all]\n: If set, all plugins that have updates will be updated.\n\n[--exclude=<name>]\n: Comma separated list of plugin names that should be excluded from updating.\n\n[--minor]\n: Only perform updates for minor releases (e.g. from 1.3 to 1.4 instead of 2.0)\n\n[--patch]\n: Only perform updates for patch releases (e.g. from 1.3 to 1.3.3 instead of 1.4)\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - summary\n---\n\n[--version=<version>]\n: If set, the plugin will be updated to the specified version.\n\n[--dry-run]\n: Preview which plugins would be updated.\n\n[--insecure]\n: Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    $ wp plugin update bbpress --version=dev\n    Installing bbPress (Development Version)\n    Downloading install package from https:\/\/downloads.wordpress.org\/plugin\/bbpress.zip...\n    Unpacking the package...\n    Installing the plugin...\n    Removing the old version of the plugin...\n    Plugin updated successfully.\n    Success: Updated 1 of 2 plugins.\n\n    $ wp plugin update --all\n    Enabling Maintenance mode...\n    Downloading update from https:\/\/downloads.wordpress.org\/plugin\/akismet.3.1.11.zip...\n    Unpacking the update...\n    Installing the latest version...\n    Removing the old version of the plugin...\n    Plugin updated successfully.\n    Downloading update from https:\/\/downloads.wordpress.org\/plugin\/nginx-champuru.3.2.0.zip...\n    Unpacking the update...\n    Installing the latest version...\n    Removing the old version of the plugin...\n    Plugin updated successfully.\n    Disabling Maintenance mode...\n    +------------------------+-------------+-------------+---------+\n    | name                   | old_version | new_version | status  |\n    +------------------------+-------------+-------------+---------+\n    | akismet                | 3.1.3       | 3.1.11      | Updated |\n    | nginx-cache-controller | 3.1.1       | 3.2.0       | Updated |\n    +------------------------+-------------+-------------+---------+\n    Success: Updated 2 of 2 plugins.\n\n    $ wp plugin update --all --exclude=akismet\n    Enabling Maintenance mode...\n    Downloading update from https:\/\/downloads.wordpress.org\/plugin\/nginx-champuru.3.2.0.zip...\n    Unpacking the update...\n    Installing the latest version...\n    Removing the old version of the plugin...\n    Plugin updated successfully.\n    Disabling Maintenance mode...\n    +------------------------+-------------+-------------+---------+\n    | name                   | old_version | new_version | status  |\n    +------------------------+-------------+-------------+---------+\n    | nginx-cache-controller | 3.1.1       | 3.2.0       | Updated |\n    +------------------------+-------------+-------------+---------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>...] [--all] [--exclude=<name>] [--minor] [--patch] [--format=<format>] [--version=<version>] [--dry-run] [--insecure]"},{"name":"verify-checksums","description":"Verifies plugin files against WordPress.org's checksums.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to verify.\n\n[--all]\n: If set, all plugins will be verified.\n\n[--strict]\n: If set, even \"soft changes\" like readme.txt changes will trigger\nchecksum errors.\n\n[--format=<format>]\n: Render output in a specific format.\n---\ndefault: table\noptions:\n  - table\n  - json\n  - csv\n  - yaml\n  - count\n---\n\n[--insecure]\n: Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    # Verify the checksums of all installed plugins\n    $ wp plugin verify-checksums --all\n    Success: Verified 8 of 8 plugins.\n\n    # Verify the checksums of a single plugin, Akismet in this case\n    $ wp plugin verify-checksums akismet\n    Success: Verified 1 of 1 plugins.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>...] [--all] [--strict] [--format=<format>] [--insecure]"}]},{"name":"post","description":"Manages posts, content, and meta.","longdesc":"## EXAMPLES\n\n    # Create a new post.\n    $ wp post create --post_type=post --post_title='A sample post'\n    Success: Created post 123.\n\n    # Update an existing post.\n    $ wp post update 123 --post_status=draft\n    Success: Updated post 123.\n\n    # Delete an existing post.\n    $ wp post delete 123\n    Success: Trashed post 123.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"create","description":"Creates a new post.","longdesc":"## OPTIONS\n\n[--post_author=<post_author>]\n: The ID of the user who added the post. Default is the current user ID.\n\n[--post_date=<post_date>]\n: The date of the post. Default is the current time.\n\n[--post_date_gmt=<post_date_gmt>]\n: The date of the post in the GMT timezone. Default is the value of $post_date.\n\n[--post_content=<post_content>]\n: The post content. Default empty.\n\n[--post_content_filtered=<post_content_filtered>]\n: The filtered post content. Default empty.\n\n[--post_title=<post_title>]\n: The post title. Default empty.\n\n[--post_excerpt=<post_excerpt>]\n: The post excerpt. Default empty.\n\n[--post_status=<post_status>]\n: The post status. Default 'draft'.\n\n[--post_type=<post_type>]\n: The post type. Default 'post'.\n\n[--comment_status=<comment_status>]\n: Whether the post can accept comments. Accepts 'open' or 'closed'. Default is the value of 'default_comment_status' option.\n\n[--ping_status=<ping_status>]\n: Whether the post can accept pings. Accepts 'open' or 'closed'. Default is the value of 'default_ping_status' option.\n\n[--post_password=<post_password>]\n: The password to access the post. Default empty.\n\n[--post_name=<post_name>]\n: The post name. Default is the sanitized post title when creating a new post.\n\n[--from-post=<post_id>]\n: Post id of a post to be duplicated.\n\n[--to_ping=<to_ping>]\n: Space or carriage return-separated list of URLs to ping. Default empty.\n\n[--pinged=<pinged>]\n: Space or carriage return-separated list of URLs that have been pinged. Default empty.\n\n[--post_modified=<post_modified>]\n: The date when the post was last modified. Default is the current time.\n\n[--post_modified_gmt=<post_modified_gmt>]\n: The date when the post was last modified in the GMT timezone. Default is the current time.\n\n[--post_parent=<post_parent>]\n: Set this for the post it belongs to, if any. Default 0.\n\n[--menu_order=<menu_order>]\n: The order the post should be displayed in. Default 0.\n\n[--post_mime_type=<post_mime_type>]\n: The mime type of the post. Default empty.\n\n[--guid=<guid>]\n: Global Unique ID for referencing the post. Default empty.\n\n[--post_category=<post_category>]\n: Array of category names, slugs, or IDs. Defaults to value of the 'default_category' option.\n\n[--tags_input=<tags_input>]\n: Array of tag names, slugs, or IDs. Default empty.\n\n[--tax_input=<tax_input>]\n: Array of taxonomy terms keyed by their taxonomy name. Default empty.\n\n[--meta_input=<meta_input>]\n: Array in JSON format of post meta values keyed by their post meta key. Default empty.\n\n[<file>]\n: Read post content from <file>. If this value is present, the\n    `--post_content` argument will be ignored.\n\n  Passing `-` as the filename will cause post content to\n  be read from STDIN.\n\n[--<field>=<value>]\n: Associative args for the new post. See wp_insert_post().\n\n[--edit]\n: Immediately open system's editor to write or edit post content.\n\n  If content is read from a file, from STDIN, or from the `--post_content`\n  argument, that text will be loaded into the editor.\n\n[--porcelain]\n: Output just the new post id.\n\n\n## EXAMPLES\n\n    # Create post and schedule for future\n    $ wp post create --post_type=page --post_title='A future post' --post_status=future --post_date='2020-12-01 07:00:00'\n    Success: Created post 1921.\n\n    # Create post with content from given file\n    $ wp post create .\/post-content.txt --post_category=201,345 --post_title='Post from file'\n    Success: Created post 1922.\n\n    # Create a post with multiple meta values.\n    $ wp post create --post_title='A post' --post_content='Just a small post.' --meta_input='{\"key1\":\"value1\",\"key2\":\"value2\"}'\n    Success: Created post 1923.\n\n    # Create a duplicate post from existing posts.\n    $ wp post create --from-post=123 --post_title='Different Title'\n    Success: Created post 2350.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--post_author=<post_author>] [--post_date=<post_date>] [--post_date_gmt=<post_date_gmt>] [--post_content=<post_content>] [--post_content_filtered=<post_content_filtered>] [--post_title=<post_title>] [--post_excerpt=<post_excerpt>] [--post_status=<post_status>] [--post_type=<post_type>] [--comment_status=<comment_status>] [--ping_status=<ping_status>] [--post_password=<post_password>] [--post_name=<post_name>] [--from-post=<post_id>] [--to_ping=<to_ping>] [--pinged=<pinged>] [--post_modified=<post_modified>] [--post_modified_gmt=<post_modified_gmt>] [--post_parent=<post_parent>] [--menu_order=<menu_order>] [--post_mime_type=<post_mime_type>] [--guid=<guid>] [--post_category=<post_category>] [--tags_input=<tags_input>] [--tax_input=<tax_input>] [--meta_input=<meta_input>] [<file>] [--<field>=<value>] [--edit] [--porcelain]"},{"name":"delete","description":"Deletes an existing post.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of posts to delete.\n\n[--force]\n: Skip the trash bin.\n\n[--defer-term-counting]\n: Recalculate term count in batch, for a performance boost.\n\n## EXAMPLES\n\n    # Delete post skipping trash\n    $ wp post delete 123 --force\n    Success: Deleted post 123.\n\n    # Delete all pages\n    $ wp post delete $(wp post list --post_type='page' --format=ids)\n    Success: Trashed post 1164.\n    Success: Trashed post 1186.\n\n    # Delete all posts in the trash\n    $ wp post delete $(wp post list --post_status=trash --format=ids)\n    Success: Deleted post 1268.\n    Success: Deleted post 1294.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>... [--force] [--defer-term-counting]"},{"name":"edit","description":"Launches system editor to edit post content.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the post to edit.\n\n## EXAMPLES\n\n    # Launch system editor to edit post\n    $ wp post edit 123\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>"},{"name":"exists","description":"Verifies whether a post exists.","longdesc":"Displays a success message if the post does exist.\n\n## OPTIONS\n\n<id>\n: The ID of the post to check.\n\n## EXAMPLES\n\n    # The post exists.\n    $ wp post exists 1337\n    Success: Post with ID 1337 exists.\n    $ echo $?\n    0\n\n    # The post does not exist.\n    $ wp post exists 10000\n    $ echo $?\n    1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>"},{"name":"generate","description":"Generates some posts.","longdesc":"Creates a specified number of new posts with dummy data.\n\n## OPTIONS\n\n[--count=<number>]\n: How many posts to generate?\n---\ndefault: 100\n---\n\n[--post_type=<type>]\n: The type of the generated posts.\n---\ndefault: post\n---\n\n[--post_status=<status>]\n: The status of the generated posts.\n---\ndefault: publish\n---\n\n[--post_title=<post_title>]\n: The post title.\n---\ndefault:\n---\n\n[--post_author=<login>]\n: The author of the generated posts.\n---\ndefault:\n---\n\n[--post_date=<yyyy-mm-dd-hh-ii-ss>]\n: The date of the generated posts. Default: current date\n\n[--post_date_gmt=<yyyy-mm-dd-hh-ii-ss>]\n: The GMT date of the generated posts. Default: value of post_date (or current date if it's not set)\n\n[--post_content]\n: If set, the command reads the post_content from STDIN.\n\n[--max_depth=<number>]\n: For hierarchical post types, generate child posts down to a certain depth.\n---\ndefault: 1\n---\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: progress\noptions:\n  - progress\n  - ids\n---\n\n## EXAMPLES\n\n    # Generate posts.\n    $ wp post generate --count=10 --post_type=page --post_date=1999-01-04\n    Generating posts  100% [================================================] 0:01 \/ 0:04\n\n    # Generate posts with fetched content.\n    $ curl -N https:\/\/loripsum.net\/api\/5 | wp post generate --post_content --count=10\n      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                     Dload  Upload   Total   Spent    Left  Speed\n    100  2509  100  2509    0     0    616      0  0:00:04  0:00:04 --:--:--   616\n    Generating posts  100% [================================================] 0:01 \/ 0:04\n\n    # Add meta to every generated posts.\n    $ wp post generate --format=ids | xargs -d ' ' -I % wp post meta add % foo bar\n    Success: Added custom field.\n    Success: Added custom field.\n    Success: Added custom field.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--count=<number>] [--post_type=<type>] [--post_status=<status>] [--post_title=<post_title>] [--post_author=<login>] [--post_date=<yyyy-mm-dd-hh-ii-ss>] [--post_date_gmt=<yyyy-mm-dd-hh-ii-ss>] [--post_content] [--max_depth=<number>] [--format=<format>]"},{"name":"get","description":"Gets details about a post.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the post to get.\n\n[--field=<field>]\n: Instead of returning the whole post, returns the value of a single field.\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to all fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    # Save the post content to a file\n    $ wp post get 123 --field=content > file.txt\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"list","description":"Gets a list of posts.","longdesc":"Display posts based on all arguments supported by [WP_Query()](https:\/\/developer.wordpress.org\/reference\/classes\/wp_query\/).\nOnly shows post types marked as post by default.\n\n## OPTIONS\n\n[--<field>=<value>]\n: One or more args to pass to WP_Query.\n\n[--field=<field>]\n: Prints the value of a single field for each post.\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - ids\n  - json\n  - count\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each post:\n\n* ID\n* post_title\n* post_name\n* post_date\n* post_status\n\nThese fields are optionally available:\n\n* post_author\n* post_date_gmt\n* post_content\n* post_excerpt\n* comment_status\n* ping_status\n* post_password\n* to_ping\n* pinged\n* post_modified\n* post_modified_gmt\n* post_content_filtered\n* post_parent\n* guid\n* menu_order\n* post_type\n* post_mime_type\n* comment_count\n* filter\n* url\n\n## EXAMPLES\n\n    # List post\n    $ wp post list --field=ID\n    568\n    829\n    1329\n    1695\n\n    # List posts in JSON\n    $ wp post list --post_type=post --posts_per_page=5 --format=json\n    [{\"ID\":1,\"post_title\":\"Hello world!\",\"post_name\":\"hello-world\",\"post_date\":\"2015-06-20 09:00:10\",\"post_status\":\"publish\"},{\"ID\":1178,\"post_title\":\"Markup: HTML Tags and Formatting\",\"post_name\":\"markup-html-tags-and-formatting\",\"post_date\":\"2013-01-11 20:22:19\",\"post_status\":\"draft\"}]\n\n    # List all pages\n    $ wp post list --post_type=page --fields=post_title,post_status\n    +-------------+-------------+\n    | post_title  | post_status |\n    +-------------+-------------+\n    | Sample Page | publish     |\n    +-------------+-------------+\n\n    # List ids of all pages and posts\n    $ wp post list --post_type=page,post --format=ids\n    15 25 34 37 198\n\n    # List given posts\n    $ wp post list --post__in=1,3\n    +----+--------------+-------------+---------------------+-------------+\n    | ID | post_title   | post_name   | post_date           | post_status |\n    +----+--------------+-------------+---------------------+-------------+\n    | 3  | Lorem Ipsum  | lorem-ipsum | 2016-06-01 14:34:36 | publish     |\n    | 1  | Hello world! | hello-world | 2016-06-01 14:31:12 | publish     |\n    +----+--------------+-------------+---------------------+-------------+\n\n    # List given post by a specific author\n    $ wp post list --author=2\n    +----+-------------------+-------------------+---------------------+-------------+\n    | ID | post_title        | post_name         | post_date           | post_status |\n    +----+-------------------+-------------------+---------------------+-------------+\n    | 14 | New documentation | new-documentation | 2021-06-18 21:05:11 | publish     |\n    +----+-------------------+-------------------+---------------------+-------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"meta","description":"Adds, updates, deletes, and lists post custom fields.","longdesc":"## EXAMPLES\n\n    # Set post meta\n    $ wp post meta set 123 _wp_page_template about.php\n    Success: Updated custom field '_wp_page_template'.\n\n    # Get post meta\n    $ wp post meta get 123 _wp_page_template\n    about.php\n\n    # Update post meta\n    $ wp post meta update 123 _wp_page_template contact.php\n    Success: Updated custom field '_wp_page_template'.\n\n    # Delete post meta\n    $ wp post meta delete 123 _wp_page_template\n    Success: Deleted custom field.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Add a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to create.\n\n[<value>]\n: The value of the meta field. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [<value>] [--format=<format>]"},{"name":"clean-duplicates","description":"Cleans up duplicate post meta values on a post.","longdesc":"## OPTIONS\n\n<id>\n: ID of the post to clean.\n\n<key>\n: Meta key to clean up.\n\n## EXAMPLES\n\n    # Delete duplicate post meta.\n    wp post meta clean-duplicates 1234 enclosure\n    Success: Cleaned up duplicate 'enclosure' meta values.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key>"},{"name":"delete","description":"Delete a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n[<key>]\n: The name of the meta field to delete.\n\n[<value>]\n: The value to delete. If omitted, all rows with key will deleted.\n\n[--all]\n: Delete all meta for the object.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [<key>] [<value>] [--all]"},{"name":"get","description":"Get meta field value.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to get.\n\n[--format=<format>]\n: Get value in a particular format.\n---\ndefault: var_export\noptions:\n  - var_export\n  - json\n  - yaml\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [--format=<format>]"},{"name":"list","description":"List all metadata associated with an object.","longdesc":"## OPTIONS\n\n<id>\n: ID for the object.\n\n[--keys=<keys>]\n: Limit output to metadata of specific keys.\n\n[--fields=<fields>]\n: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n  - count\n---\n\n[--orderby=<fields>]\n: Set orderby which field.\n---\ndefault: id\noptions:\n - id\n - meta_key\n - meta_value\n---\n\n[--order=<order>]\n: Set ascending or descending order.\n---\ndefault: asc\noptions:\n - asc\n - desc\n---\n\n[--unserialize]\n: Unserialize meta_value output.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"},{"name":"patch","description":"Update a nested value for a meta field.","longdesc":"## OPTIONS\n\n<action>\n: Patch action to perform.\n---\noptions:\n  - insert\n  - update\n  - delete\n---\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to patch.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<action> <id> <key> <key-path>... [<value>] [--format=<format>]"},{"name":"pluck","description":"Get a nested value from a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to get.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to pluck.\n\n[--format=<format>]\n: The output format of the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n  - yaml\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> <key-path>... [--format=<format>]"},{"name":"update","description":"Update a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [<value>] [--format=<format>]"}]},{"name":"term","description":"Adds, updates, removes, and lists post terms.","longdesc":"## EXAMPLES\n\n    # Set post terms\n    $ wp post term set 123 test category\n    Success: Set terms.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Add a term to an object.","longdesc":"Append the term to the existing set of terms on the object.\n\n<id>\n: The ID of the object.\n\n<taxonomy>\n: The name of the taxonomy type to be added.\n\n<term>...\n: The slug of the term or terms to be added.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\noptions:\n  - slug\n  - id\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <taxonomy> <term>... [--by=<field>]"},{"name":"list","description":"List all terms associated with an object.","longdesc":"<id>\n: ID for the object.\n\n<taxonomy>...\n: One or more taxonomies to list.\n\n[--field=<field>]\n: Prints the value of a single field for each term.\n\n[--fields=<fields>]\n: Limit the output to specific row fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n  - count\n  - ids\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each term:\n\n* term_id\n* name\n* slug\n* taxonomy\n\nThese fields are optionally available:\n\n* term_taxonomy_id\n* description\n* term_group\n* parent\n* count\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <taxonomy>... [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"remove","description":"Remove a term from an object.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<taxonomy>\n: The name of the term's taxonomy.\n\n[<term>...]\n: The name of the term or terms to be removed from the object.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\noptions:\n  - slug\n  - id\n---\n\n[--all]\n: Remove all terms from the object.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <taxonomy> [<term>...] [--by=<field>] [--all]"},{"name":"set","description":"Set object terms.","longdesc":"Replaces existing terms on the object.\n\n<id>\n: The ID of the object.\n\n<taxonomy>\n: The name of the taxonomy type to be updated.\n\n<term>...\n: The slug of the term or terms to be updated.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\noptions:\n  - slug\n  - id\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <taxonomy> <term>... [--by=<field>]"}]},{"name":"update","description":"Updates one or more existing posts.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of posts to update.\n\n[--post_author=<post_author>]\n: The ID of the user who added the post. Default is the current user ID.\n\n[--post_date=<post_date>]\n: The date of the post. Default is the current time.\n\n[--post_date_gmt=<post_date_gmt>]\n: The date of the post in the GMT timezone. Default is the value of $post_date.\n\n[--post_content=<post_content>]\n: The post content. Default empty.\n\n[--post_content_filtered=<post_content_filtered>]\n: The filtered post content. Default empty.\n\n[--post_title=<post_title>]\n: The post title. Default empty.\n\n[--post_excerpt=<post_excerpt>]\n: The post excerpt. Default empty.\n\n[--post_status=<post_status>]\n: The post status. Default 'draft'.\n\n[--post_type=<post_type>]\n: The post type. Default 'post'.\n\n[--comment_status=<comment_status>]\n: Whether the post can accept comments. Accepts 'open' or 'closed'. Default is the value of 'default_comment_status' option.\n\n[--ping_status=<ping_status>]\n: Whether the post can accept pings. Accepts 'open' or 'closed'. Default is the value of 'default_ping_status' option.\n\n[--post_password=<post_password>]\n: The password to access the post. Default empty.\n\n[--post_name=<post_name>]\n: The post name. Default is the sanitized post title when creating a new post.\n\n[--to_ping=<to_ping>]\n: Space or carriage return-separated list of URLs to ping. Default empty.\n\n[--pinged=<pinged>]\n: Space or carriage return-separated list of URLs that have been pinged. Default empty.\n\n[--post_modified=<post_modified>]\n: The date when the post was last modified. Default is the current time.\n\n[--post_modified_gmt=<post_modified_gmt>]\n: The date when the post was last modified in the GMT timezone. Default is the current time.\n\n[--post_parent=<post_parent>]\n: Set this for the post it belongs to, if any. Default 0.\n\n[--menu_order=<menu_order>]\n: The order the post should be displayed in. Default 0.\n\n[--post_mime_type=<post_mime_type>]\n: The mime type of the post. Default empty.\n\n[--guid=<guid>]\n: Global Unique ID for referencing the post. Default empty.\n\n[--post_category=<post_category>]\n: Array of category names, slugs, or IDs. Defaults to value of the 'default_category' option.\n\n[--tags_input=<tags_input>]\n: Array of tag names, slugs, or IDs. Default empty.\n\n[--tax_input=<tax_input>]\n: Array of taxonomy terms keyed by their taxonomy name. Default empty.\n\n[--meta_input=<meta_input>]\n: Array in JSON format of post meta values keyed by their post meta key. Default empty.\n\n[<file>]\n: Read post content from <file>. If this value is present, the\n    `--post_content` argument will be ignored.\n\n  Passing `-` as the filename will cause post content to\n  be read from STDIN.\n\n--<field>=<value>\n: One or more fields to update. See wp_insert_post().\n\n[--defer-term-counting]\n: Recalculate term count in batch, for a performance boost.\n\n## EXAMPLES\n\n    $ wp post update 123 --post_name=something --post_status=draft\n    Success: Updated post 123.\n\n    # Update a post with multiple meta values.\n    $ wp post update 123 --meta_input='{\"key1\":\"value1\",\"key2\":\"value2\"}'\n    Success: Updated post 123.\n\n    # Update multiple posts at once.\n    $ wp post update 123 456 --post_author=789\n    Success: Updated post 123.\n    Success: Updated post 456.\n\n    # Update all posts of a given post type at once.\n    $ wp post update $(wp post list --post_type=page --format=ids) --post_author=123\n    Success: Updated post 123.\n    Success: Updated post 456.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>... [--post_author=<post_author>] [--post_date=<post_date>] [--post_date_gmt=<post_date_gmt>] [--post_content=<post_content>] [--post_content_filtered=<post_content_filtered>] [--post_title=<post_title>] [--post_excerpt=<post_excerpt>] [--post_status=<post_status>] [--post_type=<post_type>] [--comment_status=<comment_status>] [--ping_status=<ping_status>] [--post_password=<post_password>] [--post_name=<post_name>] [--to_ping=<to_ping>] [--pinged=<pinged>] [--post_modified=<post_modified>] [--post_modified_gmt=<post_modified_gmt>] [--post_parent=<post_parent>] [--menu_order=<menu_order>] [--post_mime_type=<post_mime_type>] [--guid=<guid>] [--post_category=<post_category>] [--tags_input=<tags_input>] [--tax_input=<tax_input>] [--meta_input=<meta_input>] [<file>] --<field>=<value> [--defer-term-counting]"}]},{"name":"post-type","description":"Retrieves details on the site's registered post types.","longdesc":"Get information on WordPress' built-in and the site's [custom post types](https:\/\/developer.wordpress.org\/plugins\/post-types\/).\n\n## EXAMPLES\n\n    # Get details about a post type\n    $ wp post-type get page --fields=name,label,hierarchical --format=json\n    {\"name\":\"page\",\"label\":\"Pages\",\"hierarchical\":true}\n\n    # List post types with 'post' capability type\n    $ wp post-type list --capability_type=post --fields=name,public\n    +---------------+--------+\n    | name          | public |\n    +---------------+--------+\n    | post          | 1      |\n    | attachment    | 1      |\n    | revision      |        |\n    | nav_menu_item |        |\n    +---------------+--------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"get","description":"Gets details about a registered post type.","longdesc":"## OPTIONS\n\n<post-type>\n: Post type slug\n\n[--field=<field>]\n: Instead of returning the whole taxonomy, returns the value of a single field.\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to all fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for the specified post type:\n\n* name\n* label\n* description\n* hierarchical\n* public\n* capability_type\n* labels\n* cap\n* supports\n\nThese fields are optionally available:\n\n* count\n\n## EXAMPLES\n\n    # Get details about the 'page' post type.\n    $ wp post-type get page --fields=name,label,hierarchical --format=json\n    {\"name\":\"page\",\"label\":\"Pages\",\"hierarchical\":true}\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<post-type> [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"list","description":"Lists registered post types.","longdesc":"## OPTIONS\n\n[--<field>=<value>]\n: Filter by one or more fields (see get_post_types() first parameter for a list of available fields).\n\n[--field=<field>]\n: Prints the value of a single field for each post type.\n\n[--fields=<fields>]\n: Limit the output to specific post type fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each post type:\n\n* name\n* label\n* description\n* hierarchical\n* public\n* capability_type\n\nThese fields are optionally available:\n\n* count\n\n## EXAMPLES\n\n    # List registered post types\n    $ wp post-type list --format=csv\n    name,label,description,hierarchical,public,capability_type\n    post,Posts,,,1,post\n    page,Pages,,1,1,page\n    attachment,Media,,,1,post\n    revision,Revisions,,,,post\n    nav_menu_item,\"Navigation Menu Items\",,,,post\n\n    # List post types with 'post' capability type\n    $ wp post-type list --capability_type=post --fields=name,public\n    +---------------+--------+\n    | name          | public |\n    +---------------+--------+\n    | post          | 1      |\n    | attachment    | 1      |\n    | revision      |        |\n    | nav_menu_item |        |\n    +---------------+--------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"}]},{"name":"rewrite","description":"Lists or flushes the site's rewrite rules, updates the permalink structure.","longdesc":"See the WordPress [Rewrite API](https:\/\/codex.wordpress.org\/Rewrite_API) and\n[WP Rewrite](https:\/\/codex.wordpress.org\/Class_Reference\/WP_Rewrite) class reference.\n\n## EXAMPLES\n\n    # Flush rewrite rules\n    $ wp rewrite flush\n    Success: Rewrite rules flushed.\n\n    # Update permalink structure\n    $ wp rewrite structure '\/%year%\/%monthnum%\/%postname%'\n    Success: Rewrite structure set.\n\n    # List rewrite rules\n    $ wp rewrite list --format=csv\n    match,query,source\n    ^wp-json\/?$,index.php?rest_route=\/,other\n    ^wp-json\/(.*)?,index.php?rest_route=\/$matches[1],other\n    category\/(.+?)\/feed\/(feed|rdf|rss|rss2|atom)\/?$,index.php?category_name=$matches[1]&feed=$matches[2],category\n    category\/(.+?)\/(feed|rdf|rss|rss2|atom)\/?$,index.php?category_name=$matches[1]&feed=$matches[2],category\n    category\/(.+?)\/embed\/?$,index.php?category_name=$matches[1]&embed=true,category\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"flush","description":"Flushes rewrite rules.","longdesc":"Resets WordPress' rewrite rules based on registered post types, etc.\n\nTo regenerate a .htaccess file with WP-CLI, you'll need to add the mod_rewrite module\nto your wp-cli.yml or config.yml. For example:\n\n```\napache_modules:\n  - mod_rewrite\n```\n\n## OPTIONS\n\n[--hard]\n: Perform a hard flush - update `.htaccess` rules as well as rewrite rules in database. Works only on single site installs.\n\n## EXAMPLES\n\n    $ wp rewrite flush\n    Success: Rewrite rules flushed.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--hard]"},{"name":"list","description":"Gets a list of the current rewrite rules.","longdesc":"## OPTIONS\n\n[--match=<url>]\n: Show rewrite rules matching a particular URL.\n\n[--source=<source>]\n: Show rewrite rules from a particular source.\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to match,query,source.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n## EXAMPLES\n\n    $ wp rewrite list --format=csv\n    match,query,source\n    ^wp-json\/?$,index.php?rest_route=\/,other\n    ^wp-json\/(.*)?,index.php?rest_route=\/$matches[1],other\n    category\/(.+?)\/feed\/(feed|rdf|rss|rss2|atom)\/?$,index.php?category_name=$matches[1]&feed=$matches[2],category\n    category\/(.+?)\/(feed|rdf|rss|rss2|atom)\/?$,index.php?category_name=$matches[1]&feed=$matches[2],category\n    category\/(.+?)\/embed\/?$,index.php?category_name=$matches[1]&embed=true,category\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--match=<url>] [--source=<source>] [--fields=<fields>] [--format=<format>]"},{"name":"structure","description":"Updates the permalink structure.","longdesc":"Sets the post permalink structure to the specified pattern.\n\nTo regenerate a .htaccess file with WP-CLI, you'll need to add\nthe mod_rewrite module to your [WP-CLI config](https:\/\/make.wordpress.org\/cli\/handbook\/config\/#config-files).\nFor example:\n\n```\napache_modules:\n  - mod_rewrite\n```\n\n## OPTIONS\n\n<permastruct>\n: The new permalink structure to apply.\n\n[--category-base=<base>]\n: Set the base for category permalinks, i.e. '\/category\/'.\n\n[--tag-base=<base>]\n: Set the base for tag permalinks, i.e. '\/tag\/'.\n\n[--hard]\n: Perform a hard flush - update `.htaccess` rules as well as rewrite rules in database.\n\n## EXAMPLES\n\n    $ wp rewrite structure '\/%year%\/%monthnum%\/%postname%\/'\n    Success: Rewrite structure set.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<permastruct> [--category-base=<base>] [--tag-base=<base>] [--hard]"}]},{"name":"role","description":"Manages user roles, including creating new roles and resetting to defaults.","longdesc":"See references for [Roles and Capabilities](https:\/\/codex.wordpress.org\/Roles_and_Capabilities) and [WP User class](https:\/\/codex.wordpress.org\/Class_Reference\/WP_User).\n\n## EXAMPLES\n\n    # List roles.\n    $ wp role list --fields=role --format=csv\n    role\n    administrator\n    editor\n    author\n    contributor\n    subscriber\n\n    # Check to see if a role exists.\n    $ wp role exists editor\n    Success: Role with ID 'editor' exists.\n\n    # Create a new role.\n    $ wp role create approver Approver\n    Success: Role with key 'approver' created.\n\n    # Delete an existing role.\n    $ wp role delete approver\n    Success: Role with key 'approver' deleted.\n\n    # Reset existing roles to their default capabilities.\n    $ wp role reset administrator author contributor\n    Success: Reset 3\/3 roles.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"create","description":"Creates a new role.","longdesc":"## OPTIONS\n\n<role-key>\n: The internal name of the role.\n\n<role-name>\n: The publicly visible name of the role.\n\n[--clone=<role>]\n: Clone capabilities from an existing role.\n\n## EXAMPLES\n\n    # Create role for Approver.\n    $ wp role create approver Approver\n    Success: Role with key 'approver' created.\n\n    # Create role for Product Administrator.\n    $ wp role create productadmin \"Product Administrator\"\n    Success: Role with key 'productadmin' created.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<role-key> <role-name> [--clone=<role>]"},{"name":"delete","description":"Deletes an existing role.","longdesc":"## OPTIONS\n\n<role-key>\n: The internal name of the role.\n\n## EXAMPLES\n\n    # Delete approver role.\n    $ wp role delete approver\n    Success: Role with key 'approver' deleted.\n\n    # Delete productadmin role.\n    wp role delete productadmin\n    Success: Role with key 'productadmin' deleted.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<role-key>"},{"name":"exists","description":"Checks if a role exists.","longdesc":"Exits with return code 0 if the role exists, 1 if it does not.\n\n## OPTIONS\n\n<role-key>\n: The internal name of the role.\n\n## EXAMPLES\n\n    # Check if a role exists.\n    $ wp role exists editor\n    Success: Role with ID 'editor' exists.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<role-key>"},{"name":"list","description":"Lists all roles.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--field=<field>]\n: Prints the value of a single field.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each role:\n\n* name\n* role\n\nThere are no optional fields.\n\n## EXAMPLES\n\n    # List roles.\n    $ wp role list --fields=role --format=csv\n    role\n    administrator\n    editor\n    author\n    contributor\n    subscriber\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--fields=<fields>] [--field=<field>] [--format=<format>]"},{"name":"reset","description":"Resets any default role to default capabilities.","longdesc":"## OPTIONS\n\n[<role-key>...]\n: The internal name of one or more roles to reset.\n\n[--all]\n: If set, all default roles will be reset.\n\n## EXAMPLES\n\n    # Reset role.\n    $ wp role reset administrator author contributor\n    Success: Reset 1\/3 roles.\n\n    # Reset all default roles.\n    $ wp role reset --all\n    Success: All default roles reset.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<role-key>...] [--all]"}]},{"name":"scaffold","description":"Generates code for post types, taxonomies, plugins, child themes, etc.","longdesc":"## EXAMPLES\n\n    # Generate a new plugin with unit tests\n    $ wp scaffold plugin sample-plugin\n    Success: Created plugin files.\n    Success: Created test files.\n\n    # Generate theme based on _s\n    $ wp scaffold _s sample-theme --theme_name=\"Sample Theme\" --author=\"John Doe\"\n    Success: Created theme 'Sample Theme'.\n\n    # Generate code for post type registration in given theme\n    $ wp scaffold post-type movie --label=Movie --theme=simple-life\n    Success: Created \/var\/www\/example.com\/public_html\/wp-content\/themes\/simple-life\/post-types\/movie.php\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"block","description":"Generates PHP, JS and CSS code for registering a Gutenberg block for a plugin or theme.","longdesc":"**Warning: `wp scaffold block` is deprecated.**\n\nThe official script to generate a block is the [@wordpress\/create-block](https:\/\/developer.wordpress.org\/block-editor\/designers-developers\/developers\/packages\/packages-create-block\/) package.\n\nSee the [Create a Block tutorial](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/) for a complete walk-through.\n\n## OPTIONS\n\n<slug>\n: The internal name of the block.\n\n[--title=<title>]\n: The display title for your block.\n\n[--dashicon=<dashicon>]\n: The dashicon to make it easier to identify your block.\n\n[--category=<category>]\n: The category name to help users browse and discover your block.\n---\ndefault: widgets\noptions:\n  - common\n  - embed\n  - formatting\n  - layout\n  - widgets\n---\n\n[--theme]\n: Create files in the active theme directory. Specify a theme with `--theme=<theme>` to have the file placed in that theme.\n\n[--plugin=<plugin>]\n: Create files in the given plugin's directory.\n\n[--force]\n: Overwrite files that already exist.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<slug> [--title=<title>] [--dashicon=<dashicon>] [--category=<category>] [--theme] [--plugin=<plugin>] [--force]"},{"name":"child-theme","description":"Generates child theme based on an existing theme.","longdesc":"Creates a child theme folder with `functions.php` and `style.css` files.\n\n## OPTIONS\n\n<slug>\n: The slug for the new child theme.\n\n--parent_theme=<slug>\n: What to put in the 'Template:' header in 'style.css'.\n\n[--theme_name=<title>]\n: What to put in the 'Theme Name:' header in 'style.css'.\n\n[--author=<full-name>]\n: What to put in the 'Author:' header in 'style.css'.\n\n[--author_uri=<uri>]\n: What to put in the 'Author URI:' header in 'style.css'.\n\n[--theme_uri=<uri>]\n: What to put in the 'Theme URI:' header in 'style.css'.\n\n[--activate]\n: Activate the newly created child theme.\n\n[--enable-network]\n: Enable the newly created child theme for the entire network.\n\n[--force]\n: Overwrite files that already exist.\n\n## EXAMPLES\n\n    # Generate a 'sample-theme' child theme based on TwentySixteen\n    $ wp scaffold child-theme sample-theme --parent_theme=twentysixteen\n    Success: Created '\/var\/www\/example.com\/public_html\/wp-content\/themes\/sample-theme'.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<slug> --parent_theme=<slug> [--theme_name=<title>] [--author=<full-name>] [--author_uri=<uri>] [--theme_uri=<uri>] [--activate] [--enable-network] [--force]"},{"name":"plugin","description":"Generates starter code for a plugin.","longdesc":"The following files are always generated:\n\n* `plugin-slug.php` is the main PHP plugin file.\n* `readme.txt` is the readme file for the plugin.\n* `package.json` needed by NPM holds various metadata relevant to the project. Packages: `grunt`, `grunt-wp-i18n` and `grunt-wp-readme-to-markdown`. Scripts: `start`, `readme`, `i18n`.\n* `Gruntfile.js` is the JS file containing Grunt tasks. Tasks: `i18n` containing `addtextdomain` and `makepot`, `readme` containing `wp_readme_to_markdown`.\n* `.editorconfig` is the configuration file for Editor.\n* `.gitignore` tells which files (or patterns) git should ignore.\n* `.distignore` tells which files and folders should be ignored in distribution.\n\nThe following files are also included unless the `--skip-tests` is used:\n\n* `phpunit.xml.dist` is the configuration file for PHPUnit.\n* `.travis.yml` is the configuration file for Travis CI. Use `--ci=<provider>` to select a different service.\n* `bin\/install-wp-tests.sh` configures the WordPress test suite and a test database.\n* `tests\/bootstrap.php` is the file that makes the current plugin active when running the test suite.\n* `tests\/test-sample.php` is a sample file containing test cases.\n* `.phpcs.xml.dist` is a collection of PHP_CodeSniffer rules.\n\n## OPTIONS\n\n<slug>\n: The internal name of the plugin.\n\n[--dir=<dirname>]\n: Put the new plugin in some arbitrary directory path. Plugin directory will be path plus supplied slug.\n\n[--plugin_name=<title>]\n: What to put in the 'Plugin Name:' header.\n\n[--plugin_description=<description>]\n: What to put in the 'Description:' header.\n\n[--plugin_author=<author>]\n: What to put in the 'Author:' header.\n\n[--plugin_author_uri=<url>]\n: What to put in the 'Author URI:' header.\n\n[--plugin_uri=<url>]\n: What to put in the 'Plugin URI:' header.\n\n[--skip-tests]\n: Don't generate files for unit testing.\n\n[--ci=<provider>]\n: Choose a configuration file for a continuous integration provider.\n---\ndefault: travis\noptions:\n  - travis\n  - circle\n  - gitlab\n---\n\n[--activate]\n: Activate the newly generated plugin.\n\n[--activate-network]\n: Network activate the newly generated plugin.\n\n[--force]\n: Overwrite files that already exist.\n\n## EXAMPLES\n\n    $ wp scaffold plugin sample-plugin\n    Success: Created plugin files.\n    Success: Created test files.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<slug> [--dir=<dirname>] [--plugin_name=<title>] [--plugin_description=<description>] [--plugin_author=<author>] [--plugin_author_uri=<url>] [--plugin_uri=<url>] [--skip-tests] [--ci=<provider>] [--activate] [--activate-network] [--force]"},{"name":"plugin-tests","description":"Generates files needed for running PHPUnit tests in a plugin.","longdesc":"The following files are generated by default:\n\n* `phpunit.xml.dist` is the configuration file for PHPUnit.\n* `.travis.yml` is the configuration file for Travis CI. Use `--ci=<provider>` to select a different service.\n* `bin\/install-wp-tests.sh` configures the WordPress test suite and a test database.\n* `tests\/bootstrap.php` is the file that makes the current plugin active when running the test suite.\n* `tests\/test-sample.php` is a sample file containing the actual tests.\n* `.phpcs.xml.dist` is a collection of PHP_CodeSniffer rules.\n\nLearn more from the [plugin unit tests documentation](https:\/\/make.wordpress.org\/cli\/handbook\/plugin-unit-tests\/).\n\n## ENVIRONMENT\n\nThe `tests\/bootstrap.php` file looks for the WP_TESTS_DIR environment\nvariable.\n\n## OPTIONS\n\n[<plugin>]\n: The name of the plugin to generate test files for.\n\n[--dir=<dirname>]\n: Generate test files for a non-standard plugin path. If no plugin slug is specified, the directory name is used.\n\n[--ci=<provider>]\n: Choose a configuration file for a continuous integration provider.\n---\ndefault: travis\noptions:\n  - travis\n  - circle\n  - gitlab\n  - bitbucket\n---\n\n[--force]\n: Overwrite files that already exist.\n\n## EXAMPLES\n\n    # Generate unit test files for plugin 'sample-plugin'.\n    $ wp scaffold plugin-tests sample-plugin\n    Success: Created test files.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<plugin>] [--dir=<dirname>] [--ci=<provider>] [--force]"},{"name":"post-type","description":"Generates PHP code for registering a custom post type.","longdesc":"## OPTIONS\n\n<slug>\n: The internal name of the post type.\n\n[--label=<label>]\n: The text used to translate the update messages.\n\n[--textdomain=<textdomain>]\n: The textdomain to use for the labels.\n\n[--dashicon=<dashicon>]\n: The dashicon to use in the menu.\n\n[--theme]\n: Create a file in the active theme directory, instead of sending to\nSTDOUT. Specify a theme with `--theme=<theme>` to have the file placed in that theme.\n\n[--plugin=<plugin>]\n: Create a file in the given plugin's directory, instead of sending to STDOUT.\n\n[--raw]\n: Just generate the `register_post_type()` call and nothing else.\n\n[--force]\n: Overwrite files that already exist.\n\n## EXAMPLES\n\n    # Generate a 'movie' post type for the 'simple-life' theme\n    $ wp scaffold post-type movie --label=Movie --theme=simple-life\n    Success: Created '\/var\/www\/example.com\/public_html\/wp-content\/themes\/simple-life\/post-types\/movie.php'.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<slug> [--label=<label>] [--textdomain=<textdomain>] [--dashicon=<dashicon>] [--theme] [--plugin=<plugin>] [--raw] [--force]"},{"name":"taxonomy","description":"Generates PHP code for registering a custom taxonomy.","longdesc":"## OPTIONS\n\n<slug>\n: The internal name of the taxonomy.\n\n[--post_types=<post-types>]\n: Post types to register for use with the taxonomy.\n\n[--label=<label>]\n: The text used to translate the update messages.\n\n[--textdomain=<textdomain>]\n: The textdomain to use for the labels.\n\n[--theme]\n: Create a file in the active theme directory, instead of sending to\nSTDOUT. Specify a theme with `--theme=<theme>` to have the file placed in that theme.\n\n[--plugin=<plugin>]\n: Create a file in the given plugin's directory, instead of sending to STDOUT.\n\n[--raw]\n: Just generate the `register_taxonomy()` call and nothing else.\n\n[--force]\n: Overwrite files that already exist.\n\n## EXAMPLES\n\n    # Generate PHP code for registering a custom taxonomy and save in a file\n    $ wp scaffold taxonomy venue --post_types=event,presentation > taxonomy.php\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<slug> [--post_types=<post-types>] [--label=<label>] [--textdomain=<textdomain>] [--theme] [--plugin=<plugin>] [--raw] [--force]"},{"name":"theme-tests","description":"Generates files needed for running PHPUnit tests in a theme.","longdesc":"The following files are generated by default:\n\n* `phpunit.xml.dist` is the configuration file for PHPUnit.\n* `.travis.yml` is the configuration file for Travis CI. Use `--ci=<provider>` to select a different service.\n* `bin\/install-wp-tests.sh` configures the WordPress test suite and a test database.\n* `tests\/bootstrap.php` is the file that makes the current theme active when running the test suite.\n* `tests\/test-sample.php` is a sample file containing the actual tests.\n* `.phpcs.xml.dist` is a collection of PHP_CodeSniffer rules.\n\nLearn more from the [plugin unit tests documentation](https:\/\/make.wordpress.org\/cli\/handbook\/plugin-unit-tests\/).\n\n## ENVIRONMENT\n\nThe `tests\/bootstrap.php` file looks for the WP_TESTS_DIR environment\nvariable.\n\n## OPTIONS\n\n[<theme>]\n: The name of the theme to generate test files for.\n\n[--dir=<dirname>]\n: Generate test files for a non-standard theme path. If no theme slug is specified, the directory name is used.\n\n[--ci=<provider>]\n: Choose a configuration file for a continuous integration provider.\n---\ndefault: travis\noptions:\n  - travis\n  - circle\n  - gitlab\n  - bitbucket\n---\n\n[--force]\n: Overwrite files that already exist.\n\n## EXAMPLES\n\n    # Generate unit test files for theme 'twentysixteenchild'.\n    $ wp scaffold theme-tests twentysixteenchild\n    Success: Created test files.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<theme>] [--dir=<dirname>] [--ci=<provider>] [--force]"},{"name":"underscores","description":"Generates starter code for a theme based on _s.","longdesc":"See the [Underscores website](https:\/\/underscores.me\/) for more details.\n\n## OPTIONS\n\n<slug>\n: The slug for the new theme, used for prefixing functions.\n\n[--activate]\n: Activate the newly downloaded theme.\n\n[--enable-network]\n: Enable the newly downloaded theme for the entire network.\n\n[--theme_name=<title>]\n: What to put in the 'Theme Name:' header in 'style.css'.\n\n[--author=<full-name>]\n: What to put in the 'Author:' header in 'style.css'.\n\n[--author_uri=<uri>]\n: What to put in the 'Author URI:' header in 'style.css'.\n\n[--sassify]\n: Include stylesheets as SASS.\n\n[--woocommerce]\n: Include WooCommerce boilerplate files.\n\n[--force]\n: Overwrite files that already exist.\n\n## EXAMPLES\n\n    # Generate a theme with name \"Sample Theme\" and author \"John Doe\"\n    $ wp scaffold _s sample-theme --theme_name=\"Sample Theme\" --author=\"John Doe\"\n    Success: Created theme 'Sample Theme'.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<slug> [--activate] [--enable-network] [--theme_name=<title>] [--author=<full-name>] [--author_uri=<uri>] [--sassify] [--woocommerce] [--force]"}]},{"name":"search-replace","description":"Searches\/replaces strings in the database.","longdesc":"Searches through all rows in a selection of tables and replaces\nappearances of the first string with the second string.\n\nBy default, the command uses tables registered to the `$wpdb` object. On\nmultisite, this will just be the tables for the current site unless\n`--network` is specified.\n\nSearch\/replace intelligently handles PHP serialized data, and does not\nchange primary key values.\n\n## OPTIONS\n\n<old>\n: A string to search for within the database.\n\n<new>\n: Replace instances of the first string with this new string.\n\n[<table>...]\n: List of database tables to restrict the replacement to. Wildcards are\nsupported, e.g. `'wp_*options'` or `'wp_post*'`.\n\n[--dry-run]\n: Run the entire search\/replace operation and show report, but don't save\nchanges to the database.\n\n[--network]\n: Search\/replace through all the tables registered to $wpdb in a\nmultisite install.\n\n[--all-tables-with-prefix]\n: Enable replacement on any tables that match the table prefix even if\nnot registered on $wpdb.\n\n[--all-tables]\n: Enable replacement on ALL tables in the database, regardless of the\nprefix, and even if not registered on $wpdb. Overrides --network\nand --all-tables-with-prefix.\n\n[--export[=<file>]]\n: Write transformed data as SQL file instead of saving replacements to\nthe database. If <file> is not supplied, will output to STDOUT.\n\n[--export_insert_size=<rows>]\n: Define number of rows in single INSERT statement when doing SQL export.\nYou might want to change this depending on your database configuration\n(e.g. if you need to do fewer queries). Default: 50\n\n[--skip-tables=<tables>]\n: Do not perform the replacement on specific tables. Use commas to\nspecify multiple tables. Wildcards are supported, e.g. `'wp_*options'` or `'wp_post*'`.\n\n[--skip-columns=<columns>]\n: Do not perform the replacement on specific columns. Use commas to\nspecify multiple columns.\n\n[--include-columns=<columns>]\n: Perform the replacement on specific columns. Use commas to\nspecify multiple columns.\n\n[--precise]\n: Force the use of PHP (instead of SQL) which is more thorough,\nbut slower.\n\n[--recurse-objects]\n: Enable recursing into objects to replace strings. Defaults to true;\npass --no-recurse-objects to disable.\n\n[--verbose]\n: Prints rows to the console as they're updated.\n\n[--regex]\n: Runs the search using a regular expression (without delimiters).\nWarning: search-replace will take about 15-20x longer when using --regex.\n\n[--regex-flags=<regex-flags>]\n: Pass PCRE modifiers to regex search-replace (e.g. 'i' for case-insensitivity).\n\n[--regex-delimiter=<regex-delimiter>]\n: The delimiter to use for the regex. It must be escaped if it appears in the search string. The default value is the result of `chr(1)`.\n\n[--regex-limit=<regex-limit>]\n: The maximum possible replacements for the regex per row (or per unserialized data bit per row). Defaults to -1 (no limit).\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - count\n---\n\n[--report]\n: Produce report. Defaults to true.\n\n[--report-changed-only]\n: Report changed fields only. Defaults to false, unless logging, when it defaults to true.\n\n[--log[=<file>]]\n: Log the items changed. If <file> is not supplied or is \"-\", will output to STDOUT.\nWarning: causes a significant slow down, similar or worse to enabling --precise or --regex.\n\n[--before_context=<num>]\n: For logging, number of characters to display before the old match and the new replacement. Default 40. Ignored if not logging.\n\n[--after_context=<num>]\n: For logging, number of characters to display after the old match and the new replacement. Default 40. Ignored if not logging.\n\n## EXAMPLES\n\n    # Search and replace but skip one column\n    $ wp search-replace 'http:\/\/example.test' 'http:\/\/example.com' --skip-columns=guid\n\n    # Run search\/replace operation but dont save in database\n    $ wp search-replace 'foo' 'bar' wp_posts wp_postmeta wp_terms --dry-run\n\n    # Run case-insensitive regex search\/replace operation (slow)\n    $ wp search-replace '\\[foo id=\"([0-9]+)\"' '[bar id=\"\\1\"' --regex --regex-flags='i'\n\n    # Turn your production multisite database into a local dev database\n    $ wp search-replace --url=example.com example.com example.test 'wp_*options' wp_blogs\n\n    # Search\/replace to a SQL file without transforming the database\n    $ wp search-replace foo bar --export=database.sql\n\n    # Bash script: Search\/replace production to development url (multisite compatible)\n    #!\/bin\/bash\n    if $(wp --url=http:\/\/example.com core is-installed --network); then\n        wp search-replace --url=http:\/\/example.com 'http:\/\/example.com' 'http:\/\/example.test' --recurse-objects --network --skip-columns=guid --skip-tables=wp_users\n    else\n        wp search-replace 'http:\/\/example.com' 'http:\/\/example.test' --recurse-objects --skip-columns=guid --skip-tables=wp_users\n    fi\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<old> <new> [<table>...] [--dry-run] [--network] [--all-tables-with-prefix] [--all-tables] [--export[=<file>]] [--export_insert_size=<rows>] [--skip-tables=<tables>] [--skip-columns=<columns>] [--include-columns=<columns>] [--precise] [--recurse-objects] [--verbose] [--regex] [--regex-flags=<regex-flags>] [--regex-delimiter=<regex-delimiter>] [--regex-limit=<regex-limit>] [--format=<format>] [--report] [--report-changed-only] [--log[=<file>]] [--before_context=<num>] [--after_context=<num>]"},{"name":"server","description":"Launches PHP's built-in web server for a specific WordPress installation.","longdesc":"Uses `php -S` to launch a web server serving the WordPress webroot.\n<http:\/\/php.net\/manual\/en\/features.commandline.webserver.php>\n\nImportantly, PHP's built-in web server doesn't support `.htaccess` files.\nIf this is a requirement, please use a more advanced web server.\n\n## OPTIONS\n\n[--host=<host>]\n: The hostname to bind the server to.\n---\ndefault: localhost\n---\n\n[--port=<port>]\n: The port number to bind the server to.\n---\ndefault: 8080\n---\n\n[--docroot=<path>]\n: The path to use as the document root. If the path global parameter is\nset, the default value is it.\n\n[--config=<file>]\n: Configure the server with a specific .ini file.\n\n## EXAMPLES\n\n    # Make the instance available on any address (with port 8080)\n    $ wp server --host=0.0.0.0\n    PHP 5.6.9 Development Server started at Tue May 24 01:27:11 2016\n    Listening on http:\/\/0.0.0.0:8080\n    Document root is \/\n    Press Ctrl-C to quit.\n\n    # Run on port 80 (for multisite)\n    $ wp server --host=localhost.localdomain --port=80\n    PHP 5.6.9 Development Server started at Tue May 24 01:30:06 2016\n    Listening on http:\/\/localhost1.localdomain1:80\n    Document root is \/\n    Press Ctrl-C to quit.\n\n    # Configure the server with a specific .ini file\n    $ wp server --config=development.ini\n    PHP 7.0.9 Development Server started at Mon Aug 22 12:09:04 2016\n    Listening on http:\/\/localhost:8080\n    Document root is \/\n    Press Ctrl-C to quit.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--host=<host>] [--port=<port>] [--docroot=<path>] [--config=<file>]"},{"name":"shell","description":"Opens an interactive PHP console for running and testing PHP code.","longdesc":"`wp shell` allows you to evaluate PHP statements and expressions\ninteractively, from within a WordPress environment. Type a bit of code,\nhit enter, and see the code execute right before you. Because WordPress\nis loaded, you have access to all the functions, classes and globals\nthat you can use within a WordPress plugin, for example.\n\n## OPTIONS\n\n[--basic]\n: Force the use of WP-CLI's built-in PHP REPL, even if the Boris or\nPsySH PHP REPLs are available.\n\n## EXAMPLES\n\n    # Call get_bloginfo() to get the name of the site.\n    $ wp shell\n    wp> get_bloginfo( 'name' );\n    => string(6) \"WP-CLI\"\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--basic]"},{"name":"sidebar","description":"Lists registered sidebars.","longdesc":"A [sidebar](https:\/\/developer.wordpress.org\/themes\/functionality\/sidebars\/) is any widgetized area of your theme.\n\n## EXAMPLES\n\n    # List sidebars\n    $ wp sidebar list --fields=name,id --format=csv\n    name,id\n    \"Widget Area\",sidebar-1\n    \"Inactive Widgets\",wp_inactive_widgets\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"list","description":"Lists registered sidebars.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - ids\n  - count\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each sidebar:\n\n* name\n* id\n* description\n\nThese fields are optionally available:\n\n* class\n* before_widget\n* after_widget\n* before_title\n* after_title\n\n## EXAMPLES\n\n    $ wp sidebar list --fields=name,id --format=csv\n    name,id\n    \"Widget Area\",sidebar-1\n    \"Inactive Widgets\",wp_inactive_widgets\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--fields=<fields>] [--format=<format>]"}]},{"name":"site","description":"Creates, deletes, empties, moderates, and lists one or more sites on a multisite installation.","longdesc":"## EXAMPLES\n\n    # Create site\n    $ wp site create --slug=example\n    Success: Site 3 created: www.example.com\/example\/\n\n    # Output a simple list of site URLs\n    $ wp site list --field=url\n    http:\/\/www.example.com\/\n    http:\/\/www.example.com\/subdir\/\n\n    # Delete site\n    $ wp site delete 123\n    Are you sure you want to delete the 'http:\/\/www.example.com\/example' site? [y\/n] y\n    Success: The site at 'http:\/\/www.example.com\/example' was deleted.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"activate","description":"Activates one or more sites.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of sites to activate.\n\n## EXAMPLES\n\n    $ wp site activate 123\n    Success: Site 123 activated.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"archive","description":"Archives one or more sites.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of sites to archive.\n\n## EXAMPLES\n\n    $ wp site archive 123\n    Success: Site 123 archived.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"create","description":"Creates a site in a multisite installation.","longdesc":"## OPTIONS\n\n--slug=<slug>\n: Path for the new site. Subdomain on subdomain installs, directory on subdirectory installs.\n\n[--title=<title>]\n: Title of the new site. Default: prettified slug.\n\n[--email=<email>]\n: Email for admin user. User will be created if none exists. Assignment to super admin if not included.\n\n[--network_id=<network-id>]\n: Network to associate new site with. Defaults to current network (typically 1).\n\n[--private]\n: If set, the new site will be non-public (not indexed)\n\n[--porcelain]\n: If set, only the site id will be output on success.\n\n## EXAMPLES\n\n    $ wp site create --slug=example\n    Success: Site 3 created: http:\/\/www.example.com\/example\/\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"--slug=<slug> [--title=<title>] [--email=<email>] [--network_id=<network-id>] [--private] [--porcelain]"},{"name":"deactivate","description":"Deactivates one or more sites.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of sites to deactivate.\n\n## EXAMPLES\n\n    $ wp site deactivate 123\n    Success: Site 123 deactivated.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"delete","description":"Deletes a site in a multisite installation.","longdesc":"## OPTIONS\n\n[<site-id>]\n: The id of the site to delete. If not provided, you must set the --slug parameter.\n\n[--slug=<slug>]\n: Path of the blog to be deleted. Subdomain on subdomain installs, directory on subdirectory installs.\n\n[--yes]\n: Answer yes to the confirmation message.\n\n[--keep-tables]\n: Delete the blog from the list, but don't drop it's tables.\n\n## EXAMPLES\n\n    $ wp site delete 123\n    Are you sure you want to delete the http:\/\/www.example.com\/example site? [y\/n] y\n    Success: The site at 'http:\/\/www.example.com\/example' was deleted.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<site-id>] [--slug=<slug>] [--yes] [--keep-tables]"},{"name":"empty","description":"Empties a site of its content (posts, comments, terms, and meta).","longdesc":"Truncates posts, comments, and terms tables to empty a site of its\ncontent. Doesn't affect site configuration (options) or users.\n\nIf running a persistent object cache, make sure to flush the cache\nafter emptying the site, as the cache values will be invalid otherwise.\n\nTo also empty custom database tables, you'll need to hook into command\nexecution:\n\n```\nWP_CLI::add_hook( 'after_invoke:site empty', function(){\n    global $wpdb;\n    foreach( array( 'p2p', 'p2pmeta' ) as $table ) {\n        $table = $wpdb->$table;\n        $wpdb->query( \"TRUNCATE $table\" );\n    }\n});\n```\n\n## OPTIONS\n\n[--uploads]\n: Also delete *all* files in the site's uploads directory.\n\n[--yes]\n: Proceed to empty the site without a confirmation prompt.\n\n## EXAMPLES\n\n    $ wp site empty\n    Are you sure you want to empty the site at http:\/\/www.example.com of all posts, links, comments, and terms? [y\/n] y\n    Success: The site at 'http:\/\/www.example.com' was emptied.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--uploads] [--yes]"},{"name":"list","description":"Lists all sites in a multisite installation.","longdesc":"## OPTIONS\n\n[--network=<id>]\n: The network to which the sites belong.\n\n[--<field>=<value>]\n: Filter by one or more fields (see \"Available Fields\" section). However,\n'url' isn't an available filter, because it's created from domain + path.\n\n[--site__in=<value>]\n: Only list the sites with these blog_id values (comma-separated).\n\n[--field=<field>]\n: Prints the value of a single field for each site.\n\n[--fields=<fields>]\n: Comma-separated list of fields to show.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - count\n  - ids\n  - json\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each site:\n\n* blog_id\n* url\n* last_updated\n* registered\n\nThese fields are optionally available:\n\n* site_id\n* domain\n* path\n* public\n* archived\n* mature\n* spam\n* deleted\n* lang_id\n\n## EXAMPLES\n\n    # Output a simple list of site URLs\n    $ wp site list --field=url\n    http:\/\/www.example.com\/\n    http:\/\/www.example.com\/subdir\/\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--network=<id>] [--<field>=<value>] [--site__in=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"mature","description":"Sets one or more sites as mature.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of sites to set as mature.\n\n## EXAMPLES\n\n    $ wp site mature 123\n    Success: Site 123 marked as mature.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"meta","description":"Adds, updates, deletes, and lists site custom fields.","longdesc":"## EXAMPLES\n\n    # Set site meta\n    $ wp site meta set 123 bio \"Mary is a WordPress developer.\"\n    Success: Updated custom field 'bio'.\n\n    # Get site meta\n    $ wp site meta get 123 bio\n    Mary is a WordPress developer.\n\n    # Update site meta\n    $ wp site meta update 123 bio \"Mary is an awesome WordPress developer.\"\n    Success: Updated custom field 'bio'.\n\n    # Delete site meta\n    $ wp site meta delete 123 bio\n    Success: Deleted custom field.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Add a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to create.\n\n[<value>]\n: The value of the meta field. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [<value>] [--format=<format>]"},{"name":"delete","description":"Delete a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n[<key>]\n: The name of the meta field to delete.\n\n[<value>]\n: The value to delete. If omitted, all rows with key will deleted.\n\n[--all]\n: Delete all meta for the object.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [<key>] [<value>] [--all]"},{"name":"get","description":"Get meta field value.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to get.\n\n[--format=<format>]\n: Get value in a particular format.\n---\ndefault: var_export\noptions:\n  - var_export\n  - json\n  - yaml\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [--format=<format>]"},{"name":"list","description":"List all metadata associated with an object.","longdesc":"## OPTIONS\n\n<id>\n: ID for the object.\n\n[--keys=<keys>]\n: Limit output to metadata of specific keys.\n\n[--fields=<fields>]\n: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n  - count\n---\n\n[--orderby=<fields>]\n: Set orderby which field.\n---\ndefault: id\noptions:\n - id\n - meta_key\n - meta_value\n---\n\n[--order=<order>]\n: Set ascending or descending order.\n---\ndefault: asc\noptions:\n - asc\n - desc\n---\n\n[--unserialize]\n: Unserialize meta_value output.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"},{"name":"patch","description":"Update a nested value for a meta field.","longdesc":"## OPTIONS\n\n<action>\n: Patch action to perform.\n---\noptions:\n  - insert\n  - update\n  - delete\n---\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to patch.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<action> <id> <key> <key-path>... [<value>] [--format=<format>]"},{"name":"pluck","description":"Get a nested value from a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to get.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to pluck.\n\n[--format=<format>]\n: The output format of the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n  - yaml\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> <key-path>... [--format=<format>]"},{"name":"update","description":"Update a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [<value>] [--format=<format>]"}]},{"name":"option","description":"Adds, updates, deletes, and lists site options in a multisite installation.","longdesc":"## EXAMPLES\n\n    # Get site registration\n    $ wp site option get registration\n    none\n\n    # Add site option\n    $ wp site option add my_option foobar\n    Success: Added 'my_option' site option.\n\n    # Update site option\n    $ wp site option update my_option '{\"foo\": \"bar\"}' --format=json\n    Success: Updated 'my_option' site option.\n\n    # Delete site option\n    $ wp site option delete my_option\n    Success: Deleted 'my_option' site option.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Adds a site option.","longdesc":"## OPTIONS\n\n<key>\n: The name of the site option to add.\n\n[<value>]\n: The value of the site option to add. If ommited, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## EXAMPLES\n\n    # Create a site option by reading a JSON file\n    $ wp site option add my_option --format=json < config.json\n    Success: Added 'my_option' site option.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [<value>] [--format=<format>]"},{"name":"delete","description":"Deletes a site option.","longdesc":"## OPTIONS\n\n<key>\n: Key for the site option.\n\n## EXAMPLES\n\n    $ wp site option delete my_option\n    Success: Deleted 'my_option' site option.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key>"},{"name":"get","description":"Gets a site option.","longdesc":"## OPTIONS\n\n<key>\n: Key for the site option.\n\n[--format=<format>]\n: Get value in a particular format.\n---\ndefault: var_export\noptions:\n  - var_export\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    # Get site upload filetypes\n    $ wp site option get upload_filetypes\n    jpg jpeg png gif mov avi mpg\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [--format=<format>]"},{"name":"list","description":"Lists site options.","longdesc":"## OPTIONS\n\n[--search=<pattern>]\n: Use wildcards ( * and ? ) to match option name.\n\n[--site_id=<id>]\n: Limit options to those of a particular site id.\n\n[--field=<field>]\n: Prints the value of a single field.\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: The serialization format for the value. total_bytes displays the total size of matching options in bytes.\n---\ndefault: table\noptions:\n  - table\n  - json\n  - csv\n  - count\n  - yaml\n  - total_bytes\n---\n\n## AVAILABLE FIELDS\n\nThis field will be displayed by default for each matching option:\n\n* meta_key\n* meta_value\n\nThese fields are optionally available:\n\n* meta_id\n* site_id\n* size_bytes\n\n## EXAMPLES\n\n    # List all site options begining with \"i2f_\"\n    $ wp site option list --search=\"i2f_*\"\n    +-------------+--------------+\n    | meta_key    | meta_value   |\n    +-------------+--------------+\n    | i2f_version | 0.1.0        |\n    +-------------+--------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--search=<pattern>] [--site_id=<id>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"patch","description":"Updates a nested value in an option.","longdesc":"## OPTIONS\n\n<action>\n: Patch action to perform.\n---\noptions:\n  - insert\n  - update\n  - delete\n---\n\n<key>\n: The option name.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to patch.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<action> <key> <key-path>... [<value>] [--format=<format>]"},{"name":"pluck","description":"Gets a nested value from an option.","longdesc":"## OPTIONS\n\n<key>\n: The option name.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to pluck.\n\n[--format=<format>]\n: The output format of the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n  - yaml\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> <key-path>... [--format=<format>]"},{"name":"update","description":"Updates a site option.","longdesc":"## OPTIONS\n\n<key>\n: The name of the site option to update.\n\n[<value>]\n: The new value. If ommited, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## EXAMPLES\n\n    # Update a site option by reading from a file\n    $ wp site option update my_option < value.txt\n    Success: Updated 'my_option' site option.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [<value>] [--format=<format>]"}]},{"name":"private","description":"Sets one or more sites as private.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of sites to set as private.\n\n## EXAMPLES\n\n    $ wp site private 123\n    Success: Site 123 marked as private.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"public","description":"Sets one or more sites as public.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of sites to set as public.\n\n## EXAMPLES\n\n    $ wp site public 123\n    Success: Site 123 marked as public.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"spam","description":"Marks one or more sites as spam.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of sites to be marked as spam.\n\n## EXAMPLES\n\n    $ wp site spam 123\n    Success: Site 123 marked as spam.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"switch-language","description":"Activates a given language.","longdesc":"## OPTIONS\n\n<language>\n: Language code to activate.\n\n## EXAMPLES\n\n    $ wp site switch-language ja\n    Success: Language activated.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<language>"},{"name":"unarchive","description":"Unarchives one or more sites.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of sites to unarchive.\n\n## EXAMPLES\n\n    $ wp site unarchive 123\n    Success: Site 123 unarchived.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"unmature","description":"Sets one or more sites as immature.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of sites to set as unmature.\n\n## EXAMPLES\n\n    $ wp site general 123\n    Success: Site 123 marked as unmature.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"unspam","description":"Removes one or more sites from spam.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of sites to remove from spam.\n\n## EXAMPLES\n\n    $ wp site unspam 123\n    Success: Site 123 removed from spam.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."}]},{"name":"super-admin","description":"Lists, adds, or removes super admin users on a multisite installation.","longdesc":"## EXAMPLES\n\n    # List user with super-admin capabilities\n    $ wp super-admin list\n    supervisor\n    administrator\n\n    # Grant super-admin privileges to the user.\n    $ wp super-admin add superadmin2\n    Success: Granted super-admin capabilities.\n\n    # Revoke super-admin privileges to the user.\n    $ wp super-admin remove superadmin2\n    Success: Revoked super-admin capabilities.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Grants super admin privileges to one or more users.","longdesc":"## OPTIONS\n\n<user>...\n: One or more user IDs, user emails, or user logins.\n\n## EXAMPLES\n\n    $ wp super-admin add superadmin2\n    Success: Granted super-admin capabilities.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user>..."},{"name":"list","description":"Lists users with super admin capabilities.","longdesc":"## OPTIONS\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: list\noptions:\n  - list\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n## EXAMPLES\n\n    # List user with super-admin capabilities\n    $ wp super-admin list\n    supervisor\n    administrator\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--format=<format>]"},{"name":"remove","description":"Removes super admin privileges from one or more users.","longdesc":"## OPTIONS\n\n<user>...\n: One or more user IDs, user emails, or user logins.\n\n## EXAMPLES\n\n    $ wp super-admin remove superadmin2\n    Success: Revoked super-admin capabilities.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user>..."}]},{"name":"taxonomy","description":"Retrieves information about registered taxonomies.","longdesc":"See references for [built-in taxonomies](https:\/\/developer.wordpress.org\/themes\/basics\/categories-tags-custom-taxonomies\/) and [custom taxonomies](https:\/\/developer.wordpress.org\/plugins\/taxonomies\/working-with-custom-taxonomies\/).\n\n## EXAMPLES\n\n    # List all taxonomies with 'post' object type.\n    $ wp taxonomy list --object_type=post --fields=name,public\n    +-------------+--------+\n    | name        | public |\n    +-------------+--------+\n    | category    | 1      |\n    | post_tag    | 1      |\n    | post_format | 1      |\n    +-------------+--------+\n\n    # Get capabilities of 'post_tag' taxonomy.\n    $ wp taxonomy get post_tag --field=cap\n    {\"manage_terms\":\"manage_categories\",\"edit_terms\":\"manage_categories\",\"delete_terms\":\"manage_categories\",\"assign_terms\":\"edit_posts\"}\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"get","description":"Gets details about a registered taxonomy.","longdesc":"## OPTIONS\n\n<taxonomy>\n: Taxonomy slug.\n\n[--field=<field>]\n: Instead of returning the whole taxonomy, returns the value of a single field.\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to all fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for the specified taxonomy:\n\n* name\n* label\n* description\n* object_type\n* show_tagcloud\n* hierarchical\n* public\n* labels\n* cap\n\nThese fields are optionally available:\n\n* count\n\n## EXAMPLES\n\n    # Get details of `category` taxonomy.\n    $ wp taxonomy get category --fields=name,label,object_type\n    +-------------+------------+\n    | Field       | Value      |\n    +-------------+------------+\n    | name        | category   |\n    | label       | Categories |\n    | object_type | [\"post\"]   |\n    +-------------+------------+\n\n    # Get capabilities of 'post_tag' taxonomy.\n    $ wp taxonomy get post_tag --field=cap\n    {\"manage_terms\":\"manage_categories\",\"edit_terms\":\"manage_categories\",\"delete_terms\":\"manage_categories\",\"assign_terms\":\"edit_posts\"}\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<taxonomy> [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"list","description":"Lists registered taxonomies.","longdesc":"## OPTIONS\n\n[--<field>=<value>]\n: Filter by one or more fields (see get_taxonomies() first parameter for a list of available fields).\n\n[--field=<field>]\n: Prints the value of a single field for each taxonomy.\n\n[--fields=<fields>]\n: Limit the output to specific taxonomy fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each term:\n\n* name\n* label\n* description\n* object_type\n* show_tagcloud\n* hierarchical\n* public\n\nThese fields are optionally available:\n\n* count\n\n## EXAMPLES\n\n    # List all taxonomies.\n    $ wp taxonomy list --format=csv\n    name,label,description,object_type,show_tagcloud,hierarchical,public\n    category,Categories,,post,1,1,1\n    post_tag,Tags,,post,1,,1\n    nav_menu,\"Navigation Menus\",,nav_menu_item,,,\n    link_category,\"Link Categories\",,link,1,,\n    post_format,Format,,post,,,1\n\n    # List all taxonomies with 'post' object type.\n    $ wp taxonomy list --object_type=post --fields=name,public\n    +-------------+--------+\n    | name        | public |\n    +-------------+--------+\n    | category    | 1      |\n    | post_tag    | 1      |\n    | post_format | 1      |\n    +-------------+--------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"}]},{"name":"term","description":"Manages taxonomy terms and term meta, with create, delete, and list commands.","longdesc":"See reference for [taxonomies and their terms](https:\/\/codex.wordpress.org\/Taxonomies).\n\n## EXAMPLES\n\n    # Create a new term.\n    $ wp term create category Apple --description=\"A type of fruit\"\n    Success: Created category 199.\n\n    # Get details about a term.\n    $ wp term get category 199 --format=json --fields=term_id,name,slug,count\n    {\"term_id\":199,\"name\":\"Apple\",\"slug\":\"apple\",\"count\":1}\n\n    # Update an existing term.\n    $ wp term update category 15 --name=Apple\n    Success: Term updated.\n\n    # Get the term's URL.\n    $ wp term list post_tag --include=123 --field=url\n    http:\/\/example.com\/tag\/tips-and-tricks\n\n    # Delete post category\n    $ wp term delete category 15\n    Success: Deleted category 15.\n\n    # Recount posts assigned to each categories and tags\n    $ wp term recount category post_tag\n    Success: Updated category term count\n    Success: Updated post_tag term count\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"create","description":"Creates a new term.","longdesc":"## OPTIONS\n\n<taxonomy>\n: Taxonomy for the new term.\n\n<term>\n: A name for the new term.\n\n[--slug=<slug>]\n: A unique slug for the new term. Defaults to sanitized version of name.\n\n[--description=<description>]\n: A description for the new term.\n\n[--parent=<term-id>]\n: A parent for the new term.\n\n[--porcelain]\n: Output just the new term id.\n\n## EXAMPLES\n\n    # Create a new category \"Apple\" with a description.\n    $ wp term create category Apple --description=\"A type of fruit\"\n    Success: Created category 199.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<taxonomy> <term> [--slug=<slug>] [--description=<description>] [--parent=<term-id>] [--porcelain]"},{"name":"delete","description":"Deletes an existing term.","longdesc":"Errors if the term doesn't exist, or there was a problem in deleting it.\n\n## OPTIONS\n\n<taxonomy>\n: Taxonomy of the term to delete.\n\n<term>...\n: One or more IDs or slugs of terms to delete.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\ndefault: id\noptions:\n  - slug\n  - id\n---\n\n## EXAMPLES\n\n    # Delete post category by id\n    $ wp term delete category 15\n    Deleted category 15.\n    Success: Deleted 1 of 1 terms.\n\n    # Delete post category by slug\n    $ wp term delete category apple --by=slug\n    Deleted category 15.\n    Success: Deleted 1 of 1 terms.\n\n    # Delete all post tags\n    $ wp term list post_tag --field=term_id | xargs wp term delete post_tag\n    Deleted post_tag 159.\n    Deleted post_tag 160.\n    Deleted post_tag 161.\n    Success: Deleted 3 of 3 terms.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<taxonomy> <term>... [--by=<field>]"},{"name":"generate","description":"Generates some terms.","longdesc":"Creates a specified number of new terms with dummy data.\n\n## OPTIONS\n\n<taxonomy>\n: The taxonomy for the generated terms.\n\n[--count=<number>]\n: How many terms to generate?\n---\ndefault: 100\n---\n\n[--max_depth=<number>]\n: Generate child terms down to a certain depth.\n---\ndefault: 1\n---\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: progress\noptions:\n  - progress\n  - ids\n---\n\n## EXAMPLES\n\n    # Generate post categories.\n    $ wp term generate category --count=10\n    Generating terms  100% [=========] 0:02 \/ 0:02\n\n    # Add meta to every generated term.\n    $ wp term generate category --format=ids --count=3 | xargs -d ' ' -I % wp term meta add % foo bar\n    Success: Added custom field.\n    Success: Added custom field.\n    Success: Added custom field.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<taxonomy> [--count=<number>] [--max_depth=<number>] [--format=<format>]"},{"name":"get","description":"Gets details about a term.","longdesc":"## OPTIONS\n\n<taxonomy>\n: Taxonomy of the term to get\n\n<term>\n: ID or slug of the term to get\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\ndefault: id\noptions:\n  - slug\n  - id\n---\n\n[--field=<field>]\n: Instead of returning the whole term, returns the value of a single field.\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to all fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    # Get details about a category with id 199.\n    $ wp term get category 199 --format=json\n    {\"term_id\":199,\"name\":\"Apple\",\"slug\":\"apple\",\"term_group\":0,\"term_taxonomy_id\":199,\"taxonomy\":\"category\",\"description\":\"A type of fruit\",\"parent\":0,\"count\":0,\"filter\":\"raw\"}\n\n    # Get details about a category with slug apple.\n    $ wp term get category apple --by=slug --format=json\n    {\"term_id\":199,\"name\":\"Apple\",\"slug\":\"apple\",\"term_group\":0,\"term_taxonomy_id\":199,\"taxonomy\":\"category\",\"description\":\"A type of fruit\",\"parent\":0,\"count\":0,\"filter\":\"raw\"}\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<taxonomy> <term> [--by=<field>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"list","description":"Lists terms in a taxonomy.","longdesc":"## OPTIONS\n\n<taxonomy>...\n: List terms of one or more taxonomies\n\n[--<field>=<value>]\n: Filter by one or more fields (see get_terms() $args parameter for a list of fields).\n\n[--field=<field>]\n: Prints the value of a single field for each term.\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - ids\n  - json\n  - count\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each term:\n\n* term_id\n* term_taxonomy_id\n* name\n* slug\n* description\n* parent\n* count\n\nThese fields are optionally available:\n\n* url\n\n## EXAMPLES\n\n    # List post categories\n    $ wp term list category --format=csv\n    term_id,term_taxonomy_id,name,slug,description,parent,count\n    2,2,aciform,aciform,,0,1\n    3,3,antiquarianism,antiquarianism,,0,1\n    4,4,arrangement,arrangement,,0,1\n    5,5,asmodeus,asmodeus,,0,1\n\n    # List post tags\n    $ wp term list post_tag --fields=name,slug\n    +-----------+-------------+\n    | name      | slug        |\n    +-----------+-------------+\n    | 8BIT      | 8bit        |\n    | alignment | alignment-2 |\n    | Articles  | articles    |\n    | aside     | aside       |\n    +-----------+-------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<taxonomy>... [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"meta","description":"Adds, updates, deletes, and lists term custom fields.","longdesc":"## EXAMPLES\n\n    # Set term meta\n    $ wp term meta set 123 bio \"Mary is a WordPress developer.\"\n    Success: Updated custom field 'bio'.\n\n    # Get term meta\n    $ wp term meta get 123 bio\n    Mary is a WordPress developer.\n\n    # Update term meta\n    $ wp term meta update 123 bio \"Mary is an awesome WordPress developer.\"\n    Success: Updated custom field 'bio'.\n\n    # Delete term meta\n    $ wp term meta delete 123 bio\n    Success: Deleted custom field.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Add a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to create.\n\n[<value>]\n: The value of the meta field. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [<value>] [--format=<format>]"},{"name":"delete","description":"Delete a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n[<key>]\n: The name of the meta field to delete.\n\n[<value>]\n: The value to delete. If omitted, all rows with key will deleted.\n\n[--all]\n: Delete all meta for the object.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [<key>] [<value>] [--all]"},{"name":"get","description":"Get meta field value.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to get.\n\n[--format=<format>]\n: Get value in a particular format.\n---\ndefault: var_export\noptions:\n  - var_export\n  - json\n  - yaml\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [--format=<format>]"},{"name":"list","description":"List all metadata associated with an object.","longdesc":"## OPTIONS\n\n<id>\n: ID for the object.\n\n[--keys=<keys>]\n: Limit output to metadata of specific keys.\n\n[--fields=<fields>]\n: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n  - count\n---\n\n[--orderby=<fields>]\n: Set orderby which field.\n---\ndefault: id\noptions:\n - id\n - meta_key\n - meta_value\n---\n\n[--order=<order>]\n: Set ascending or descending order.\n---\ndefault: asc\noptions:\n - asc\n - desc\n---\n\n[--unserialize]\n: Unserialize meta_value output.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"},{"name":"patch","description":"Update a nested value for a meta field.","longdesc":"## OPTIONS\n\n<action>\n: Patch action to perform.\n---\noptions:\n  - insert\n  - update\n  - delete\n---\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to patch.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<action> <id> <key> <key-path>... [<value>] [--format=<format>]"},{"name":"pluck","description":"Get a nested value from a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to get.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to pluck.\n\n[--format=<format>]\n: The output format of the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n  - yaml\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> <key-path>... [--format=<format>]"},{"name":"update","description":"Update a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> [<value>] [--format=<format>]"}]},{"name":"migrate","description":"Migrate a term of a taxonomy to another taxonomy.","longdesc":"## OPTIONS\n\n<term>\n: Slug or ID of the term to migrate.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\ndefault: id\noptions:\n  - slug\n  - id\n---\n\n[--from=<taxonomy>]\n: Taxonomy slug of the term to migrate.\n\n[--to=<taxonomy>]\n: Taxonomy slug to migrate to.\n\n## EXAMPLES\n\n    # Migrate a category's term (video) to tag taxonomy.\n    $ wp term migrate 9190 --from=category --to=post_tag\n    Term '9190' migrated!\n    Old instance of term '9190' removed from its original taxonomy.\n    Success: Migrated the term '9190' from taxonomy 'category' to taxonomy 'post_tag' for 1 posts\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<term> [--by=<field>] [--from=<taxonomy>] [--to=<taxonomy>]"},{"name":"recount","description":"Recalculates number of posts assigned to each term.","longdesc":"In instances where manual updates are made to the terms assigned to\nposts in the database, the number of posts associated with a term\ncan become out-of-sync with the actual number of posts.\n\nThis command runs wp_update_term_count() on the taxonomy's terms\nto bring the count back to the correct value.\n\n## OPTIONS\n\n<taxonomy>...\n: One or more taxonomies to recalculate.\n\n## EXAMPLES\n\n    # Recount posts assigned to each categories and tags\n    $ wp term recount category post_tag\n    Success: Updated category term count.\n    Success: Updated post_tag term count.\n\n    # Recount all listed taxonomies\n    $ wp taxonomy list --field=name | xargs wp term recount\n    Success: Updated category term count.\n    Success: Updated post_tag term count.\n    Success: Updated nav_menu term count.\n    Success: Updated link_category term count.\n    Success: Updated post_format term count.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<taxonomy>..."},{"name":"update","description":"Updates an existing term.","longdesc":"## OPTIONS\n\n<taxonomy>\n: Taxonomy of the term to update.\n\n<term>\n: ID or slug for the term to update.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\ndefault: id\noptions:\n  - slug\n  - id\n---\n\n[--name=<name>]\n: A new name for the term.\n\n[--slug=<slug>]\n: A new slug for the term.\n\n[--description=<description>]\n: A new description for the term.\n\n[--parent=<term-id>]\n: A new parent for the term.\n\n## EXAMPLES\n\n    # Change category with id 15 to use the name \"Apple\"\n    $ wp term update category 15 --name=Apple\n    Success: Term updated.\n\n    # Change category with slug apple to use the name \"Apple\"\n    $ wp term update category apple --by=slug --name=Apple\n    Success: Term updated.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<taxonomy> <term> [--by=<field>] [--name=<name>] [--slug=<slug>] [--description=<description>] [--parent=<term-id>]"}]},{"name":"theme","description":"Manages themes, including installs, activations, and updates.","longdesc":"See the WordPress [Theme Handbook](https:\/\/developer.wordpress.org\/themes\/) developer resource for more information on themes.\n\n## EXAMPLES\n\n    # Install the latest version of a theme from wordpress.org and activate\n    $ wp theme install twentysixteen --activate\n    Installing Twenty Sixteen (1.2)\n    Downloading install package from http:\/\/downloads.wordpress.org\/theme\/twentysixteen.1.2.zip...\n    Unpacking the package...\n    Installing the theme...\n    Theme installed successfully.\n    Activating 'twentysixteen'...\n    Success: Switched to 'Twenty Sixteen' theme.\n\n    # Get details of an installed theme\n    $ wp theme get twentysixteen --fields=name,title,version\n    +---------+----------------+\n    | Field   | Value          |\n    +---------+----------------+\n    | name    | Twenty Sixteen |\n    | title   | Twenty Sixteen |\n    | version | 1.2            |\n    +---------+----------------+\n\n    # Get status of theme\n    $ wp theme status twentysixteen\n    Theme twentysixteen details:\n         Name: Twenty Sixteen\n         Status: Active\n         Version: 1.2\n         Author: the WordPress team\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"activate","description":"Activates a theme.","longdesc":"## OPTIONS\n\n<theme>\n: The theme to activate.\n\n## EXAMPLES\n\n    $ wp theme activate twentysixteen\n    Success: Switched to 'Twenty Sixteen' theme.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<theme>"},{"name":"auto-updates","description":"Manages theme auto-updates.","longdesc":"## EXAMPLES\n\n    # Enable the auto-updates for a theme\n    $ wp theme auto-updates enable twentysixteen\n    Theme auto-updates for 'twentysixteen' enabled.\n    Success: Enabled 1 of 1 theme auto-updates.\n\n    # Disable the auto-updates for a theme\n    $ wp theme auto-updates disable twentysixteen\n    Theme auto-updates for 'twentysixteen' disabled.\n    Success: Disabled 1 of 1 theme auto-updates.\n\n    # Get the status of theme auto-updates\n    $ wp theme auto-updates status twentysixteen\n    Auto-updates for theme 'twentysixteen' are disabled.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"disable","description":"Disables the auto-updates for a theme.","longdesc":"## OPTIONS\n\n[<theme>...]\n: One or more themes to disable auto-updates for.\n\n[--all]\n: If set, auto-updates will be disabled for all themes.\n\n[--enabled-only]\n: If set, filters list of themes to only include the ones that have\nauto-updates enabled.\n\n## EXAMPLES\n\n    # Disable the auto-updates for a theme\n    $ wp theme auto-updates disable twentysixteen\n    Theme auto-updates for 'twentysixteen' disabled.\n    Success: Disabled 1 of 1 theme auto-updates.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<theme>...] [--all] [--enabled-only]"},{"name":"enable","description":"Enables the auto-updates for a theme.","longdesc":"## OPTIONS\n\n[<theme>...]\n: One or more themes to enable auto-updates for.\n\n[--all]\n: If set, auto-updates will be enabled for all themes.\n\n[--disabled-only]\n: If set, filters list of themes to only include the ones that have\nauto-updates disabled.\n\n## EXAMPLES\n\n    # Enable the auto-updates for a theme\n    $ wp theme auto-updates enable twentysixteen\n    Theme auto-updates for 'twentysixteen' enabled.\n    Success: Enabled 1 of 1 theme auto-updates.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<theme>...] [--all] [--disabled-only]"},{"name":"status","description":"Shows the status of auto-updates for a theme.","longdesc":"## OPTIONS\n\n[<theme>...]\n: One or more themes to show the status of the auto-updates of.\n\n[--all]\n: If set, the status of auto-updates for all themes will be shown.\n\n[--enabled-only]\n: If set, filters list of themes to only include the ones that have\nauto-updates enabled.\n\n[--disabled-only]\n: If set, filters list of themes to only include the ones that have\nauto-updates disabled.\n\n[--field=<field>]\n: Only show the provided field.\n\n## EXAMPLES\n\n    # Get the status of theme auto-updates\n    $ wp theme auto-updates status twentysixteen\n    +---------------+----------+\n    | name          | status   |\n    +---------------+----------+\n    | twentysixteen | disabled |\n    +---------------+----------+\n\n    # Get the list of themes that have auto-updates enabled\n    $ wp theme auto-updates status --all --enabled-only --field=name\n    twentysixteen\n    twentyseventeen\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<theme>...] [--all] [--enabled-only] [--disabled-only] [--field=<field>]"}]},{"name":"delete","description":"Deletes one or more themes.","longdesc":"Removes the theme or themes from the filesystem.\n\n## OPTIONS\n\n[<theme>...]\n: One or more themes to delete.\n\n[--all]\n: If set, all themes will be deleted except active theme.\n\n[--force]\n: To delete active theme use this.\n\n## EXAMPLES\n\n    $ wp theme delete twentytwelve\n    Deleted 'twentytwelve' theme.\n    Success: Deleted 1 of 1 themes.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<theme>...] [--all] [--force]"},{"name":"disable","description":"Disables a theme on a WordPress multisite install.","longdesc":"Removes ability for a theme to be activated from the dashboard of a site\non a WordPress multisite install.\n\n## OPTIONS\n\n<theme>\n: The theme to disable.\n\n[--network]\n: If set, the theme is disabled on the network level. Note that\nindividual sites may still have this theme enabled if it was\nenabled for them independently.\n\n## EXAMPLES\n\n    # Disable theme\n    $ wp theme disable twentysixteen\n    Success: Disabled the 'Twenty Sixteen' theme.\n\n    # Disable theme in network level\n    $ wp theme disable twentysixteen --network\n    Success: Network disabled the 'Twenty Sixteen' theme.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<theme> [--network]"},{"name":"enable","description":"Enables a theme on a WordPress multisite install.","longdesc":"Permits theme to be activated from the dashboard of a site on a WordPress\nmultisite install.\n\n## OPTIONS\n\n<theme>\n: The theme to enable.\n\n[--network]\n: If set, the theme is enabled for the entire network\n\n[--activate]\n: If set, the theme is activated for the current site. Note that\nthe \"network\" flag has no influence on this.\n\n## EXAMPLES\n\n    # Enable theme\n    $ wp theme enable twentysixteen\n    Success: Enabled the 'Twenty Sixteen' theme.\n\n    # Network enable theme\n    $ wp theme enable twentysixteen --network\n    Success: Network enabled the 'Twenty Sixteen' theme.\n\n    # Network enable and activate theme for current site\n    $ wp theme enable twentysixteen --activate\n    Success: Enabled the 'Twenty Sixteen' theme.\n    Success: Switched to 'Twenty Sixteen' theme.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<theme> [--network] [--activate]"},{"name":"get","description":"Gets details about a theme.","longdesc":"## OPTIONS\n\n<theme>\n: The theme to get.\n\n[--field=<field>]\n: Instead of returning the whole theme, returns the value of a single field.\n\n[--fields=<fields>]\n: Limit the output to specific fields. Defaults to all fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    $ wp theme get twentysixteen --fields=name,title,version\n    +---------+----------------+\n    | Field   | Value          |\n    +---------+----------------+\n    | name    | Twenty Sixteen |\n    | title   | Twenty Sixteen |\n    | version | 1.2            |\n    +---------+----------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<theme> [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"install","description":"Installs one or more themes.","longdesc":"## OPTIONS\n\n<theme|zip|url>...\n: One or more themes to install. Accepts a theme slug, the path to a local zip file, or a URL to a remote zip file.\n\n[--version=<version>]\n: If set, get that particular version from wordpress.org, instead of the\nstable version.\n\n[--force]\n: If set, the command will overwrite any installed version of the theme, without prompting\nfor confirmation.\n\n[--activate]\n: If set, the theme will be activated immediately after install.\n\n[--insecure]\n: Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    # Install the latest version from wordpress.org and activate\n    $ wp theme install twentysixteen --activate\n    Installing Twenty Sixteen (1.2)\n    Downloading install package from http:\/\/downloads.wordpress.org\/theme\/twentysixteen.1.2.zip...\n    Unpacking the package...\n    Installing the theme...\n    Theme installed successfully.\n    Activating 'twentysixteen'...\n    Success: Switched to 'Twenty Sixteen' theme.\n\n    # Install from a local zip file\n    $ wp theme install ..\/my-theme.zip\n\n    # Install from a remote zip file\n    $ wp theme install http:\/\/s3.amazonaws.com\/bucketname\/my-theme.zip?AWSAccessKeyId=123&Expires=456&Signature=abcdef\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<theme|zip|url>... [--version=<version>] [--force] [--activate] [--insecure]"},{"name":"is-active","description":"Checks if a given theme is active.","longdesc":"Returns exit code 0 when active, 1 when not active.\n\n## OPTIONS\n\n<theme>\n: The plugin to check.\n\n## EXAMPLES\n\n    # Check whether theme is Active; exit status 0 if active, otherwise 1\n    $ wp theme is-active twentyfifteen\n    $ echo $?\n    1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<theme>"},{"name":"is-installed","description":"Checks if a given theme is installed.","longdesc":"Returns exit code 0 when installed, 1 when uninstalled.\n\n## OPTIONS\n\n<theme>\n: The theme to check.\n\n## EXAMPLES\n\n    # Check whether theme is installed; exit status 0 if installed, otherwise 1\n    $ wp theme is-installed hello\n    $ echo $?\n    1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<theme>"},{"name":"list","description":"Gets a list of themes.","longdesc":"## OPTIONS\n\n[--<field>=<value>]\n: Filter results based on the value of a field.\n\n[--field=<field>]\n: Prints the value of a single field for each theme.\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n[--status=<status>]\n: Filter the output by theme status.\n---\noptions:\n  - active\n  - parent\n  - inactive\n---\n\n[--skip-update-check]\n: If set, the theme update check will be skipped.\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each theme:\n\n* name\n* status\n* update\n* version\n\nThese fields are optionally available:\n\n* update_version\n* update_package\n* update_id\n* title\n* description\n\n## EXAMPLES\n\n    # List themes\n    $ wp theme list --status=inactive --format=csv\n    name,status,update,version\n    twentyfourteen,inactive,none,1.7\n    twentysixteen,inactive,available,1.1\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>] [--status=<status>] [--skip-update-check]"},{"name":"mod","description":"Sets, gets, and removes theme mods.","longdesc":"## EXAMPLES\n\n    # Set the 'background_color' theme mod to '000000'.\n    $ wp theme mod set background_color 000000\n    Success: Theme mod background_color set to 000000\n\n    # Get single theme mod in JSON format.\n    $ wp theme mod get background_color --format=json\n    [{\"key\":\"background_color\",\"value\":\"dd3333\"}]\n\n    # Remove all theme mods.\n    $ wp theme mod remove --all\n    Success: Theme mods removed.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"get","description":"Gets one or more theme mods.","longdesc":"## OPTIONS\n\n[<mod>...]\n: One or more mods to get.\n\n[--field=<field>]\n: Returns the value of a single field.\n\n[--all]\n: List all theme mods\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - json\n  - csv\n  - yaml\n---\n\n## EXAMPLES\n\n    # Get all theme mods.\n    $ wp theme mod get --all\n    +------------------+---------+\n    | key              | value   |\n    +------------------+---------+\n    | background_color | dd3333  |\n    | link_color       | #dd9933 |\n    | main_text_color  | #8224e3 |\n    +------------------+---------+\n\n    # Get single theme mod in JSON format.\n    $ wp theme mod get background_color --format=json\n    [{\"key\":\"background_color\",\"value\":\"dd3333\"}]\n\n    # Get value of a single theme mod.\n    $ wp theme mod get background_color --field=value\n    dd3333\n\n    # Get multiple theme mods.\n    $ wp theme mod get background_color header_textcolor\n    +------------------+--------+\n    | key              | value  |\n    +------------------+--------+\n    | background_color | dd3333 |\n    | header_textcolor |        |\n    +------------------+--------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<mod>...] [--field=<field>] [--all] [--format=<format>]"},{"name":"list","description":"Gets a list of theme mods.","longdesc":"## OPTIONS\n\n[--field=<field>]\n: Returns the value of a single field.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - json\n  - csv\n  - yaml\n---\n\n## EXAMPLES\n\n    # Gets a list of theme mods.\n    $ wp theme mod list\n    +------------------+---------+\n    | key              | value   |\n    +------------------+---------+\n    | background_color | dd3333  |\n    | link_color       | #dd9933 |\n    | main_text_color  | #8224e3 |\n    +------------------+---------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--field=<field>] [--format=<format>]"},{"name":"remove","description":"Removes one or more theme mods.","longdesc":"## OPTIONS\n\n[<mod>...]\n: One or more mods to remove.\n\n[--all]\n: Remove all theme mods.\n\n## EXAMPLES\n\n    # Remove all theme mods.\n    $ wp theme mod remove --all\n    Success: Theme mods removed.\n\n    # Remove single theme mod.\n    $ wp theme mod remove background_color\n    Success: 1 mod removed.\n\n    # Remove multiple theme mods.\n    $ wp theme mod remove background_color header_textcolor\n    Success: 2 mods removed.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<mod>...] [--all]"},{"name":"set","description":"Sets the value of a theme mod.","longdesc":"## OPTIONS\n\n<mod>\n: The name of the theme mod to set or update.\n\n<value>\n: The new value.\n\n## EXAMPLES\n\n    # Set theme mod\n    $ wp theme mod set background_color 000000\n    Success: Theme mod background_color set to 000000\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<mod> <value>"}]},{"name":"path","description":"Gets the path to a theme or to the theme directory.","longdesc":"## OPTIONS\n\n[<theme>]\n: The theme to get the path to. Path includes \"style.css\" file.\nIf not set, will return the path to the themes directory.\n\n[--dir]\n: If set, get the path to the closest parent directory, instead of the\ntheme's \"style.css\" file.\n\n## EXAMPLES\n\n    # Get theme path\n    $ wp theme path\n    \/var\/www\/example.com\/public_html\/wp-content\/themes\n\n    # Change directory to theme path\n    $ cd $(wp theme path)\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<theme>] [--dir]"},{"name":"search","description":"Searches the WordPress.org theme directory.","longdesc":"Displays themes in the WordPress.org theme directory matching a given\nsearch query.\n\n## OPTIONS\n\n<search>\n: The string to search for.\n\n[--page=<page>]\n: Optional page to display.\n---\ndefault: 1\n---\n\n[--per-page=<per-page>]\n: Optional number of results to display. Defaults to 10.\n\n[--field=<field>]\n: Prints the value of a single field for each theme.\n\n[--fields=<fields>]\n: Ask for specific fields from the API. Defaults to name,slug,author,rating. Acceptable values:\n\n    **name**: Theme Name\n    **slug**: Theme Slug\n    **version**: Current Version Number\n    **author**: Theme Author\n    **preview_url**: Theme Preview URL\n    **screenshot_url**: Theme Screenshot URL\n    **rating**: Theme Rating\n    **num_ratings**: Number of Theme Ratings\n    **homepage**: Theme Author's Homepage\n    **description**: Theme Description\n    **url**: Theme's URL on wordpress.org\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n## EXAMPLES\n\n    $ wp theme search photo --per-page=6\n    Success: Showing 6 of 203 themes.\n    +----------------------+----------------------+--------+\n    | name                 | slug                 | rating |\n    +----------------------+----------------------+--------+\n    | Photos               | photos               | 100    |\n    | Infinite Photography | infinite-photography | 100    |\n    | PhotoBook            | photobook            | 100    |\n    | BG Photo Frame       | bg-photo-frame       | 0      |\n    | fPhotography         | fphotography         | 0      |\n    | Photo Perfect        | photo-perfect        | 98     |\n    +----------------------+----------------------+--------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<search> [--page=<page>] [--per-page=<per-page>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"status","description":"Reveals the status of one or all themes.","longdesc":"## OPTIONS\n\n[<theme>]\n: A particular theme to show the status for.\n\n## EXAMPLES\n\n    $ wp theme status twentysixteen\n    Theme twentysixteen details:\n         Name: Twenty Sixteen\n         Status: Inactive\n         Version: 1.2\n         Author: the WordPress team\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<theme>]"},{"name":"update","description":"Updates one or more themes.","longdesc":"## OPTIONS\n\n[<theme>...]\n: One or more themes to update.\n\n[--all]\n: If set, all themes that have updates will be updated.\n\n[--exclude=<theme-names>]\n: Comma separated list of theme names that should be excluded from updating.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - summary\n---\n\n[--version=<version>]\n: If set, the theme will be updated to the specified version.\n\n[--dry-run]\n: Preview which themes would be updated.\n\n[--insecure]\n: Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n\n## EXAMPLES\n\n    # Update multiple themes\n    $ wp theme update twentyfifteen twentysixteen\n    Downloading update from https:\/\/downloads.wordpress.org\/theme\/twentyfifteen.1.5.zip...\n    Unpacking the update...\n    Installing the latest version...\n    Removing the old version of the theme...\n    Theme updated successfully.\n    Downloading update from https:\/\/downloads.wordpress.org\/theme\/twentysixteen.1.2.zip...\n    Unpacking the update...\n    Installing the latest version...\n    Removing the old version of the theme...\n    Theme updated successfully.\n    +---------------+-------------+-------------+---------+\n    | name          | old_version | new_version | status  |\n    +---------------+-------------+-------------+---------+\n    | twentyfifteen | 1.4         | 1.5         | Updated |\n    | twentysixteen | 1.1         | 1.2         | Updated |\n    +---------------+-------------+-------------+---------+\n    Success: Updated 2 of 2 themes.\n\n    # Exclude themes updates when bulk updating the themes\n    $ wp theme update --all --exclude=twentyfifteen\n    Downloading update from https:\/\/downloads.wordpress.org\/theme\/astra.1.0.5.1.zip...\n    Unpacking the update...\n    Installing the latest version...\n    Removing the old version of the theme...\n    Theme updated successfully.\n    Downloading update from https:\/\/downloads.wordpress.org\/theme\/twentyseventeen.1.2.zip...\n    Unpacking the update...\n    Installing the latest version...\n    Removing the old version of the theme...\n    Theme updated successfully.\n    +-----------------+----------+---------+----------------+\n    | name            | status   | version | update_version |\n    +-----------------+----------+---------+----------------+\n    | astra           | inactive | 1.0.1   | 1.0.5.1        |\n    | twentyseventeen | inactive | 1.1     | 1.2            |\n    +-----------------+----------+---------+----------------+\n    Success: Updated 2 of 2 themes.\n\n    # Update all themes\n    $ wp theme update --all\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<theme>...] [--all] [--exclude=<theme-names>] [--format=<format>] [--version=<version>] [--dry-run] [--insecure]"}]},{"name":"transient","description":"Adds, gets, and deletes entries in the WordPress Transient Cache.","longdesc":"By default, the transient cache uses the WordPress database to persist values\nbetween requests. On a single site installation, values are stored in the\n`wp_options` table. On a multisite installation, values are stored in the\n`wp_options` or the `wp_sitemeta` table, depending on use of the `--network`\nflag.\n\nWhen a persistent object cache drop-in is installed (e.g. Redis or Memcached),\nthe transient cache skips the database and simply wraps the WP Object Cache.\n\n## EXAMPLES\n\n    # Set transient.\n    $ wp transient set sample_key \"test data\" 3600\n    Success: Transient added.\n\n    # Get transient.\n    $ wp transient get sample_key\n    test data\n\n    # Delete transient.\n    $ wp transient delete sample_key\n    Success: Transient deleted.\n\n    # Delete expired transients.\n    $ wp transient delete --expired\n    Success: 12 expired transients deleted from the database.\n\n    # Delete all transients.\n    $ wp transient delete --all\n    Success: 14 transients deleted from the database.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"delete","description":"Deletes a transient value.","longdesc":"For a more complete explanation of the transient cache, including the\nnetwork|site cache, please see docs for `wp transient`.\n\n## OPTIONS\n\n[<key>]\n: Key for the transient.\n\n[--network]\n: Delete the value of a network|site transient. On single site, this is\nis a specially-named cache key. On multisite, this is a global cache\n(instead of local to the site).\n\n[--all]\n: Delete all transients.\n\n[--expired]\n: Delete all expired transients.\n\n## EXAMPLES\n\n    # Delete transient.\n    $ wp transient delete sample_key\n    Success: Transient deleted.\n\n    # Delete expired transients.\n    $ wp transient delete --expired\n    Success: 12 expired transients deleted from the database.\n\n    # Delete expired site transients.\n    $ wp transient delete --expired --network\n    Success: 1 expired transient deleted from the database.\n\n    # Delete all transients.\n    $ wp transient delete --all\n    Success: 14 transients deleted from the database.\n\n    # Delete all site transients.\n    $ wp transient delete --all --network\n    Success: 2 transients deleted from the database.\n\n    # Delete all transients in a multsite.\n    $ wp transient delete --all --network && wp site list --field=url | xargs -n1 -I % wp --url=% transient delete --all\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<key>] [--network] [--all] [--expired]"},{"name":"get","description":"Gets a transient value.","longdesc":"For a more complete explanation of the transient cache, including the\nnetwork|site cache, please see docs for `wp transient`.\n\n## OPTIONS\n\n<key>\n: Key for the transient.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n[--network]\n: Get the value of a network|site transient. On single site, this is\nis a specially-named cache key. On multisite, this is a global cache\n(instead of local to the site).\n\n## EXAMPLES\n\n    $ wp transient get sample_key\n    test data\n\n    $ wp transient get random_key\n    Warning: Transient with key \"random_key\" is not set.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> [--format=<format>] [--network]"},{"name":"list","description":"Lists transients and their values.","longdesc":"## OPTIONS\n\n[--search=<pattern>]\n: Use wildcards ( * and ? ) to match transient name.\n\n[--exclude=<pattern>]\n: Pattern to exclude. Use wildcards ( * and ? ) to match transient name.\n\n[--network]\n: Get the values of network|site transients. On single site, this is\na specially-named cache key. On multisite, this is a global cache\n(instead of local to the site).\n\n[--unserialize]\n: Unserialize transient values in output.\n\n[--human-readable]\n: Human-readable output for expirations.\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: table\noptions:\n  - table\n  - json\n  - csv\n  - count\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThis field will be displayed by default for each matching option:\n\n* name\n* value\n* expiration\n\n## EXAMPLES\n\n    # List all transients\n    $ wp transient list\n     +------+-------+---------------+\n     | name | value | expiration    |\n     +------+-------+---------------+\n     | foo  | bar   | 39 mins       |\n     | foo2 | bar2  | no expiration |\n     | foo3 | bar2  | expired       |\n     | foo4 | bar4  | 4 hours       |\n     +------+-------+---------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--search=<pattern>] [--exclude=<pattern>] [--network] [--unserialize] [--human-readable] [--fields=<fields>] [--format=<format>]"},{"name":"set","description":"Sets a transient value.","longdesc":"`<expiration>` is the time until expiration, in seconds.\n\nFor a more complete explanation of the transient cache, including the\nnetwork|site cache, please see docs for `wp transient`.\n\n## OPTIONS\n\n<key>\n: Key for the transient.\n\n<value>\n: Value to be set for the transient.\n\n[<expiration>]\n: Time until expiration, in seconds.\n\n[--network]\n: Set the value of a network|site transient. On single site, this is\nis a specially-named cache key. On multisite, this is a global cache\n(instead of local to the site).\n\n## EXAMPLES\n\n    $ wp transient set sample_key \"test data\" 3600\n    Success: Transient added.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<key> <value> [<expiration>] [--network]"},{"name":"type","description":"Determines the type of transients implementation.","longdesc":"Indicates whether the transients API is using an object cache or the\ndatabase.\n\nFor a more complete explanation of the transient cache, including the\nnetwork|site cache, please see docs for `wp transient`.\n\n## EXAMPLES\n\n    $ wp transient type\n    Transients are saved to the database.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":""}]},{"name":"user","description":"Manages users, along with their roles, capabilities, and meta.","longdesc":"See references for [Roles and Capabilities](https:\/\/codex.wordpress.org\/Roles_and_Capabilities) and [WP User class](https:\/\/codex.wordpress.org\/Class_Reference\/WP_User).\n\n## EXAMPLES\n\n    # List user IDs\n    $ wp user list --field=ID\n    1\n\n    # Create a new user.\n    $ wp user create bob bob@example.com --role=author\n    Success: Created user 3.\n    Password: k9**&I4vNH(&\n\n    # Update an existing user.\n    $ wp user update 123 --display_name=Mary --user_pass=marypass\n    Success: Updated user 123.\n\n    # Delete user 123 and reassign posts to user 567\n    $ wp user delete 123 --reassign=567\n    Success: Removed user 123 from http:\/\/example.com\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add-cap","description":"Adds a capability to a user.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n<cap>\n: The capability to add.\n\n## EXAMPLES\n\n    # Add a capability for a user\n    $ wp user add-cap john create_premium_item\n    Success: Added 'create_premium_item' capability for john (16).\n\n    # Add a capability for a user\n    $ wp user add-cap 15 edit_product\n    Success: Added 'edit_product' capability for johndoe (15).\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <cap>"},{"name":"add-role","description":"Adds a role for a user.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n<role>\n: Add the specified role to the user.\n\n## EXAMPLES\n\n    $ wp user add-role 12 author\n    Success: Added 'author' role for johndoe (12).\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <role>"},{"name":"application-password","description":"Creates, updates, deletes, lists and retrieves application passwords.","longdesc":"## EXAMPLES\n\n    # List user application passwords and only show app name and password hash\n    $ wp user application-password list 123 --fields=name,password\n    +--------+------------------------------------+\n    | name   | password                           |\n    +--------+------------------------------------+\n    | myapp  | $P$BVGeou1CUot114YohIemgpwxQCzb8O\/ |\n    +--------+------------------------------------+\n\n    # Get a specific application password and only show app name and created timestamp\n    $ wp user application-password get 123 6633824d-c1d7-4f79-9dd5-4586f734d69e --fields=name,created\n    +--------+------------+\n    | name   | created    |\n    +--------+------------+\n    | myapp  | 1638395611 |\n    +--------+------------+\n\n    # Create user application password\n    $ wp user application-password create 123 myapp\n    Success: Created application password.\n    Password: ZG1bxdxdzjTwhsY8vK8l1C65\n\n    # Only print the password without any chrome\n    $ wp user application-password create 123 myapp --porcelain\n    ZG1bxdxdzjTwhsY8vK8l1C65\n\n    # Update an existing application password\n    $ wp user application-password update 123 6633824d-c1d7-4f79-9dd5-4586f734d69e --name=newappname\n    Success: Updated application password.\n\n    # Check if an application password for a given application exists\n    $ wp user application-password exists 123 myapp\n    $ echo $?\n    1\n\n    # Bash script for checking whether an application password exists and creating one if not\n    if ! wp user application-password exists 123 myapp; then\n        PASSWORD=$(wp user application-password create 123 myapp --porcelain)\n    fi\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"create","description":"Creates a new application password.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to create a new application password for.\n\n<app-name>\n: Unique name of the application to create an application password for.\n\n[--app-id=<app-id>]\n: Application ID to attribute to the application password.\n\n[--porcelain]\n: Output just the new password.\n\n## EXAMPLES\n\n    # Create user application password\n    $ wp user application-password create 123 myapp\n    Success: Created application password.\n    Password: ZG1bxdxdzjTwhsY8vK8l1C65\n\n    # Only print the password without any chrome\n    $ wp user application-password create 123 myapp --porcelain\n    ZG1bxdxdzjTwhsY8vK8l1C65\n\n    # Create user application with a custom application ID for internal tracking\n    $ wp user application-password create 123 myapp --app-id=42 --porcelain\n    ZG1bxdxdzjTwhsY8vK8l1C65\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <app-name> [--app-id=<app-id>] [--porcelain]"},{"name":"delete","description":"Delete an existing application password.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to delete the application password for.\n\n[<uuid>...]\n: Comma-separated list of UUIDs of the application passwords to delete.\n\n[--all]\n: Delete all of the user's application password.\n\n## EXAMPLES\n\n    # Record usage of an application password\n    $ wp user application-password record-usage 123 6633824d-c1d7-4f79-9dd5-4586f734d69e\n    Success: Recorded application password usage.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> [<uuid>...] [--all]"},{"name":"exists","description":"Checks whether an application password for a given application exists.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to check the existence of an application password for.\n\n<app-name>\n: Name of the application to check the existence of an application password for.\n\n## EXAMPLES\n\n    # Check if an application password for a given application exists\n    $ wp user application-password exists 123 myapp\n    $ echo $?\n    1\n\n    # Bash script for checking whether an application password exists and creating one if not\n    if ! wp user application-password exists 123 myapp; then\n        PASSWORD=$(wp user application-password create 123 myapp --porcelain)\n    fi\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <app-name>"},{"name":"get","description":"Gets a specific application password.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to get the application password for.\n\n<uuid>\n: The universally unique ID of the application password.\n\n[--field=<field>]\n: Prints the value of a single field for the application password.\n\n[--fields=<fields>]\n: Limit the output to specific fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    # Get a specific application password and only show app name and created timestamp\n    $ wp user application-password get 123 6633824d-c1d7-4f79-9dd5-4586f734d69e --fields=name,created\n    +--------+------------+\n    | name   | created    |\n    +--------+------------+\n    | myapp  | 1638395611 |\n    +--------+------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <uuid> [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"list","description":"Lists all application passwords associated with a user.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to get application passwords for.\n\n[--<field>=<value>]\n: Filter the list by a specific field.\n\n[--field=<field>]\n: Prints the value of a single field for each application password.\n\n[--fields=<fields>]\n: Limit the output to specific fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n[--orderby=<fields>]\n: Set orderby which field.\n---\ndefault: created\noptions:\n - uuid\n - app_id\n - name\n - password\n - created\n - last_used\n - last_ip\n---\n\n[--order=<order>]\n: Set ascending or descending order.\n---\ndefault: desc\noptions:\n - asc\n - desc\n---\n\n## EXAMPLES\n\n    # List user application passwords and only show app name and password hash\n    $ wp user application-password list 123 --fields=name,password\n    +--------+------------------------------------+\n    | name   | password                           |\n    +--------+------------------------------------+\n    | myapp  | $P$BVGeou1CUot114YohIemgpwxQCzb8O\/ |\n    +--------+------------------------------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>]"},{"name":"record-usage","description":"Record usage of an application password.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to update the application password for.\n\n<uuid>\n: The universally unique ID of the application password.\n\n## EXAMPLES\n\n    # Record usage of an application password\n    $ wp user application-password record-usage 123 6633824d-c1d7-4f79-9dd5-4586f734d69e\n    Success: Recorded application password usage.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <uuid>"},{"name":"update","description":"Updates an existing application password.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to update the application password for.\n\n<uuid>\n: The universally unique ID of the application password.\n\n[--<field>=<value>]\n: Update the <field> with a new <value>. Currently supported fields: name.\n\n## EXAMPLES\n\n    # Update an existing application password\n    $ wp user application-password update 123 6633824d-c1d7-4f79-9dd5-4586f734d69e --name=newappname\n    Success: Updated application password.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <uuid> [--<field>=<value>]"}]},{"name":"check-password","description":"Checks if a user's password is valid or not.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email or user ID of the user to check credentials for.\n\n<user_pass>\n: A string that contains the plain text password for the user.\n\n[--escape-chars]\n: Escape password with `wp_slash()` to mimic the same behavior as `wp-login.php`.\n\n## EXAMPLES\n\n    # Check whether given credentials are valid; exit status 0 if valid, otherwise 1\n    $ wp user check-password admin adminpass\n    $ echo $?\n    1\n\n    # Bash script for checking whether given credentials are valid or not\n    if ! $(wp user check-password admin adminpass); then\n     notify-send \"Invalid Credentials\";\n    fi\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <user_pass> [--escape-chars]"},{"name":"create","description":"Creates a new user.","longdesc":"## OPTIONS\n\n<user-login>\n: The login of the user to create.\n\n<user-email>\n: The email address of the user to create.\n\n[--role=<role>]\n: The role of the user to create. Default: default role. Possible values\ninclude 'administrator', 'editor', 'author', 'contributor', 'subscriber'.\n\n[--user_pass=<password>]\n: The user password. Default: randomly generated.\n\n[--user_registered=<yyyy-mm-dd-hh-ii-ss>]\n: The date the user registered. Default: current date.\n\n[--display_name=<name>]\n: The display name.\n\n[--user_nicename=<nice_name>]\n: A string that contains a URL-friendly name for the user. The default is the user's username.\n\n[--user_url=<url>]\n: A string containing the user's URL for the user's web site.\n\n[--nickname=<nickname>]\n: The user's nickname, defaults to the user's username.\n\n[--first_name=<first_name>]\n: The user's first name.\n\n[--last_name=<last_name>]\n: The user's last name.\n\n[--description=<description>]\n: A string containing content about the user.\n\n[--rich_editing=<rich_editing>]\n: A string for whether to enable the rich editor or not. False if not empty.\n\n[--send-email]\n: Send an email to the user with their new account details.\n\n[--porcelain]\n: Output just the new user id.\n\n## EXAMPLES\n\n    # Create user\n    $ wp user create bob bob@example.com --role=author\n    Success: Created user 3.\n    Password: k9**&I4vNH(&\n\n    # Create user without showing password upon success\n    $ wp user create ann ann@example.com --porcelain\n    4\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user-login> <user-email> [--role=<role>] [--user_pass=<password>] [--user_registered=<yyyy-mm-dd-hh-ii-ss>] [--display_name=<name>] [--user_nicename=<nice_name>] [--user_url=<url>] [--nickname=<nickname>] [--first_name=<first_name>] [--last_name=<last_name>] [--description=<description>] [--rich_editing=<rich_editing>] [--send-email] [--porcelain]"},{"name":"delete","description":"Deletes one or more users from the current site.","longdesc":"On multisite, `wp user delete` only removes the user from the current\nsite. Include `--network` to also remove the user from the database, but\nmake sure to reassign their posts prior to deleting the user.\n\n## OPTIONS\n\n<user>...\n: The user login, user email, or user ID of the user(s) to delete.\n\n[--network]\n: On multisite, delete the user from the entire network.\n\n[--reassign=<user-id>]\n: User ID to reassign the posts to.\n\n[--yes]\n: Answer yes to any confirmation prompts.\n\n## EXAMPLES\n\n    # Delete user 123 and reassign posts to user 567\n    $ wp user delete 123 --reassign=567\n    Success: Removed user 123 from http:\/\/example.com\n\n    # Delete all contributors and reassign their posts to user 2\n    $ wp user delete $(wp user list --role=contributor --field=ID) --reassign=2\n    Success: Removed user 813 from http:\/\/example.com\n    Success: Removed user 578 from http:\/\/example.com\n\n    # Delete all contributors in batches of 100 (avoid error: argument list too long: wp)\n    $ wp user delete $(wp user list --role=contributor --field=ID | head -n 100)\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user>... [--network] [--reassign=<user-id>] [--yes]"},{"name":"generate","description":"Generates some users.","longdesc":"Creates a specified number of new users with dummy data.\n\n## OPTIONS\n\n[--count=<number>]\n: How many users to generate?\n---\ndefault: 100\n---\n\n[--role=<role>]\n: The role of the generated users. Default: default role from WP\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: progress\noptions:\n  - progress\n  - ids\n---\n\n## EXAMPLES\n\n    # Add meta to every generated users.\n    $ wp user generate --format=ids --count=3 | xargs -d ' ' -I % wp user meta add % foo bar\n    Success: Added custom field.\n    Success: Added custom field.\n    Success: Added custom field.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--count=<number>] [--role=<role>] [--format=<format>]"},{"name":"get","description":"Gets details about a user.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n[--field=<field>]\n: Instead of returning the whole user, returns the value of a single field.\n\n[--fields=<fields>]\n: Get a specific subset of the user's fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    # Get user\n    $ wp user get 12 --field=login\n    supervisor\n\n    # Get user and export to JSON file\n    $ wp user get bob --format=json > bob.json\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"import-csv","description":"Imports users from a CSV file.","longdesc":"If the user already exists (matching the email address or login), then\nthe user is updated unless the `--skip-update` flag is used.\n\n## OPTIONS\n\n<file>\n: The local or remote CSV file of users to import. If '-', then reads from STDIN.\n\n[--send-email]\n: Send an email to new users with their account details.\n\n[--skip-update]\n: Don't update users that already exist.\n\n## EXAMPLES\n\n    # Import users from local CSV file\n    $ wp user import-csv \/path\/to\/users.csv\n    Success: bobjones created\n    Success: newuser1 created\n    Success: existinguser created\n\n    # Import users from remote CSV file\n    $ wp user import-csv http:\/\/example.com\/users.csv\n\n    Sample users.csv file:\n\n    user_login,user_email,display_name,role\n    bobjones,bobjones@example.com,Bob Jones,contributor\n    newuser1,newuser1@example.com,New User,author\n    existinguser,existinguser@example.com,Existing User,administrator\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<file> [--send-email] [--skip-update]"},{"name":"list","description":"Lists users.","longdesc":"Display WordPress users based on all arguments supported by\n[WP_User_Query()](https:\/\/developer.wordpress.org\/reference\/classes\/wp_user_query\/prepare_query\/).\n\n## OPTIONS\n\n[--role=<role>]\n: Only display users with a certain role.\n\n[--<field>=<value>]\n: Control output by one or more arguments of WP_User_Query().\n\n[--network]\n: List all users in the network for multisite.\n\n[--field=<field>]\n: Prints the value of a single field for each user.\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - ids\n  - json\n  - count\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each user:\n\n* ID\n* user_login\n* display_name\n* user_email\n* user_registered\n* roles\n\nThese fields are optionally available:\n\n* user_pass\n* user_nicename\n* user_url\n* user_activation_key\n* user_status\n* spam\n* deleted\n* caps\n* cap_key\n* allcaps\n* filter\n* url\n\n## EXAMPLES\n\n    # List user IDs\n    $ wp user list --field=ID\n    1\n\n    # List users with administrator role\n    $ wp user list --role=administrator --format=csv\n    ID,user_login,display_name,user_email,user_registered,roles\n    1,supervisor,supervisor,supervisor@gmail.com,\"2016-06-03 04:37:00\",administrator\n\n    # List users with only given fields\n    $ wp user list --fields=display_name,user_email --format=json\n    [{\"display_name\":\"supervisor\",\"user_email\":\"supervisor@gmail.com\"}]\n\n    # List users ordered by the 'last_activity' meta value.\n    $ wp user list --meta_key=last_activity --orderby=meta_value_num\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[--role=<role>] [--<field>=<value>] [--network] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"list-caps","description":"Lists all capabilities for a user.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or login.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: list\noptions:\n  - list\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n## EXAMPLES\n\n    $ wp user list-caps 21\n    edit_product\n    create_premium_item\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> [--format=<format>]"},{"name":"meta","description":"Adds, updates, deletes, and lists user custom fields.","longdesc":"## EXAMPLES\n\n    # Add user meta\n    $ wp user meta add 123 bio \"Mary is an WordPress developer.\"\n    Success: Added custom field.\n\n    # List user meta\n    $ wp user meta list 123 --keys=nickname,description,wp_capabilities\n    +---------+-----------------+--------------------------------+\n    | user_id | meta_key        | meta_value                     |\n    +---------+-----------------+--------------------------------+\n    | 123     | nickname        | supervisor                     |\n    | 123     | description     | Mary is a WordPress developer. |\n    | 123     | wp_capabilities | {\"administrator\":true}         |\n    +---------+-----------------+--------------------------------+\n\n    # Update user meta\n    $ wp user meta update 123 bio \"Mary is an awesome WordPress developer.\"\n    Success: Updated custom field 'bio'.\n\n    # Delete user meta\n    $ wp user meta delete 123 bio\n    Success: Deleted custom field.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Adds a meta field.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to add metadata for.\n\n<key>\n: The metadata key.\n\n<value>\n: The new metadata value.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## EXAMPLES\n\n    # Add user meta\n    $ wp user meta add 123 bio \"Mary is an WordPress developer.\"\n    Success: Added custom field.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <key> <value> [--format=<format>]"},{"name":"delete","description":"Deletes a meta field.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to delete metadata from.\n\n<key>\n: The metadata key.\n\n[<value>]\n: The value to delete. If omitted, all rows with key will deleted.\n\n## EXAMPLES\n\n    # Delete user meta\n    $ wp user meta delete 123 bio\n    Success: Deleted custom field.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <key> [<value>]"},{"name":"get","description":"Gets meta field value.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to get metadata for.\n\n<key>\n: The metadata key.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n---\n\n## EXAMPLES\n\n    # Get user meta\n    $ wp user meta get 123 bio\n    Mary is an WordPress developer.\n\n    # Get the primary site of a user (for multisite)\n    $ wp user meta get 2 primary_blog\n    3\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <key> [--format=<format>]"},{"name":"list","description":"Lists all metadata associated with a user.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to get metadata for.\n\n[--keys=<keys>]\n: Limit output to metadata of specific keys.\n\n[--fields=<fields>]\n: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n---\n\n[--orderby=<fields>]\n: Set orderby which field.\n---\ndefault: id\noptions:\n - id\n - meta_key\n - meta_value\n---\n\n[--order=<order>]\n: Set ascending or descending order.\n---\ndefault: asc\noptions:\n - asc\n - desc\n---\n\n[--unserialize]\n: Unserialize meta_value output.\n\n## EXAMPLES\n\n    # List user meta\n    $ wp user meta list 123 --keys=nickname,description,wp_capabilities\n    +---------+-----------------+--------------------------------+\n    | user_id | meta_key        | meta_value                     |\n    +---------+-----------------+--------------------------------+\n    | 123     | nickname        | supervisor                     |\n    | 123     | description     | Mary is a WordPress developer. |\n    | 123     | wp_capabilities | {\"administrator\":true}         |\n    +---------+-----------------+--------------------------------+\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"},{"name":"patch","description":"Update a nested value for a meta field.","longdesc":"## OPTIONS\n\n<action>\n: Patch action to perform.\n---\noptions:\n  - insert\n  - update\n  - delete\n---\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to patch.\n\n[<value>]\n: The new value. If omitted, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<action> <id> <key> <key-path>... [<value>] [--format=<format>]"},{"name":"pluck","description":"Get a nested value from a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to get.\n\n<key-path>...\n: The name(s) of the keys within the value to locate the value to pluck.\n\n[--format=<format>]\n: The output format of the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n  - yaml\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <key> <key-path>... [--format=<format>]"},{"name":"update","description":"Updates a meta field.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to update metadata for.\n\n<key>\n: The metadata key.\n\n<value>\n: The new metadata value.\n\n[--format=<format>]\n: The serialization format for the value.\n---\ndefault: plaintext\noptions:\n  - plaintext\n  - json\n---\n\n## EXAMPLES\n\n    # Update user meta\n    $ wp user meta update 123 bio \"Mary is an awesome WordPress developer.\"\n    Success: Updated custom field 'bio'.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <key> <value> [--format=<format>]"}]},{"name":"remove-cap","description":"Removes a user's capability.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n<cap>\n: The capability to be removed.\n\n## EXAMPLES\n\n    $ wp user remove-cap 11 publish_newsletters\n    Success: Removed 'publish_newsletters' cap for supervisor (11).\n\n    $ wp user remove-cap 11 publish_posts\n    Error: The 'publish_posts' cap for supervisor (11) is inherited from a role.\n\n    $ wp user remove-cap 11 nonexistent_cap\n    Error: No such 'nonexistent_cap' cap for supervisor (11).\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> <cap>"},{"name":"remove-role","description":"Removes a user's role.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n[<role>]\n: A specific role to remove.\n\n## EXAMPLES\n\n    $ wp user remove-role 12 author\n    Success: Removed 'author' role for johndoe (12).\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> [<role>]"},{"name":"reset-password","description":"Resets the password for one or more users.","longdesc":"## OPTIONS\n\n<user>...\n: one or more user logins or IDs.\n\n[--skip-email]\n: Don't send an email notification to the affected user(s).\n\n## EXAMPLES\n\n    # Reset the password for two users and send them the change email.\n    $ wp user reset-password admin editor\n    Reset password for admin.\n    Reset password for editor.\n    Success: Passwords reset for 2 users.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user>... [--skip-email]"},{"name":"session","description":"Destroys and lists a user's sessions.","longdesc":"## EXAMPLES\n\n    # List a user's sessions.\n    $ wp user session list admin@example.com --format=csv\n    login_time,expiration_time,ip,ua\n    \"2016-01-01 12:34:56\",\"2016-02-01 12:34:56\",127.0.0.1,\"Mozilla\/5.0...\"\n\n    # Destroy the most recent session of the given user.\n    $ wp user session destroy admin\n    Success: Destroyed session. 3 sessions remaining.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"destroy","description":"Destroy a session for the given user.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n[<token>]\n: The token of the session to destroy. Defaults to the most recently created session.\n\n[--all]\n: Destroy all of the user's sessions.\n\n## EXAMPLES\n\n    # Destroy the most recent session of the given user.\n    $ wp user session destroy admin\n    Success: Destroyed session. 3 sessions remaining.\n\n    # Destroy a specific session of the given user.\n    $ wp user session destroy admin e073ad8540a9c2...\n    Success: Destroyed session. 2 sessions remaining.\n\n    # Destroy all the sessions of the given user.\n    $ wp user session destroy admin --all\n    Success: Destroyed all sessions.\n\n    # Destroy all sessions for all users.\n    $ wp user list --field=ID | xargs -n 1 wp user session destroy --all\n    Success: Destroyed all sessions.\n    Success: Destroyed all sessions.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> [<token>] [--all]"},{"name":"list","description":"List sessions for the given user.","longdesc":"Note: The `token` field does not return the actual token, but a hash of\nit. The real token is not persisted and can only be found in the\ncorresponding cookies on the client side.\n\n## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n[--fields=<fields>]\n: Limit the output to specific fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n  - count\n  - ids\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each session:\n\n* token\n* login_time\n* expiration_time\n* ip\n* ua\n\nThese fields are optionally available:\n\n* expiration\n* login\n\n## EXAMPLES\n\n    # List a user's sessions.\n    $ wp user session list admin@example.com --format=csv\n    login_time,expiration_time,ip,ua\n    \"2016-01-01 12:34:56\",\"2016-02-01 12:34:56\",127.0.0.1,\"Mozilla\/5.0...\"\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> [--fields=<fields>] [--format=<format>]"}]},{"name":"set-role","description":"Sets the user role.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n[<role>]\n: Make the user have the specified role. If not passed, the default role is\nused.\n\n## EXAMPLES\n\n    $ wp user set-role 12 author\n    Success: Added johndoe (12) to http:\/\/example.com as author.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user> [<role>]"},{"name":"spam","description":"Marks one or more users as spam.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of users to mark as spam.\n\n## EXAMPLES\n\n    $ wp user spam 123\n    User 123 marked as spam.\n    Success: Spamed 1 of 1 users.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"term","description":"Adds, updates, removes, and lists user terms.","longdesc":"## EXAMPLES\n\n    # Set user terms\n    $ wp user term set 123 test category\n    Success: Set terms.\n\n\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Add a term to an object.","longdesc":"Append the term to the existing set of terms on the object.\n\n<id>\n: The ID of the object.\n\n<taxonomy>\n: The name of the taxonomy type to be added.\n\n<term>...\n: The slug of the term or terms to be added.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\noptions:\n  - slug\n  - id\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <taxonomy> <term>... [--by=<field>]"},{"name":"list","description":"List all terms associated with an object.","longdesc":"<id>\n: ID for the object.\n\n<taxonomy>...\n: One or more taxonomies to list.\n\n[--field=<field>]\n: Prints the value of a single field for each term.\n\n[--fields=<fields>]\n: Limit the output to specific row fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n  - count\n  - ids\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each term:\n\n* term_id\n* name\n* slug\n* taxonomy\n\nThese fields are optionally available:\n\n* term_taxonomy_id\n* description\n* term_group\n* parent\n* count\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <taxonomy>... [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"remove","description":"Remove a term from an object.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<taxonomy>\n: The name of the term's taxonomy.\n\n[<term>...]\n: The name of the term or terms to be removed from the object.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\noptions:\n  - slug\n  - id\n---\n\n[--all]\n: Remove all terms from the object.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <taxonomy> [<term>...] [--by=<field>] [--all]"},{"name":"set","description":"Set object terms.","longdesc":"Replaces existing terms on the object.\n\n<id>\n: The ID of the object.\n\n<taxonomy>\n: The name of the taxonomy type to be updated.\n\n<term>...\n: The slug of the term or terms to be updated.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\noptions:\n  - slug\n  - id\n---\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id> <taxonomy> <term>... [--by=<field>]"}]},{"name":"unspam","description":"Removes one or more users from spam.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of users to remove from spam.\n\n## EXAMPLES\n\n    $ wp user unspam 123\n    User 123 removed from spam.\n    Success: Unspamed 1 of 1 users.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<id>..."},{"name":"update","description":"Updates an existing user.","longdesc":"## OPTIONS\n\n<user>...\n: The user login, user email or user ID of the user(s) to update.\n\n[--user_pass=<password>]\n: A string that contains the plain text password for the user.\n\n[--user_nicename=<nice_name>]\n: A string that contains a URL-friendly name for the user. The default is the user's username.\n\n[--user_url=<url>]\n: A string containing the user's URL for the user's web site.\n\n[--user_email=<email>]\n: A string containing the user's email address.\n\n[--display_name=<display_name>]\n: A string that will be shown on the site. Defaults to user's username.\n\n[--nickname=<nickname>]\n: The user's nickname, defaults to the user's username.\n\n[--first_name=<first_name>]\n: The user's first name.\n\n[--last_name=<last_name>]\n: The user's last name.\n\n[--description=<description>]\n: A string containing content about the user.\n\n[--rich_editing=<rich_editing>]\n: A string for whether to enable the rich editor or not. False if not empty.\n\n[--user_registered=<yyyy-mm-dd-hh-ii-ss>]\n: The date the user registered.\n\n[--role=<role>]\n: A string used to set the user's role.\n\n--<field>=<value>\n: One or more fields to update. For accepted fields, see wp_update_user().\n\n[--skip-email]\n: Don't send an email notification to the user.\n\n## EXAMPLES\n\n    # Update user\n    $ wp user update 123 --display_name=Mary --user_pass=marypass\n    Success: Updated user 123.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<user>... [--user_pass=<password>] [--user_nicename=<nice_name>] [--user_url=<url>] [--user_email=<email>] [--display_name=<display_name>] [--nickname=<nickname>] [--first_name=<first_name>] [--last_name=<last_name>] [--description=<description>] [--rich_editing=<rich_editing>] [--user_registered=<yyyy-mm-dd-hh-ii-ss>] [--role=<role>] --<field>=<value> [--skip-email]"}]},{"name":"widget","description":"Manages widgets, including adding and moving them within sidebars.","longdesc":"A [widget](https:\/\/developer.wordpress.org\/themes\/functionality\/widgets\/) adds content and features to a widget area (also called a [sidebar](https:\/\/developer.wordpress.org\/themes\/functionality\/sidebars\/)).\n\n## EXAMPLES\n\n    # List widgets on a given sidebar\n    $ wp widget list sidebar-1\n    +----------+------------+----------+----------------------+\n    | name     | id         | position | options              |\n    +----------+------------+----------+----------------------+\n    | meta     | meta-6     | 1        | {\"title\":\"Meta\"}     |\n    | calendar | calendar-2 | 2        | {\"title\":\"Calendar\"} |\n    +----------+------------+----------+----------------------+\n\n    # Add a calendar widget to the second position on the sidebar\n    $ wp widget add calendar sidebar-1 2\n    Success: Added widget to sidebar.\n\n    # Update option(s) associated with a given widget\n    $ wp widget update calendar-1 --title=\"Calendar\"\n    Success: Widget updated.\n\n    # Delete one or more widgets entirely\n    $ wp widget delete calendar-2 archive-1\n    Success: 2 widgets removed from sidebar.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","subcommands":[{"name":"add","description":"Adds a widget to a sidebar.","longdesc":"Creates a new widget entry in the database, and associates it with the\nsidebar.\n\n## OPTIONS\n\n<name>\n: Widget name.\n\n<sidebar-id>\n: ID for the corresponding sidebar.\n\n[<position>]\n: Widget's current position within the sidebar. Defaults to last\n\n[--<field>=<value>]\n: Widget option to add, with its new value\n\n## EXAMPLES\n\n    # Add a new calendar widget to sidebar-1 with title \"Calendar\"\n    $ wp widget add calendar sidebar-1 2 --title=\"Calendar\"\n    Success: Added widget to sidebar.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<name> <sidebar-id> [<position>] [--<field>=<value>]"},{"name":"deactivate","description":"Deactivates one or more widgets from an active sidebar.","longdesc":"Moves widgets to Inactive Widgets.\n\n## OPTIONS\n\n<widget-id>...\n: Unique ID for the widget(s)\n\n## EXAMPLES\n\n    # Deactivate the recent-comments-2 widget.\n    $ wp widget deactivate recent-comments-2\n    Success: 1 widget deactivated.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<widget-id>..."},{"name":"delete","description":"Deletes one or more widgets from a sidebar.","longdesc":"## OPTIONS\n\n<widget-id>...\n: Unique ID for the widget(s)\n\n## EXAMPLES\n\n    # Delete the recent-comments-2 widget from its sidebar.\n    $ wp widget delete recent-comments-2\n    Success: Deleted 1 of 1 widgets.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<widget-id>..."},{"name":"list","description":"Lists widgets associated with a sidebar.","longdesc":"## OPTIONS\n\n<sidebar-id>\n: ID for the corresponding sidebar.\n\n[--fields=<fields>]\n: Limit the output to specific object fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - ids\n  - json\n  - count\n  - yaml\n---\n\n## AVAILABLE FIELDS\n\nThese fields will be displayed by default for each widget:\n\n* name\n* id\n* position\n* options\n\nThere are no optionally available fields.\n\n## EXAMPLES\n\n    $ wp widget list sidebar-1 --fields=name,id --format=csv\n    name,id\n    meta,meta-5\n    search,search-3\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<sidebar-id> [--fields=<fields>] [--format=<format>]"},{"name":"move","description":"Moves the position of a widget.","longdesc":"Changes the order of a widget in its existing sidebar, or moves it to a\nnew sidebar.\n\n## OPTIONS\n\n<widget-id>\n: Unique ID for the widget\n\n[--position=<position>]\n: Assign the widget to a new position.\n\n[--sidebar-id=<sidebar-id>]\n: Assign the widget to a new sidebar\n\n## EXAMPLES\n\n    # Change position of widget\n    $ wp widget move recent-comments-2 --position=2\n    Success: Widget moved.\n\n    # Move widget to Inactive Widgets\n    $ wp widget move recent-comments-2 --sidebar-id=wp_inactive_widgets\n    Success: Widget moved.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<widget-id> [--position=<position>] [--sidebar-id=<sidebar-id>]"},{"name":"reset","description":"Resets sidebar.","longdesc":"Removes all widgets from the sidebar and places them in Inactive Widgets.\n\n## OPTIONS\n\n[<sidebar-id>...]\n: One or more sidebars to reset.\n\n[--all]\n: If set, all sidebars will be reset.\n\n## EXAMPLES\n\n    # Reset a sidebar\n    $ wp widget reset sidebar-1\n    Success: Sidebar 'sidebar-1' reset.\n\n    # Reset multiple sidebars\n    $ wp widget reset sidebar-1 sidebar-2\n    Success: Sidebar 'sidebar-1' reset.\n    Success: Sidebar 'sidebar-2' reset.\n\n    # Reset all sidebars\n    $ wp widget reset --all\n    Success: Sidebar 'sidebar-1' reset.\n    Success: Sidebar 'sidebar-2' reset.\n    Success: Sidebar 'sidebar-3' reset.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"[<sidebar-id>...] [--all]"},{"name":"update","description":"Updates options for an existing widget.","longdesc":"## OPTIONS\n\n<widget-id>\n: Unique ID for the widget\n\n[--<field>=<value>]\n: Field to update, with its new value\n\n## EXAMPLES\n\n    # Change calendar-1 widget title to \"Our Calendar\"\n    $ wp widget update calendar-1 --title=\"Our Calendar\"\n    Success: Widget updated.\n\n## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files.\n\n  --url=<url>\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\n  --ssh=[<scheme>:][<user>@]<host|container>[:<port>][<path>]\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\", \"docker-compose\", \"docker-compose-run\", \"vagrant\").\n\n  --http=<http>\n      Perform operation against a remote WordPress installation over HTTP.\n\n  --user=<id|login|email>\n      Set the WordPress user.\n\n  --skip-plugins[=<plugins>]\n      Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.\n\n  --skip-themes[=<themes>]\n      Skip loading all themes, or a comma-separated list of themes.\n\n  --skip-packages\n      Skip loading all installed packages.\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once).\n\n  --exec=<php-code>\n      Execute PHP code before running the command (may be used more than once).\n\n  --context=<context>\n      Load WordPress in a given context.\n\n  --[no-]color\n      Whether to colorize the output.\n\n  --debug[=<group>]\n      Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.\n\n  --prompt[=<assoc>]\n      Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.\n\n  --quiet\n      Suppress informational messages.\n\n","synopsis":"<widget-id> [--<field>=<value>]"}]}]}